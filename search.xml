<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VSFTPD 配置虚拟用户</title>
      <link href="posts/vsftpd-configuration-virtual-user/"/>
      <url>posts/vsftpd-configuration-virtual-user/</url>
      
        <content type="html"><![CDATA[<h3 id="1-新建系统用户"><a href="#1-新建系统用户" class="headerlink" title="1. 新建系统用户"></a>1. 新建系统用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ useradd -s /sbin/nologin -c <span class="string">&quot;VSFTPD SYSTEM Users&quot;</span> vsftpd</span><br></pre></td></tr></table></figure><h3 id="2-创建虚拟用户目录"><a href="#2-创建虚拟用户目录" class="headerlink" title="2. 创建虚拟用户目录"></a>2. 创建虚拟用户目录</h3><p>在系统用户家目录下新建虚拟用户目录，并更改目录权限和属组权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /home/vsftpd/ftpuser&#123;1,2&#125;</span><br><span class="line">$ chmod 755 /home/vsftpd</span><br><span class="line">$ chown vsftpd:root /home/vsftpd/ftpuser&#123;1,2&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建虚拟用户"><a href="#3-创建虚拟用户" class="headerlink" title="3. 创建虚拟用户"></a>3. 创建虚拟用户</h3><p>在 <code>/etc/vsftpd/</code> 目录下新建 <code>viruser.conf</code> 文件（文件名可以自定义）。</p><p>在文件中添加虚拟用户、密码，格式如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ftpuser1</span><br><span class="line">123456</span><br><span class="line">ftpuser2</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><h3 id="4-生成-FTP-验证数据库文件"><a href="#4-生成-FTP-验证数据库文件" class="headerlink" title="4. 生成 FTP 验证数据库文件"></a>4. 生成 FTP 验证数据库文件</h3><ul><li><p><strong>生产验证数据库文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ db_load -T -t <span class="built_in">hash</span> -f /etc/vsftpd/viruser.conf /etc/vsftpd/viruser.db</span><br></pre></td></tr></table></figure></li><li><p><strong>更改文件访问权限</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod 600 /etc/vsftpd/viruser.db</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-配置登录pam身份验证文件"><a href="#5-配置登录pam身份验证文件" class="headerlink" title="5. 配置登录pam身份验证文件"></a>5. 配置登录pam身份验证文件</h3><p>注释 <code>/etc/pam.d/vsftpd</code> 文件中的所有内容，添加如下配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auth sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/viruser</span><br><span class="line">account sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/viruser</span><br></pre></td></tr></table></figure><h3 id="6-配置虚拟用户配置文件"><a href="#6-配置虚拟用户配置文件" class="headerlink" title="6. 配置虚拟用户配置文件"></a>6. 配置虚拟用户配置文件</h3><ul><li><p><strong>创建配置文件目录</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /etc/vsftpd/virconf</span><br></pre></td></tr></table></figure></li><li><p><strong>添加配置文件以及虚拟用户权限配置</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat&gt;/etc/vsftpd/virconf/ftpuser1&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">local_root=/home/vsftpd/ftpuser1 #设置登录后禁锢的目录</span></span><br><span class="line"><span class="string">anon_umask=022 #设置用户上传的文件的权限为022</span></span><br><span class="line"><span class="string">write_enable=YES #给用户写权限</span></span><br><span class="line"><span class="string">anon_upload_enable=yes #开放上传权限</span></span><br><span class="line"><span class="string">anon_world_readable_only=no #开放下载权限</span></span><br><span class="line"><span class="string">anon_mkdir_write_enable=yes #开放创建目录的权限</span></span><br><span class="line"><span class="string">anon_other_write_enable=yes #开放删除和重命名的权限</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ cat&gt;/etc/vsftpd/virconf/ftpuser2&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">local_root=/home/vsftpd/ftpuser2 #设置登录后禁锢的目录</span></span><br><span class="line"><span class="string">anon_umask=022 #设置用户上传的文件的权限为022</span></span><br><span class="line"><span class="string">write_enable=YES #给用户写权限</span></span><br><span class="line"><span class="string">anon_upload_enable=yes #开放上传权限</span></span><br><span class="line"><span class="string">anon_world_readable_only=no #开放下载权限</span></span><br><span class="line"><span class="string">anon_mkdir_write_enable=yes #开放创建目录的权限</span></span><br><span class="line"><span class="string">anon_other_write_enable=yes #开放删除和重命名的权限</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-修改主配置文件"><a href="#7-修改主配置文件" class="headerlink" title="7. 修改主配置文件"></a>7. 修改主配置文件</h3><p>配置文件路径为： <code>/etc/vsftpd/vsftpd.conf</code></p><p>更改配置前，先对原文件进行备份。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp -a /etc/vsftpd/vsftpd.conf&#123;,.bak&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>对配置文件进行变更：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更改</span></span><br><span class="line">anonymous_enable=NO <span class="comment">#禁止匿名用户登录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消注释</span></span><br><span class="line">chroot_local_user=YES  <span class="comment">#禁止用户访问除主目录以外的目录</span></span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES <span class="comment">#设定支持ASCII模式的上传和下载功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启IPV4监听，注释IPV6监听</span></span><br><span class="line">listen=YSE</span><br><span class="line"><span class="comment">#listen_ipv6=NO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置虚拟用户进行PAM认证的文件名，文件路径为/etc/pam.d/vsftpd</span></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件尾部加入如下配置</span></span><br><span class="line">guest_enable=YES <span class="comment">#启动虚拟用户</span></span><br><span class="line">guest_username=vsftpd <span class="comment">#虚拟用户使用的系统用户名</span></span><br><span class="line">user_config_dir=/etc/vsftpd/virconf <span class="comment">#虚拟用户使用的配置文件目录</span></span><br><span class="line">allow_writeable_chroot=YES <span class="comment">#最新版的vsftpd为了安全必须用户主目录（也就是/home/vsftpd/ftpuser1）要有写权限，才能登录</span></span><br></pre></td></tr></table></figure></li><li><p><strong>最终所有的开启的配置：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -Ev <span class="string">&#x27;^&amp;|^#|^[[:space:]]*$&#x27;</span> /etc/vsftpd/vsftpd.conf</span><br><span class="line">anonymous_enable=NO</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">xferlog_file=/var/<span class="built_in">log</span>/vsftpd.log</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">listen=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=vsftpd</span><br><span class="line">user_config_dir=/etc/vsftpd/virconf</span><br><span class="line">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-重启-vsftpd-服务"><a href="#8-重启-vsftpd-服务" class="headerlink" title="8. 重启 vsftpd 服务"></a>8. 重启 vsftpd 服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><p><strong>参考链接：</strong></p><ul><li><a href="https://wiki.ubuntu.org.cn/Vsftpd">https://wiki.ubuntu.org.cn/Vsftpd</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> VSFTPD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSFTPD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S 中使用 Prometheus 监控JVM (二)</title>
      <link href="posts/k8s-prometheus-monitor-jvm-2/"/>
      <url>posts/k8s-prometheus-monitor-jvm-2/</url>
      
        <content type="html"><![CDATA[<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>在上篇文章 <a href="https://blog.wanhebin.com/posts/k8s-prometheus-monitor-jvm/">K8S 中使用 Prometheus 监控 JVM (一)</a> 中，我们基于 Kubernetes 的 Service 实现了监控 Pod 中java应用的 JVM 信息。但其实这并不适用于所有的环境，因为在实际环境中并不是所有的 Pod（微服务）都会有自己对应的 Service，所以那些没有使用到 Service 的 Pod 就无法通过上篇文章那种实现来监控 JVM 信息了。现在我们就来解决这个问题。</p><p>本篇文章会基于 Pod 控制器的方式来实现 JVM 信息的监控，下面以 Deployment 控制器为例。</p><p>&nbsp;</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="使用-JMX-Exporter-暴露-JVM-监控指标"><a href="#使用-JMX-Exporter-暴露-JVM-监控指标" class="headerlink" title="使用 JMX Exporter 暴露 JVM 监控指标"></a>使用 JMX Exporter 暴露 JVM 监控指标</h3><p>使用 JVM 进程内启动（in-process）方式，启动 JVM 需指定 JMX Exporter 的 jar 包文件和配置文件。jar 包为二进制文件，不便通过 <code>ConfigMap</code> 挂载，建议直接将 JMX Exporter 的 jar 包和配置文件都打包到业务容器镜像中。</p><p>这里为了方便演示，jar 包就简单用 <code>hostPath</code> 的方式直接挂载进容器里，配置文件使用 <code>ConfigMap</code> 的形式挂载到容器里。</p><h4 id="准备jar包和配置文件"><a href="#准备jar包和配置文件" class="headerlink" title="准备jar包和配置文件"></a>准备jar包和配置文件</h4><ol><li><p>准备 jar 包文件，可前往 <a href="https://github.com/prometheus/jmx_exporter">jmx_exporter</a> 的 Github 页面获取最新的 jar 包下载地址。执行以下命令，下载到挂载指定的 <code>hostPath</code> 目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /data/prometheus/jmx_exporter</span><br><span class="line">$ wget -O /data/prometheus/jmx_exporter/jmx_prometheus_javaagent-0.15.0.jar https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.15.0/jmx_prometheus_javaagent-0.15.0.jar</span><br></pre></td></tr></table></figure></li><li><p>编写 JMX Exporter 配置文件 <code>prometheus-jmx-config.yaml</code> 。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-jmx-config</span><br><span class="line">  namespace: default</span><br><span class="line">data:</span><br><span class="line">  prometheus-jmx-config.yaml: |</span><br><span class="line">    lowercaseOutputLabelNames: <span class="literal">true</span></span><br><span class="line">    lowercaseOutputName: <span class="literal">true</span></span><br><span class="line">    whitelistObjectNames: [<span class="string">&quot;java.lang:type=OperatingSystem&quot;</span>]</span><br><span class="line">    blacklistObjectNames: []</span><br><span class="line">    rules:</span><br><span class="line">      - pattern: <span class="string">&#x27;java.lang&lt;type=OperatingSystem&gt;&lt;&gt;(committed_virtual_memory|free_physical_memory|free_swap_space|total_physical_memory|total_swap_space)_size:&#x27;</span></span><br><span class="line">        name: os_<span class="variable">$1_bytes</span></span><br><span class="line">        labels: &#123;&#125;</span><br><span class="line">        <span class="built_in">type</span>: GAUGE</span><br><span class="line">        attrNameSnakeCase: <span class="literal">true</span></span><br><span class="line">      - pattern: <span class="string">&#x27;java.lang&lt;type=OperatingSystem&gt;&lt;&gt;((?!process_cpu_time)\w+):&#x27;</span></span><br><span class="line">        name: os_<span class="variable">$1</span></span><br><span class="line">        labels: &#123;&#125;</span><br><span class="line">        <span class="built_in">type</span>: GAUGE</span><br><span class="line">        attrNameSnakeCase: <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>更多配置项请参考 <a href="https://prometheus.io/docs/introduction/overview/">Prometheus</a> 官方文档。</p></blockquote></li></ol><h3 id="部署-Java-应用"><a href="#部署-Java-应用" class="headerlink" title="部署 Java 应用"></a>部署 Java 应用</h3><p>部署应用至 Kubernetes 时，需修改 JVM 启动参数以便启动时加载 JMX Exporter。</p><p>需要在 JVM 启动参数中添加一项额外的参数，格式如下：</p><ul><li>启动参数格式： <code>-javaagent:&lt;jar&gt;=&lt;port&gt;:&lt;config&gt;</code></li></ul><h4 id="配置-Deployment-文件"><a href="#配置-Deployment-文件" class="headerlink" title="配置 Deployment 文件"></a>配置 Deployment 文件</h4><ol><li><p>挂载 jmx exporter 配置文件、jar包。</p><p>首先需要把 jar 包 和 ConfigMap 挂载进 Deployment 中（路劲自行调整）：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  <span class="attr">volumeMounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/jmx_prometheus_javaagent-0.15.0.jar&quot;</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jmx-prometheus-javaagent</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/jmx&quot;</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jmx-prometheus-javaagent</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/data/prometheus/jmx_exporter/jmx_prometheus_javaagent-0.15.0.jar</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">configMap:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span> </span><br></pre></td></tr></table></figure></li><li><p>在启动参数中加入如下配置，以启用 jmx exporter 。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">-javaagent:/jmx_prometheus_javaagent-0.15.0.jar=8088:/jmx/prometheus-jmx-config.yaml</span></span><br></pre></td></tr></table></figure></li><li><p>添加新标签，为了方便在 Promethues 做匹配。</p><p> 在 <code>deployment.spec.template.metadata.labels.</code> 下加入新的 label ，如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">prometheus.monitor/port: <span class="string">&quot;8088&quot;</span></span><br><span class="line">prometheus.monitor/jvm: <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Deployment-完整示例"><a href="#Deployment-完整示例" class="headerlink" title="Deployment 完整示例"></a>Deployment 完整示例</h4><p>下面以Spring Cloud中的Eureka服务为示例：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-service</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">eureka-service</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">eureka-service</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">eureka-service</span></span><br><span class="line">        <span class="attr">prometheus.monitor/port:</span> <span class="string">&quot;8088&quot;</span></span><br><span class="line">        <span class="attr">prometheus.monitor/jvm:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">eureka-service</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">eureka:v3.0</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-Xmx2024m</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-javaagent:/jmx_prometheus_javaagent-0.15.0.jar=8088:/jmx/prometheus-jmx-config.yaml</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-jar</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">app.jar</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">2Gi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">512Mi</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/data/gfs/</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">logs</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/jmx_prometheus_javaagent-0.15.0.jar&quot;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">jmx-prometheus-javaagent</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/jmx&quot;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/data/logs</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jmx-prometheus-javaagent</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/data/prometheus/jmx_exporter/jmx_prometheus_javaagent-0.15.0.jar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">configMap:</span> </span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span> </span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><p>在 Deployment 中添加的 <code>annotations</code> 字段，作用是为了在 Promethues 配置文件的 <code>RawJobs</code> 中对标签做一些重新标记配置等。</p></blockquote><h3 id="添加-Prometheus-监控配置"><a href="#添加-Prometheus-监控配置" class="headerlink" title="添加 Prometheus 监控配置"></a>添加 Prometheus 监控配置</h3><p>配置 Prometheus，使监控数据可被采集。</p><p>在配置文件中添加如下 RawJob 配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">jvm</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">  <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">pod</span></span><br><span class="line">  <span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_pod_label_prometheus_monitor_jvm</span>]</span><br><span class="line">    <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__address__</span>, <span class="string">__meta_kubernetes_pod_label_prometheus_monitor_port</span>]</span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1:$2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_pod_name</span>]</span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">application</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.+)(-.+-.+)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1</span></span><br></pre></td></tr></table></figure><h3 id="使用Grafana出图"><a href="#使用Grafana出图" class="headerlink" title="使用Grafana出图"></a>使用Grafana出图</h3><p><a href="https://download.wanhebin.com/package/grafana/dashboard/Grafana-Dashboard-JVM-Prometheus_Jmx_Exporter.json">模板下载链接</a>，下载后直接把文件的json内容复制导入Grafana，面板效果图如下：</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/22/e7a76427de828.png"></p>]]></content>
      
      
      <categories>
          
          <category> Prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL/TLS 握手：详细过程及其工作原理</title>
      <link href="posts/ssl-tls-handshake-how-does-it-work/"/>
      <url>posts/ssl-tls-handshake-how-does-it-work/</url>
      
        <content type="html"><![CDATA[<h2 id="SSL-TLS-握手是在服务器和网站之间建立安全连接的过程。"><a href="#SSL-TLS-握手是在服务器和网站之间建立安全连接的过程。" class="headerlink" title="SSL/TLS 握手是在服务器和网站之间建立安全连接的过程。"></a>SSL/TLS 握手是在服务器和网站之间建立安全连接的过程。</h2><p>SSL 证书或数字证书因其对网络用户、网站所有者和发布者的安全性而变得流行。他们利用公钥密码术对客户端和网络服务器之间的数据传输进行编码。有各种类型的数字证书，但都服务于相同的过程，为客户端和网络所有者提供安全性。</p><p>Web 所有者经常使用<a href="https://www.ssl2buy.com/">SSL 证书</a>来防止黑客入侵。要开始安全连接，客户端和服务器都首先进行 SSL 握手过程，包括身份验证、密钥交换过程等。让我们先从 SSL/TLS 证书开始，了解它们的工作过程。然后我们将解释整个TLS握手过程。</p><p>&nbsp;</p><h2 id="什么是-SSL-TLS？"><a href="#什么是-SSL-TLS？" class="headerlink" title="什么是 SSL/TLS？"></a>什么是 SSL/TLS？</h2><p>SSL（安全套接字层）是一种标准安全协议，广泛用于保护 Internet 上的通信。SSL 使用<a href="https://www.ssl2buy.com/wiki/symmetric-vs-asymmetric-encryption-what-are-differences">非对称加密</a>来保护信息不受攻击者的影响。SSL 证书由受信任的证书颁发机构颁发，以确保没有人（没有正确的编码/解码密钥）可以读取用户和服务器之间共享的数据。</p><p>SSL 证书在两个密钥的帮助下进行加密和解密的过程。一个是任何试图与站点建立安全连接的人都可以使用的公钥。另一个密钥是由 Web 服务器隐藏的私钥，用于解密从客户端收到的消息。通过这种方式，在服务器和客户端的浏览器之间建立了安全的连接。</p><p>如果您访问未安装 SSL 证书的站点，所有信息将以纯文本形式共享，这意味着任何人都可以拦截和读取您的私人数据。黑客可以使用该信息来实现其恶意目的。</p><p>SSL 证书提供针对这些攻击的安全性。即使有人可以捕获数据，如果没有正确的加密/解密密钥，他/她也将无法读取数据。</p><p>与 SSL 相比，<a href="https://www.ssl2buy.com/wiki/ssl-vs-tls">TLS（传输层安全）</a>是高级版本。现在，几乎所有网站都使用 TLS 而不是 SSL，因为它提供了比 SSL 更好的保护。</p><p>您可能会感到困惑，为什么我们仍然比 TLS 更普遍地使用 SSL。它就像一个品牌名称，已经在市场上流行起来。这意味着，如果您购买了 SSL 证书，则无需购买 TLS 许可证。</p><p>&nbsp;</p><h2 id="什么是-SSL-TLS-握手？"><a href="#什么是-SSL-TLS-握手？" class="headerlink" title="什么是 SSL/TLS 握手？"></a>什么是 SSL/TLS 握手？</h2><p>SSL/TLS 握手是在服务器和站点之间建立安全连接的过程。这是建立安全连接的最关键步骤之一。建立安全连接后，服务器和客户端都可以放心地相互通信。</p><p>SSL 握手过程主要完成三件事：</p><ol><li>协商密码套件</li><li>验证浏览器和服务器。</li><li>交换密钥</li></ol><p>让我们一一解释它们。</p><h3 id="协商密码诉讼"><a href="#协商密码诉讼" class="headerlink" title="协商密码诉讼"></a>协商密码诉讼</h3><p>密码套件是指专注于为网络提供安全性的方法的指令集。它提供了一组关于安全数据如何与 HTTPS、FTPS 和其他网络协议通信的指南。</p><p>浏览器可能从规范角度来看有所不同，例如 Mozilla Firefox、Safari、Chrome 和 Microsoft Edge。同样，苹果macOS、微软Windows、Linux和Android iOS等常见操作系统在服务器端的功能支持也略有不同。当您引入自定义设置时，所有这些都变得更加复杂。</p><p><img src="https://pic-cdn.wanhebin.com/img/ssl-tls/negotiating-cipher-suits.png" alt="谈判密码套装"></p><p>因此，TLS 握手的第一阶段使用户和服务器能够共享他们的资源，以便可以识别他们共同支持的加密特性。</p><p>一旦浏览器和服务器确定了特定的加密策略，他们就会利用它向用户提供 SSL 许可。这称为密码套件。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>收到许可证后，客户端的浏览器会进行调查以确保证书是“真实的”。您不仅需要对信息进行编码以获得安全链接；您还必须确保将其提交给适当的网站/组织。但是他们实现它的方式取决于所使用的密码套件。</p><p>所有值得信赖的 SSL 证书均由授权数字证书颁发机构证书颁发机构 (CA) 授予。这些公司需要遵循严格的颁发和证书协议，以便他们授予的许可证获得批准。这主要是为了确保您只能获得您拥有的域或企业的证书。通过这种方式，您可以假设一个 CA，例如公证人。签名表明许可证上的个人或组织是其声称的身份。</p><p>客户端在整个 TLS 握手的身份验证过程中进行多次加密安全测试，以确保服务器提交的许可证是合法的。这涉及验证数字签名并确保值得信赖的 CA 已授予证书。</p><p>此时用户还确认服务器拥有与证书相关的私钥。所有 SSL 许可证都使用包含公钥和私钥的密钥对。公钥用于数据加密，而私钥用于解密。这被称为“非对称加密”，因为使用单独的密钥来完成任务。</p><p>客户端可以使用公钥对随机信息进行编码，以使用最流行的公钥密码系统 RSA 创建会话密钥。服务器只有在拥有私钥时才能解码和使用信息，以确保所有权证明。</p><h3 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h3><p>此过程的最后一部分包括“会话密钥”的生成，这是最终将被利用的安全交互的关键。</p><p>会话密钥是“对称的”，这意味着编码和解码使用相同的密钥。这些密钥在实现有效加密方面比非对称密钥更有效，因此非常适合在 HTTPS 链接上来回传输数据。</p><p>根据选择的密码套件，创建密钥的准确方法会有所不同，<a href="https://www.ssl2buy.com/wiki/diffie-hellman-rsa-dsa-ecc-and-ecdsa-asymmetric-key-algorithms">RSA 和 Diffie-Hellman</a>是两种流行的方法。</p><p>每一方通知对方他们已经完成了所有相关工作以完成握手，然后双方进行校验以确保握手没有任何故意干扰或欺诈。</p><p>在 HTTPS 链接中，这是必须发生的第一阶段，甚至在访问网站之前也是如此。这个 TLS 握手过程发生在很短的时间内。</p><p>一旦 SSL 握手完成并且在您和服务器之间传输和获取的所有信息都是安全的，则编码和验证的 HTTPS 链接就会启动。</p><p>&nbsp;</p><h2 id="SSL-TLS-握手：循序渐进"><a href="#SSL-TLS-握手：循序渐进" class="headerlink" title="SSL/TLS 握手：循序渐进"></a>SSL/TLS 握手：循序渐进</h2><p>根据使用的密钥交换方法的种类和双方认可的密码套件，TLS 握手中的确切阶段可能会有所不同。</p><p><img src="https://pic-cdn.wanhebin.com/img/ssl-tls/ssl-tls-handshake.png" alt="ssl - tls 握手"></p><ol><li>用户通过发送“Hello”消息开始握手过程。此消息包含用户支持的 TLS 类型和密码套件。它还包括一串任意字节，称为“客户端随机”。</li><li>在回复中，服务器发送带有 SSL 证书的文本。该文本还包含为此过程选择的密码套件以及由服务器生成的称为“服务器随机”的随机字节串。</li><li>用户的浏览器验证服务器提供的 SSL 证书和颁发它的证书颁发机构。这证明服务器就是它所说的那样，并且客户端正在与许可证持有者进行交互。</li><li>客户端发送另一个使用 SSL 证书公钥编码的消息（premaster secret），该公钥只能由服务器持有的私钥解码。</li><li>服务器使用其私钥读取消息。</li><li>在此之后，使用客户端随机、服务器随机和预主密钥创建会话密钥。</li><li>服务器和客户端都发送一个“完成”的消息，用会话密钥编码。</li><li>SSL 握手成功完成，双方使用会话密钥继续安全通信。</li></ol><p>&nbsp;</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>TLS/SSL 握手是用于保护 Internet 通信的基本过程之一。它在幕后悄然迅速发生，大多数人对此一无所知。但是如果没有它的成功实施，用户的数据和客户端的资源就有被黑客攻击的危险。SSL 握手过程取决于客户端和服务器选择正确的密码套件和 SSL/TLS 版本来启动该过程。阅读完整指南，如上所述，以清楚地了解 SSL/TLS 握手过程。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.ssl2buy.com/wiki/ssl-tls-handshake-how-does-it-work">SSL/TLS Handshake: Detailed Process and How does it Work</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSL </tag>
            
            <tag> TLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S 中使用 Prometheus 监控JVM (一)</title>
      <link href="posts/k8s-prometheus-monitor-jvm/"/>
      <url>posts/k8s-prometheus-monitor-jvm/</url>
      
        <content type="html"><![CDATA[<h2 id="操作场景"><a href="#操作场景" class="headerlink" title="操作场景"></a>操作场景</h2><p>Prometheus 社区开发了 JMX Exporter 用于导出 JVM 的监控指标，以便使用 Prometheus 来采集监控数据。当您的 Java 业务容器化至 Kubernetes 后，可通过本文了解如何使用 Prometheus 与 JMX Exporter 来监控 Java 应用。</p><p>&nbsp;</p><h2 id="JMX-Exporter-简介"><a href="#JMX-Exporter-简介" class="headerlink" title="JMX Exporter 简介"></a>JMX Exporter 简介</h2><p>Java Management Extensions，JMX 是管理 Java 的一种扩展框架，JMX Exporter 基于此框架读取 JVM 的运行时状态。JMX Exporter 利用 Java 的 JMX 机制来读取 JVM 运行时的监控数据，然后将其转换为 Prometheus 可辨识的 metrics 格式，以便让 Prometheus 对其进行监控采集。</p><p>JMX Exporter 提供<strong>启动独立进程</strong>及 <strong>JVM 进程内启动（in-process）</strong>两种方式暴露 JVM 监控指标：</p><ol><li><strong>启动独立进程</strong><br>JVM 启动时指定参数，暴露 JMX 的 RMI 接口。JMX Exporter 调用 RMI 获取 JVM 运行时状态数据，转换为 Prometheus metrics 格式，并暴露端口让 Prometheus 采集。</li><li><strong>JVM 进程内启动（in-process）</strong><br>JVM 启动时指定参数，通过 javaagent 的形式运行 JMX Exporter 的 jar 包，进程内读取 JVM 运行时状态数据，转换为 Prometheus metrics 格式，并暴露端口让 Prometheus 采集。</li></ol><blockquote><p>说明：</p><p>官方不建议使用<strong>启动独立进程</strong>方式，该方式配置复杂且需单独的进程，进程本身的监控又引发了新的问题。本文以 <strong>JVM 进程内启动（in-process）</strong>方式为例，在 Kubernetes 环境下使用 JMX Exporter 暴露 JVM 监控指标。</p></blockquote><p>&nbsp;</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="使用-JMX-Exporter-暴露-JVM-监控指标"><a href="#使用-JMX-Exporter-暴露-JVM-监控指标" class="headerlink" title="使用 JMX Exporter 暴露 JVM 监控指标"></a>使用 JMX Exporter 暴露 JVM 监控指标</h3><p>使用 JVM 进程内启动（in-process）方式，启动 JVM 需指定 JMX Exporter 的 jar 包文件和配置文件。jar 包为二进制文件，不便通过 <code>ConfigMap</code> 挂载，建议直接将 JMX Exporter 的 jar 包和配置文件都打包到业务容器镜像中。</p><p>这里为了方便演示，jar 包就简单用 <code>hostPath</code> 的方式直接挂载进容器里，配置文件使用 <code>ConfigMap</code> 的形式挂载到容器里。</p><h4 id="准备jar包和配置文件"><a href="#准备jar包和配置文件" class="headerlink" title="准备jar包和配置文件"></a>准备jar包和配置文件</h4><ol><li><p>准备 jar 包文件，可前往 <a href="https://github.com/prometheus/jmx_exporter">jmx_exporter</a> 的 Github 页面获取最新的 jar 包下载地址。执行以下命令，下载到挂载指定的 <code>hostPath</code> 目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /data/prometheus/jmx_exporter</span><br><span class="line">$ wget -O /data/prometheus/jmx_exporter/jmx_prometheus_javaagent-0.15.0.jar https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.15.0/jmx_prometheus_javaagent-0.15.0.jar</span><br></pre></td></tr></table></figure></li><li><p>编写 JMX Exporter 配置文件 <code>prometheus-jmx-config.yaml</code> 。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">prometheus-jmx-config.yaml:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    lowercaseOutputLabelNames: true</span></span><br><span class="line"><span class="string">    lowercaseOutputName: true</span></span><br><span class="line"><span class="string">    whitelistObjectNames: [&quot;java.lang:type=OperatingSystem&quot;]</span></span><br><span class="line"><span class="string">    blacklistObjectNames: []</span></span><br><span class="line"><span class="string">    rules:</span></span><br><span class="line"><span class="string">      - pattern: &#x27;java.lang&lt;type=OperatingSystem&gt;&lt;&gt;(committed_virtual_memory|free_physical_memory|free_swap_space|total_physical_memory|total_swap_space)_size:&#x27;</span></span><br><span class="line"><span class="string">        name: os_$1_bytes</span></span><br><span class="line"><span class="string">        labels: &#123;&#125;</span></span><br><span class="line"><span class="string">        type: GAUGE</span></span><br><span class="line"><span class="string">        attrNameSnakeCase: true</span></span><br><span class="line"><span class="string">      - pattern: &#x27;java.lang&lt;type=OperatingSystem&gt;&lt;&gt;((?!process_cpu_time)\w+):&#x27;</span></span><br><span class="line"><span class="string">        name: os_$1</span></span><br><span class="line"><span class="string">        labels: &#123;&#125;</span></span><br><span class="line"><span class="string">        type: GAUGE</span></span><br><span class="line"><span class="string">        attrNameSnakeCase: true</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>更多配置项请参考 <a href="https://prometheus.io/docs/introduction/overview/">Prometheus</a> 官方文档。</p></blockquote></li></ol><h4 id="部署-Java-应用"><a href="#部署-Java-应用" class="headerlink" title="部署 Java 应用"></a>部署 Java 应用</h4><p>部署应用至 Kubernetes 时，需修改 JVM 启动参数以便启动时加载 JMX Exporter。JVM 启动时会读取 <code>JAVA_OPTS</code> 环境变量，作为额外的启动参数，部署时可为应用增加该环境变量。</p><ul><li>启动参数格式： <code>-javaagent:&lt;jar&gt;=&lt;port&gt;:&lt;config&gt;</code></li><li>该示例使用8088端口暴露 JVM 的监控指标，您可按需自行更改。</li></ul><p>下面以Tomcat为示例：</p><ol><li><p>编写tomcat的<code>Deployment</code>文件。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">tomcat:jdk8-openjdk-slim</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JAVA_OPTS</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;-javaagent:/jmx_prometheus_javaagent-0.15.0.jar=8088:/jmx/prometheus-jmx-config.yaml&quot;</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">300m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">512Mi</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">1024Mi</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/jmx_prometheus_javaagent-0.15.0.jar&quot;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">jmx-prometheus-javaagent</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/jmx&quot;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jmx-prometheus-javaagent</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/data/prometheus/jmx_exporter/jmx_prometheus_javaagent-0.15.0.jar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">configMap:</span> </span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br></pre></td></tr></table></figure></li><li><p>编写tomcat的 <code>Service</code> 文件。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">prometheus.io/port:</span> <span class="string">&quot;8088&quot;</span></span><br><span class="line">    <span class="attr">prometheus.io/jvm:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jmx-metrics</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><p>在 Service 中添加的 <code>annotations</code> 字段，作用是为了在 Promethues 配置文件的 <code>RawJobs</code> 中对标签做一些重新标记配置等。</p></blockquote></li></ol><p>&nbsp;</p><h3 id="添加-Prometheus-监控配置"><a href="#添加-Prometheus-监控配置" class="headerlink" title="添加 Prometheus 监控配置"></a>添加 Prometheus 监控配置</h3><p>配置 Prometheus，使监控数据可被采集。示例如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">jvm</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">  <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">  <span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_annotation_prometheus_io_jvm</span>]</span><br><span class="line">    <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__address__</span>, <span class="string">__meta_kubernetes_service_annotation_prometheus_io_port</span>]</span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1:$2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_name</span>]</span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">application</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">__meta_kubernetes_service_label_(.+)</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="添加-Grafana-监控面板"><a href="#添加-Grafana-监控面板" class="headerlink" title="添加 Grafana 监控面板"></a>添加 Grafana 监控面板</h3><p>采集数据后可进行数据展示。若熟悉 Prometheus 和 Grafana，则可自行根据指标设计所需面板。您也可直接使用社区提供面板，例如 <a href="https://grafana.com/grafana/dashboards/8563">JVM dashboard</a>。可直接导入使用。</p><p>不过上面这个Dashboard，有一些地方使用起来不太友好，所以在其基础上进行了一些修改。</p><p><a href="https://download.wanhebin.com/package/grafana/dashboard/Grafana-Dashboard-JVM-Prometheus_Jmx_Exporter.json">模板下载链接</a>，下载后直接把文件的json内容复制导入Grafana，面板效果图如下：</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/22/e7a76427de828.png" alt="prometheus-grafana-jmx_exporter.png"></p><blockquote><p><strong>注意</strong>：</p><p>由于这个Dashboard是根据 Promethues 中 RawJobs 定制的，若要使用这个Dashboard，Prometheus 中的 RawJobs 规则需要与文中一致，建议不要修改。否则可能会出现某些功能不生效的情况。（当然，如果你熟悉Promethues，也可以根据自己需求进行调整）</p></blockquote><p>&nbsp;</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/prometheus/jmx_exporter">JMX Exporter 项目地址</a></li><li><a href="https://grafana.com/grafana/dashboards/8563">JVM 监控面板</a></li><li><a href="https://cloud.tencent.com/document/product/457/48724">使用 Prometheus 监控 Java 应用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 定制 OpenSSL  RPM包</title>
      <link href="posts/centos7-custom-openssl-rpm-package/"/>
      <url>posts/centos7-custom-openssl-rpm-package/</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h4 id="1-1-安装RPM打包、测试必备开发工具"><a href="#1-1-安装RPM打包、测试必备开发工具" class="headerlink" title="1.1 安装RPM打包、测试必备开发工具"></a>1.1 安装RPM打包、测试必备开发工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y rpm-build rpmlint rpmdevtools</span><br></pre></td></tr></table></figure><h4 id="1-2-安装打包、编译所需的依赖软件"><a href="#1-2-安装打包、编译所需的依赖软件" class="headerlink" title="1.2 安装打包、编译所需的依赖软件"></a>1.2 安装打包、编译所需的依赖软件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y gcc gcc-c++ make perl perl-WWW-Curl</span><br></pre></td></tr></table></figure><h2 id="二、制作-OpenSSL-的-RPM-包"><a href="#二、制作-OpenSSL-的-RPM-包" class="headerlink" title="二、制作 OpenSSL 的 RPM 包"></a>二、制作 OpenSSL 的 RPM 包</h2><blockquote><p><strong>注意：</strong></p><p>切记！不要使用 <code>root</code> 用户来执行打包操作。因为这十分危险，所有二进制文件都会在打包前安装至系统中，因此您应该以普通用户身份打包，以防止系统被破坏。</p></blockquote><h4 id="2-1-配置-rpmbuild-工作目录"><a href="#2-1-配置-rpmbuild-工作目录" class="headerlink" title="2.1 配置 rpmbuild 工作目录"></a>2.1 配置 rpmbuild 工作目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p ~/rpmbuild/&#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS&#125;</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;%_topdir %&#123;getenv:HOME&#125;/rpmbuild&quot;</span> &gt; ~/.rpmmacros</span><br></pre></td></tr></table></figure><h4 id="2-2-下载源码包到-rpmbuild-SOURCES-目录"><a href="#2-2-下载源码包到-rpmbuild-SOURCES-目录" class="headerlink" title="2.2 下载源码包到 ~/rpmbuild/SOURCES 目录"></a>2.2 下载源码包到 <code>~/rpmbuild/SOURCES</code> 目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -O ~/rpmbuild/SOURCES/openssl-1.1.1k.tar.gz https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1k.tar.gz</span><br></pre></td></tr></table></figure><h4 id="2-3-编写-openssl-1-1-1k-软件库包的spec文件"><a href="#2-3-编写-openssl-1-1-1k-软件库包的spec文件" class="headerlink" title="2.3 编写 openssl 1.1.1k 软件库包的spec文件"></a>2.3 编写 <code>openssl 1.1.1k</code> 软件库包的spec文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/rpmbuild/SPECS/openssl.spec</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Name:openssl</span><br><span class="line">Version:1.1.1k</span><br><span class="line">Release:1%&#123;?dist&#125;</span><br><span class="line">Summary:Utilities from the general purpose cryptography library with TLS implementation</span><br><span class="line">Group:System Environment/Libraries</span><br><span class="line">License:GPLv2+</span><br><span class="line">URL:https://www.openssl.org/</span><br><span class="line">Source0:https://www.openssl.org/<span class="built_in">source</span>/%&#123;name&#125;-%&#123;version&#125;.tar.gz</span><br><span class="line">BuildRequires:make gcc perl perl-WWW-Curl</span><br><span class="line">Requires:%&#123;name&#125; = %&#123;version&#125;-%&#123;release&#125;</span><br><span class="line">BuildRoot:%_topdir/BUILDROOT</span><br><span class="line"></span><br><span class="line">%global openssldir /usr/openssl</span><br><span class="line"></span><br><span class="line">%description</span><br><span class="line">The OpenSSL toolkit provides support <span class="keyword">for</span> secure communications between</span><br><span class="line">machines. OpenSSL includes a certificate management tool and shared</span><br><span class="line">libraries <span class="built_in">which</span> provide various cryptographic algorithms and</span><br><span class="line">protocols.</span><br><span class="line"></span><br><span class="line">%prep</span><br><span class="line">%setup -q</span><br><span class="line"></span><br><span class="line">%build</span><br><span class="line">./config --prefix=%&#123;openssldir&#125; --openssldir=%&#123;openssldir&#125;</span><br><span class="line">make %&#123;?_smp_mflags&#125;</span><br><span class="line"></span><br><span class="line">%install</span><br><span class="line">[ <span class="string">&quot;%&#123;buildroot&#125;&quot;</span> != <span class="string">&quot;/&quot;</span> ] &amp;&amp; %&#123;__rm&#125; -rf %&#123;buildroot&#125;</span><br><span class="line">%make_install</span><br><span class="line">mkdir -p %&#123;buildroot&#125;%&#123;_bindir&#125;</span><br><span class="line">mkdir -p %&#123;buildroot&#125;%&#123;_libdir&#125;</span><br><span class="line">ln -sf %&#123;openssldir&#125;/lib/libssl.so.1.1 %&#123;buildroot&#125;%&#123;_libdir&#125;</span><br><span class="line">ln -sf %&#123;openssldir&#125;/lib/libcrypto.so.1.1 %&#123;buildroot&#125;%&#123;_libdir&#125;</span><br><span class="line">ln -sf %&#123;openssldir&#125;/bin/openssl %&#123;buildroot&#125;%&#123;_bindir&#125;</span><br><span class="line"></span><br><span class="line">%clean</span><br><span class="line">[ <span class="string">&quot;%&#123;buildroot&#125;&quot;</span> != <span class="string">&quot;/&quot;</span> ] &amp;&amp; %&#123;__rm&#125; -rf %&#123;buildroot&#125;</span><br><span class="line"></span><br><span class="line">%files</span><br><span class="line">%&#123;openssldir&#125;</span><br><span class="line">%defattr(-,root,root)</span><br><span class="line">%&#123;_bindir&#125;/openssl</span><br><span class="line">%&#123;_libdir&#125;/libcrypto.so.1.1</span><br><span class="line">%&#123;_libdir&#125;/libssl.so.1.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%post -p /sbin/ldconfig</span><br><span class="line"></span><br><span class="line">%postun -p /sbin/ldconfig</span><br><span class="line"></span><br><span class="line">%changelog</span><br><span class="line">* Sat May 08 2021 Hebin Wan &lt;wanhebin@outlook.com&gt; - 1.1.1k</span><br><span class="line">- Rebuilt <span class="keyword">for</span> https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1k.tar.gz </span><br></pre></td></tr></table></figure><h4 id="2-4-使用-rpmlint-测试"><a href="#2-4-使用-rpmlint-测试" class="headerlink" title="2.4 使用 rpmlint 测试"></a>2.4 使用 rpmlint 测试</h4><p>为避免常见错误，请先使用 <code>rpmlint</code> 查找 SPEC 文件的错误：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpmlint ~/rpmbuild/SPECS/openssl.spec</span><br><span class="line">0 packages and 1 specfiles checked; 0 errors, 0 warnings.</span><br></pre></td></tr></table></figure><p>如果返回错误/警告，使用 “<code>-i</code>“ 选项查看更详细的信息。</p><h4 id="2-5-从-SPEC-构建-RPM-包"><a href="#2-5-从-SPEC-构建-RPM-包" class="headerlink" title="2.5 从 SPEC 构建 RPM 包"></a>2.5 从 SPEC 构建 RPM 包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpmbuild -D <span class="string">&quot;version 1.1.1k&quot;</span> -ba ~/rpmbuild/SPECS/openssl.spec</span><br></pre></td></tr></table></figure><blockquote><p>-ba    构建源代码rpm包和二进制rpm包</p><p>-bb    只构建二进制rpm包</p><p>-bs    只构建源代码rpm包</p><p>-bp    执行至％prep阶段（解压源并应用补丁）</p><p>-bc    执行至％build阶段（％prep，然后编译）</p><p>-bi    执行至％install阶段（％prep，％build，然后安装）</p><p>-bl    验证％files部分，查看文件是否存在</p></blockquote><ul><li>构建完成后，有类似下面的返回内容时，说明 RPM 包构建成功了</li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/08/fa86f7ff0af42.png" alt="rpmbuild_openssl-1.png"></p><ul><li>查看构建成功的 RPM 包</li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/08/bab7e202e600d.png" alt="rpmbuild_openssl-2.png"></p><p>在RPMS文件夹下生成了 <code>RPM</code> 包，在 <code>x86_64</code> 下，表示所应用的架构，由于没有指定arch为 <code>noarch</code> ，所以默认用本机架构。在SRPMS文件夹下生成了源码 <code>RPM</code> 包。</p><h4 id="2-6-使用-rpmlint-测试已构建的-RPM-包"><a href="#2-6-使用-rpmlint-测试已构建的-RPM-包" class="headerlink" title="2.6 使用 rpmlint 测试已构建的 RPM 包"></a>2.6 使用 rpmlint 测试已构建的 RPM 包</h4><p><code>rpmlint</code> 用于检查 SPEC/RPM/SRPM 是否存在错误。你需要在发布软件包之前，解决这些警告。<a href="https://fedoraproject.org/wiki/Common_Rpmlint_issues">此页面</a> 提供一些常见问题的解释。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpmlint ~/rpmbuild/SPECS/openssl.spec ~/rpmbuild/RPMS/x86_64/openssl-1.1.1k-1.el7.x86_64.rpm ~/rpmbuild/SRPMS/openssl-1.1.1k-1.el7.src.rpm</span><br></pre></td></tr></table></figure><p>一般情况下，检测到的都是一些WARN信息，不影响软件使用，可以忽略。如果有ERROR信息，或许也不影响使用，但建议按照提示进行调整、修复。</p><h2 id="三、安装升级-OpenSSL"><a href="#三、安装升级-OpenSSL" class="headerlink" title="三、安装升级 OpenSSL"></a>三、安装升级 OpenSSL</h2><p>一般情况下，系统都已经有openssl了，所以我们直接升级即可。</p><blockquote><p><strong>注意：</strong></p><p>切记！在做openssl升级时，请先从测试机中操作，升级后，确定没有任何问题时，在根据线上环境陆续升级。</p></blockquote><h4 id="3-1-检查系统当前OpenSSL版本"><a href="#3-1-检查系统当前OpenSSL版本" class="headerlink" title="3.1 检查系统当前OpenSSL版本"></a>3.1 检查系统当前OpenSSL版本</h4><p>查看当前系统中openssl的版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><p>卸载openssl</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -e openssl --nodeps</span><br></pre></td></tr></table></figure><h4 id="3-2-升级OpenSSL版本"><a href="#3-2-升级OpenSSL版本" class="headerlink" title="3.2 升级OpenSSL版本"></a>3.2 升级OpenSSL版本</h4><p>安装我们刚刚打包好的openssl 1.1.1k版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -ivh ~/rpmbuild/RPMS/x86_64/openssl-1.1.1k-2.el7.x86_64.rpm --nodeps</span><br><span class="line">Preparing...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line">   1:openssl-1.1.1k-2.el7             <span class="comment">################################# [100%]</span></span><br></pre></td></tr></table></figure><p>再次查看系统中openssl版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.1.1k  25 Mar 2021</span><br></pre></td></tr></table></figure><p>很幸运，成功升级！</p><p>但是否对系统环境、其他软件功能有影响，这个就需要我们进一步测试，笔者这里就省略了。</p><p><strong>参考文献</strong></p><ul><li><a href="https://fedoraproject.org/wiki/How_to_create_an_RPM_package/zh-cn">How to create an RPM package</a></li><li><a href="https://fedoraproject.org/wiki/How_to_create_a_GNU_Hello_RPM_package/zh-cn">How to create a GNU Hello RPM package</a></li><li><a href="https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/Packagers_Guide/chap-Packagers_Guide-Spec_File_Reference-Preamble.html">Spec File Preamble</a></li><li><a href="https://fedoraproject.org/wiki/Common_Rpmlint_issues">Common Rpmlint issues</a></li><li><a href="https://blog.csdn.net/get_set/article/details/53453320">RPM打包原理、示例、详解及备查</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> OpenSSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenSSL </tag>
            
            <tag> RPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB副本集把SECONDARY提升为PRIMARY</title>
      <link href="posts/mongodb-replica-set-promotes-secondary-to-primary/"/>
      <url>posts/mongodb-replica-set-promotes-secondary-to-primary/</url>
      
        <content type="html"><![CDATA[<h2 id="事故背景"><a href="#事故背景" class="headerlink" title="事故背景"></a>事故背景</h2><p>​        线上环境有一个MongoDB副本集，由于是部署在客户那边本地机房，客户误操作把部署副本集的另外2个节点的 VM 给删除了（并且VM已经无法恢复了）。所幸的是还有一个节点存活，登录节点后发现这个节点是 SECONDARY，所以可能会有一部分数据丢失，而且此时已经无法对应用提供读写服务。此时只能停服维护，并对集群进行恢复。</p><p>​        基于以上问题，下面对副本集恢复操作步鄹进行了记录。</p><h2 id="处理思路"><a href="#处理思路" class="headerlink" title="处理思路"></a>处理思路</h2><ol><li>对mongodb数据进行备份（防止恢复集群时出现意外导致数据丢失）。</li><li>把仅存的 SECONDARY 节点提升为 PRIMARY，删除集群中另外2个不存活的节点，然后重新配置MongoDB副本集。</li><li>新部署2个MongoDB节点，并加入到集群中。</li><li>等待 PRIMARY 节点数据同步到另外2个新节点后，进行数据验证，结束生产环境维护。</li></ol><blockquote><p><strong>注意：</strong></p><p>由于原先的集群中只存有 SECONDARY 节点，PRIMARY 节点已经丢失，所以存在部署数据没同步到 SECONDARY 的可能。但由于PRIMARY节点的VM已经被删，这部分未同步的数据的丢失在所难免，想恢复这部分数据只能根据自己的业务、代码逻辑设定才有补上丢失的数据的可能性。</p></blockquote><h2 id="集群恢复"><a href="#集群恢复" class="headerlink" title="集群恢复"></a>集群恢复</h2><h3 id="1、在SECONDARY节点删除挂掉的primary节点"><a href="#1、在SECONDARY节点删除挂掉的primary节点" class="headerlink" title="1、在SECONDARY节点删除挂掉的primary节点"></a>1、在SECONDARY节点删除挂掉的primary节点</h3><h4 id="1-1-查看当前副本集配置"><a href="#1-1-查看当前副本集配置" class="headerlink" title="1.1 查看当前副本集配置"></a>1.1 查看当前副本集配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:SECONDARY&gt; rs.conf()</span><br></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:SECONDARY&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">rs1:SECONDARY&gt; rs_conf = rs.<span class="function"><span class="title">config</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : <span class="string">&quot;rs1&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span> : 7,</span><br><span class="line"><span class="string">&quot;protocolVersion&quot;</span> : NumberLong(1),</span><br><span class="line"><span class="string">&quot;members&quot;</span> : [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 0,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.213:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 2,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.214:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;settings&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;chainingAllowed&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;heartbeatIntervalMillis&quot;</span> : 2000,</span><br><span class="line"><span class="string">&quot;heartbeatTimeoutSecs&quot;</span> : 10,</span><br><span class="line"><span class="string">&quot;electionTimeoutMillis&quot;</span> : 10000,</span><br><span class="line"><span class="string">&quot;catchUpTimeoutMillis&quot;</span> : -1,</span><br><span class="line"><span class="string">&quot;catchUpTakeoverDelayMillis&quot;</span> : 30000,</span><br><span class="line"><span class="string">&quot;getLastErrorModes&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;getLastErrorDefaults&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;w&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;wtimeout&quot;</span> : 0</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;replicaSetId&quot;</span> : ObjectId(<span class="string">&quot;5f5094994a4d5004eae73e2f&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-删除集群成员"><a href="#1-2-删除集群成员" class="headerlink" title="1.2 删除集群成员"></a>1.2 删除集群成员</h4><ul><li><strong>比如要删除members中 host 为 <code>192.168.30.213:27017</code> 的成员，通过<code>rs.conf()</code>找到成员的 <code>_id</code></strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.213:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><strong>删除 <code>_id</code> 为1的成员</strong></li></ul><blockquote><p>splice的第一个参数表示要删除的数组元素的下标</p><p>0 表示集群中成员节点的 <code>&quot;_id&quot;</code> </p><p>1 表示删除的个数</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:SECONDARY&gt; rs_conf = rs.conf()</span><br><span class="line">rs1:SECONDARY&gt; rs_conf.members.splice(0,1)</span><br></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:SECONDARY&gt; rs_conf.members.splice(1,1)</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.213:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>依照此方法删除副本集中不存活的节点。</p><blockquote><p><strong>注意：</strong></p><p>有一点需要注意，由于已经删除了 <code>_id</code> 为1的成员，所以后面的成员的 <code>_id</code> 号都会减小1，与数组中元素的下标相同。</p></blockquote><h3 id="2、重新配置MongoDB副本集"><a href="#2、重新配置MongoDB副本集" class="headerlink" title="2、重新配置MongoDB副本集"></a>2、重新配置MongoDB副本集</h3><h4 id="2-1-重置集群配置"><a href="#2-1-重置集群配置" class="headerlink" title="2.1 重置集群配置"></a>2.1 重置集群配置</h4><p><code>rs_conf</code> 就是上面修改后的配置，加force参数是因为 SECONDARY 默认没有执行此命令的权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:SECONDARY&gt; rs.reconfig(rs_conf, &#123;<span class="string">&quot;force&quot;</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><p>返回内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:SECONDARY&gt; rs.reconfig(rs_conf, &#123;<span class="string">&quot;force&quot;</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619586716, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619588924, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rs1:PRIMARY&gt; </span><br></pre></td></tr></table></figure><h4 id="2-2-查看集群状态"><a href="#2-2-查看集群状态" class="headerlink" title="2.2 查看集群状态"></a>2.2 查看集群状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.status()</span><br></pre></td></tr></table></figure><p>返回内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;set&quot;</span> : <span class="string">&quot;rs1&quot;</span>,</span><br><span class="line"><span class="string">&quot;date&quot;</span> : ISODate(<span class="string">&quot;2021-04-28T05:51:03.672Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;myState&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;term&quot;</span> : NumberLong(17),</span><br><span class="line"><span class="string">&quot;syncingTo&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;syncSourceHost&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;syncSourceId&quot;</span> : -1,</span><br><span class="line"><span class="string">&quot;heartbeatIntervalMillis&quot;</span> : NumberLong(2000),</span><br><span class="line"><span class="string">&quot;optimes&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;lastCommittedOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(17)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;readConcernMajorityOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(17)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;appliedOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(17)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;durableOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(17)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;members&quot;</span> : [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 0,</span><br><span class="line"><span class="string">&quot;name&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;health&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;state&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line"><span class="string">&quot;uptime&quot;</span> : 7482,</span><br><span class="line"><span class="string">&quot;optime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(17)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDate&quot;</span> : ISODate(<span class="string">&quot;2021-04-28T05:50:55Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;syncingTo&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;syncSourceHost&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;syncSourceId&quot;</span> : -1,</span><br><span class="line"><span class="string">&quot;infoMessage&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;electionTime&quot;</span> : Timestamp(1619588924, 1),</span><br><span class="line"><span class="string">&quot;electionDate&quot;</span> : ISODate(<span class="string">&quot;2021-04-28T05:48:44Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;configVersion&quot;</span> : 124340,</span><br><span class="line"><span class="string">&quot;self&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;lastHeartbeatMessage&quot;</span> : <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时发现，这个 SECONDARY 节点已经提升为 PRIMARY，并且集群状态中，也就只有我们当前一个节点。</p><p>接下来就可以向副本集中添加新的MongoDB节点了。</p><h3 id="3、添加新的MongoDB节点"><a href="#3、添加新的MongoDB节点" class="headerlink" title="3、添加新的MongoDB节点"></a>3、添加新的MongoDB节点</h3><p>这里省略新节点的部署过程，具体可以参考[《MongoDB 单节点升级为副本集高可用集群》](<a href="https://www.wanhebin.com/database/mongodb/1005.html">MongoDB 单节点升级为副本集高可用集群 - HEBIN博客 (wanhebin.com)</a>)文章中MongoDB节点部署的步鄹。</p><blockquote><p><strong>注意：</strong></p><p>向mongodb副本集添加实例后，PRIMARY节点数据能够自动同步到新添加的SECONDARY节点，无需人工干预。</p></blockquote><h4 id="3-1-增加实例"><a href="#3-1-增加实例" class="headerlink" title="3.1 增加实例"></a>3.1 增加实例</h4><p>登录PRIMARY节点，添加MongoDB实例。</p><p>新添加的实例优先级权重默认为1，如需调整，建议等数据同步完成后进行权重更改。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; use admin</span><br><span class="line">rs1:PRIMARY&gt; rs.add(<span class="string">&#x27;192.168.30.213:27017&#x27;</span>)</span><br><span class="line">rs1:PRIMARY&gt; rs.add(<span class="string">&#x27;192.168.30.214:27017&#x27;</span>)</span><br></pre></td></tr></table></figure><p>添加节点的返回结果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.add(<span class="string">&#x27;192.168.30.213:27017&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619581966, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619581966, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rs1:PRIMARY&gt; rs.add(<span class="string">&#x27;192.168.30.214:27017&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619581975, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619581975, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-删除实例"><a href="#3-2-删除实例" class="headerlink" title="3.2 删除实例"></a>3.2 删除实例</h4><p>如果添加错节点时，可以通过 <code>rs.remove()</code> 来删除错误的节点（因为此时当前实例已经是 PRIMARY 了，所以不需要用 1.2 中方法剔除节点）。</p><p>从mongodb副本集中移除实例，不可移除primary</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; use admin</span><br><span class="line">rs1:PRIMARY&gt; rs.remove(<span class="string">&#x27;192.168.30.214:27017&#x27;</span>)</span><br></pre></td></tr></table></figure><p>返回内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.remove(<span class="string">&#x27;192.168.30.213:27017&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619581713, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619581713, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rs1:PRIMARY&gt; rs.remove(<span class="string">&#x27;192.168.30.214:27017&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619581777, 2),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619581777, 2),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>副本集经过添加删除后顺序会乱，可以根据需要设置权重来调整。</p></blockquote><h3 id="4、调整节点权重"><a href="#4、调整节点权重" class="headerlink" title="4、调整节点权重"></a>4、调整节点权重</h3><p>如果想在集群宕机恢复后，还想让某一节点始终保持为 PRIMARY，可以把此节点的权重设置成最大。</p><h4 id="4-1-设置权重"><a href="#4-1-设置权重" class="headerlink" title="4.1 设置权重"></a>4.1 设置权重</h4><p>找到对应节点在副本集中成员<code>_id</code>，进行权重设置。</p><p>这里以成员0为例，其host为<code>192.168.30.207:27017</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs_conf = rs.config()</span><br><span class="line">rs1:PRIMARY&gt; rs_conf.members[0].priority=10</span><br></pre></td></tr></table></figure><h4 id="4-2-生效配置"><a href="#4-2-生效配置" class="headerlink" title="4.2 生效配置"></a>4.2 生效配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.reconfig(rs_conf)</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.reconfig(rs_conf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619591404, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619591404, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-验证权重配置"><a href="#4-3-验证权重配置" class="headerlink" title="4.3 验证权重配置"></a>4.3 验证权重配置</h4><ul><li><strong>查询成员0的权重</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.config()</span><br></pre></td></tr></table></figure><p>返回内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 0,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 10,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>模拟宕机恢复后的集群状态</strong></li></ul><p>关闭三个节点的mongodb服务，再无序恢复，然后连接进节点<code>192.168.30.207:27017</code>，成员0依然还是PRIMARY。（为了必然偶然性，可以进行多次测试）</p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL · 物理备份 · XtraBackup 备份原理</title>
      <link href="posts/mysql-physicalbackup-xtrabackup-principle/"/>
      <url>posts/mysql-physicalbackup-xtrabackup-principle/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.percona.com/software/mysql-database/percona-xtrabackup">Percona XtraBackup</a>（简称PXB）是 Percona 公司开发的一个用于 MySQL 数据库<strong>物理热备</strong>的备份工具，支持 MySQl（Oracle）、Percona Server 和 MariaDB，并且全部开源，真可谓是业界良心。我们 RDS MySQL 的物理备份就是基于这个工具做的。</p><p>项目的 blueprint 和 bug 讨论放在 <a href="https://launchpad.net/percona-xtrabackup">Launchpad</a>，代码之前也放在 Launchpad，现在已经迁移到 <a href="https://github.com/percona/percona-xtrabackup">Github</a> 啦，项目更新发布非常快，感兴趣的可以关注 :-)</p><p>本文会介绍下备份工具的工作原理，希望对大家有所帮助。</p><p>&nbsp;</p><h2 id="工具集"><a href="#工具集" class="headerlink" title="工具集"></a>工具集</h2><p>软件包安装完后一共有4个可执行文件，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usr</span><br><span class="line">├── bin</span><br><span class="line">│   ├── innobackupex</span><br><span class="line">│   ├── xbcrypt</span><br><span class="line">│   ├── xbstream</span><br><span class="line">│   └── xtrabackup</span><br></pre></td></tr></table></figure><p>其中最主要的是 <code>innobackupex</code> 和 <code>xtrabackup</code>，前者是一个 perl 脚本，后者是 C/C++ 编译的二进制。</p><p><code>xtrabackup</code> 是用来备份 InnoDB 表的，不能备份非 InnoDB 表，和 mysqld server 没有交互；<code>innobackupex</code> 脚本用来备份非 InnoDB 表，同时会调用 <code>xtrabackup</code> 命令来备份 InnoDB 表，还会和 mysqld server 发送命令进行交互，如加读锁（FTWRL）、获取位点（SHOW SLAVE STATUS）等。简单来说，<code>innobackupex</code> 在 <code>xtrabackup</code> 之上做了一层封装。</p><p>一般情况下，我们是希望能备份 MyISAM 表的，虽然我们可能自己不用 MyISAM 表，但是 mysql 库下的系统表是 MyISAM 的，因此备份基本都通过 <code>innobackupex</code> 命令进行；另外一个原因是我们可能需要保存位点信息。</p><p>另外2个工具相对小众些，<code>xbcrypt</code> 是加解密用的；<code>xbstream</code> 类似于tar，是 Percona 自己实现的一种支持并发写的流文件格式。两都在备份和解压时都会用到（如果备份用了加密和并发）。</p><p>本文的介绍的主角是 <code>innobackupex</code> 和 <code>xtrabackup</code>。</p><p>&nbsp;</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h3><p>2个工具之间的交互和协调是通过控制文件的创建和删除来实现的，主要文件有：</p><ul><li>xtrabackup_suspended_1</li><li>xtrabackup_suspended_2</li><li>xtrabackup_log_copied</li></ul><p>举个栗子，我们来看备份时 xtrabackup_suspended_2 是怎么来协调2个工具进程的</p><ol><li><code>innobackupex</code> 在启动 <code>xtrabackup</code> 进程后，会一直等 <code>xtrabackup</code> 备份完 InnoDB 文件，方式就是等待 xtrabackup_suspended_2 这个文件被创建出来；</li><li><code>xtrabackup</code> 在备完 InnoDB 数据后，就在指定目录下创建出这个文件，然后等这个文件被 <code>innobackupex</code> 删除；</li><li><code>innobackupex</code> 检测到文件 xtrabackup_suspended_2 被创建出来后，就继续往下走；</li><li><code>innobackupex</code> 在备份完非 InnoDB 表后，删除 xtrabackup_suspended_2 这个文件，这样就通知 <code>xtrabackup</code> 可以继续了，然后等 xtrabackup_log_copied 被创建；</li><li><code>xtrabackup</code> 检测到 xtrabackup_suspended_2 文件删除后，就可以继续往下了。</li></ol><p>是不是感觉有点不可思议，通过文件是否存在来控制进程，这种方式非常的不靠谱，因为非常容易被外部干扰，比如文件被别人误删掉，或者2个正在跑的备份控制文件误放在同一个目录下，就等着备份乱掉吧，但是 Percona 就是这么干的。</p><p>之所以这么搞，估计主要是因为 perl 和 C 二进制2个进程，没有既好用又方便的通信方式，搞个协议啥的太麻烦了。但是官方也觉得这种方式不靠谱，11年就搞了个 <a href="https://blueprints.launchpad.net/percona-xtrabackup/+spec/rewrite-innobackupex-in-c">blueprint</a> 要用C重写 <code>innobackupex</code>，终于在<a href="https://www.percona.com/blog/2015/05/20/percona-xtrabackup-2-3-1-beta1-is-now-available/">2.3 版本</a>实现了，<code>innobackupex</code> 功能全部集成到 <code>xtrabackup</code> 里面，只有一个 binary，另外为了使用上的兼容考虑，<code>innobackupex</code> 作为 <code>xtrabackup</code> 的一个软链。对于二次开发来说，2.3 摆脱了之前2个进程协作的负担，架构上明显要好于之前版本。考虑到 perl + C 这种架构的长期存在，大多数读者朋友也基本用的2.3之前版本，本文的介绍也是基于老的架构（2.2版本），但是原理和2.3是一样的，只是实现上的差别。</p><h3 id="备份过程"><a href="#备份过程" class="headerlink" title="备份过程"></a>备份过程</h3><p>整个备份过程如下图：</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/25/a54926c4e8e58.png" alt="PXB备份过程"></p><p>PXB 备份过程</p><ol><li><code>innobackupex</code> 在启动后，会先 fork 一个进程，启动 <code>xtrabackup</code>进程，然后就等待 <code>xtrabackup</code> 备份完 ibd 数据文件；</li><li><code>xtrabackup</code> 在备份 InnoDB 相关数据时，是有2种线程的，1种是 redo 拷贝线程，负责拷贝 redo 文件，1种是 ibd 拷贝线程，负责拷贝 ibd 文件；redo 拷贝线程只有一个，在 ibd 拷贝线程之前启动，在 ibd 线程结束后结束。<code>xtrabackup</code> 进程开始执行后，先启动 redo 拷贝线程，从最新的 checkpoint 点开始顺序拷贝 redo 日志；然后再启动 ibd 数据拷贝线程，在 <code>xtrabackup</code> 拷贝 ibd 过程中，<code>innobackupex</code> 进程一直处于等待状态（等待文件被创建）。</li><li><code>xtrabackup</code> 拷贝完成idb后，通知 <code>innobackupex</code>（通过创建文件），同时自己进入等待（redo 线程仍然继续拷贝）;</li><li><code>innobackupex</code> 收到 <code>xtrabackup</code> 通知后，执行<code>FLUSH TABLES WITH READ LOCK</code> (FTWRL)，取得一致性位点，然后开始备份非 InnoDB 文件（包括 frm、MYD、MYI、CSV、opt、par等）。拷贝非 InnoDB 文件过程中，因为数据库处于全局只读状态，如果在业务的主库备份的话，要特别小心，非 InnoDB 表（主要是MyISAM）比较多的话整库只读时间就会比较长，这个影响一定要评估到。</li><li>当 <code>innobackupex</code> 拷贝完所有非 InnoDB 表文件后，通知 <code>xtrabackup</code>（通过删文件） ，同时自己进入等待（等待另一个文件被创建）；</li><li><code>xtrabackup</code> 收到 <code>innobackupex</code> 备份完非 InnoDB 通知后，就停止 redo 拷贝线程，然后通知 <code>innobackupex</code> redo log 拷贝完成（通过创建文件）；</li><li><code>innobackupex</code> 收到 redo 备份完成通知后，就开始解锁，执行 <code>UNLOCK TABLES</code>；</li><li>最后 <code>innobackupex</code> 和 <code>xtrabackup</code> 进程各自完成收尾工作，如资源的释放、写备份元数据信息等，<code>innobackupex</code> 等待 <code>xtrabackup</code> 子进程结束后退出。</li></ol><p>在上面描述的文件拷贝，都是备份进程直接通过操作系统读取数据文件的，只在执行 SQL 命令时和数据库有交互，基本不影响数据库的运行，在备份非 InnoDB 时会有一段时间只读（如果没有MyISAM表的话，只读时间在几秒左右），在备份 InnoDB 数据文件时，对数据库完全没有影响，是真正的热备。</p><p>InnoDB 和非 InnoDB 文件的备份都是通过拷贝文件来做的，但是实现的方式不同，前者是以page为粒度做的(<code>xtrabackup</code>)，后者是 cp 或者 tar 命令(<code>innobackupex</code>)，<code>xtrabackup</code> 在读取每个page时会校验 checksum 值，保证数据块是一致的，而 <code>innobackupex</code> 在 cp MyISAM 文件时已经做了flush（FTWRL），磁盘上的文件也是完整的，所以最终备份集里的数据文件都是写入完整的。</p><h4 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h4><p>PXB 是支持增量备份的，但是只能对 InnoDB 做增量，InnoDB 每个 page 有个 LSN 号，LSN 是全局递增的，page 被更改时会记录当前的 LSN 号，page中的 LSN 越大，说明当前page越新（最近被更新）。每次备份会记录当前备份到的LSN（xtrabackup_checkpoints 文件中），增量备份就是只拷贝LSN大于上次备份的page，比上次备份小的跳过，每个 ibd 文件最终备份出来的是增量 delta 文件。</p><p>MyISAM 是没有增量的机制的，每次增量备份都是全部拷贝的。</p><p>增量备份过程和全量备份一样，只是在 ibd 文件拷贝上有不同。</p><h3 id="恢复过程"><a href="#恢复过程" class="headerlink" title="恢复过程"></a>恢复过程</h3><p>如果看恢复备份集的日志，会发现和 mysqld 启动时非常相似，其实备份集的恢复就是类似 mysqld crash后，做一次 crash recover。</p><p>恢复的目的是把备份集中的数据恢复到一个一致性位点，所谓一致就是指原数据库某一时间点各引擎数据的状态，比如 MyISAM 中的数据对应的是 15:00 时间点的，InnoDB 中的数据对应的是 15:20 的，这种状态的数据就是不一致的。PXB 备份集对应的一致点，就是备份时FTWRL的时间点，恢复出来的数据，就对应原数据库FTWRL时的状态。</p><p>因为备份时 FTWRL 后，数据库是处于只读的，非 InnoDB 数据是在持有全局读锁情况下拷贝的，所以非 InnoDB 数据本身就对应 FTWRL 时间点；InnoDB 的 ibd 文件拷贝是在 FTWRL 前做的，拷贝出来的不同 ibd 文件最后更新时间点是不一样的，这种状态的 ibd 文件是不能直接用的，但是 redo log 是从备份开始一直持续拷贝的，最后的 redo 日志点是在持有 FTWRL 后取得的，所以最终通过 redo 应用后的 ibd 数据时间点也是和 FTWRL 一致的。</p><p>所以恢复过程只涉及 InnoDB 文件的恢复，非 InnoDB 数据是不动的。备份恢复完成后，就可以把数据文件拷贝到对应的目录，然后通过mysqld来启动了。</p><p><strong>参考资料：</strong></p><ul><li><a href="http://mysql.taobao.org/monthly/2016/03/07/">MySQL · 物理备份 · Percona XtraBackup 备份原理 (taobao.org)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> XtraBackup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 安装 pdo_sqlsrv 扩展(CentOS7)</title>
      <link href="posts/php-install-pdo_sqlsrv-extension/"/>
      <url>posts/php-install-pdo_sqlsrv-extension/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装相关依赖"><a href="#一、安装相关依赖" class="headerlink" title="一、安装相关依赖"></a>一、安装相关依赖</h3><h4 id="1-1-安装微软源"><a href="#1-1-安装微软源" class="headerlink" title="1.1 安装微软源"></a>1.1 安装微软源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s -o /tmp/prod.repo https://packages.microsoft.com/config/rhel/7/prod.repo</span><br></pre></td></tr></table></figure><h4 id="1-2-防止冲突先卸载原有版本-可选"><a href="#1-2-防止冲突先卸载原有版本-可选" class="headerlink" title="1.2 防止冲突先卸载原有版本(可选)"></a>1.2 防止冲突先卸载原有版本(可选)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove -y unixODBC </span><br></pre></td></tr></table></figure><h4 id="1-3-安装驱动（三个都要装上，缺一不可）"><a href="#1-3-安装驱动（三个都要装上，缺一不可）" class="headerlink" title="1.3 安装驱动（三个都要装上，缺一不可）"></a>1.3 安装驱动（三个都要装上，缺一不可）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y msodbcsql mssql-tools unixODBC-devel</span><br></pre></td></tr></table></figure><h3 id="二、编译pdo-sqlsrv插件"><a href="#二、编译pdo-sqlsrv插件" class="headerlink" title="二、编译pdo_sqlsrv插件"></a>二、编译pdo_sqlsrv插件</h3><h4 id="2-1-下载pdo-sqlsrv扩展包"><a href="#2-1-下载pdo-sqlsrv扩展包" class="headerlink" title="2.1 下载pdo_sqlsrv扩展包"></a>2.1 下载pdo_sqlsrv扩展包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://pecl.php.net/get/pdo_sqlsrv-5.9.0.tgz</span><br></pre></td></tr></table></figure><h4 id="2-2-解压编译"><a href="#2-2-解压编译" class="headerlink" title="2.2 解压编译"></a>2.2 解压编译</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar xf pdo_sqlsrv-5.9.0.tgz</span><br><span class="line">$ <span class="built_in">cd</span> pdo_sqlsrv-5.9.0</span><br></pre></td></tr></table></figure><h4 id="2-3-预编译"><a href="#2-3-预编译" class="headerlink" title="2.3 预编译"></a>2.3 预编译</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/bin/php-config</span><br></pre></td></tr></table></figure><h4 id="2-4-编译安装"><a href="#2-4-编译安装" class="headerlink" title="2.4 编译安装"></a>2.4 编译安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="三、添加pdo-sqlsrv扩展"><a href="#三、添加pdo-sqlsrv扩展" class="headerlink" title="三、添加pdo_sqlsrv扩展"></a>三、添加pdo_sqlsrv扩展</h3><p>本文是使用yum安装的php、php-fpm，相关配置文件路径可能与各路大神们的环境不太相同（根据自己环境找到相关配置文件）。</p><ul><li>在 <code>/etc/php.ini</code> 配置文件中添加 <code>pdo_sqlsrv.so</code> 扩展。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extension=pdo.so</span><br><span class="line">extension=pdo_sqlsrv.so</span><br></pre></td></tr></table></figure><blockquote><p><code>pdo_sqlsrv.so</code> 是sqlserver扩展，需要在 <code>pdo.so</code> 扩展之前加载，否则会出现如下报错</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PHP Warning:  PHP Startup: Unable to load dynamic library <span class="string">&#x27;/usr/lib64/php/modules/pdo_sqlsrv.so&#x27;</span> - /usr/lib64/php/modules/pdo_sqlsrv.so: undefined symbol: php_pdo_register_driver <span class="keyword">in</span> Unknown on line 0</span><br></pre></td></tr></table></figure></blockquote><ul><li>重启php-fpm服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart php-fpm</span><br></pre></td></tr></table></figure><h3 id="四、验证扩展是否正确安装"><a href="#四、验证扩展是否正确安装" class="headerlink" title="四、验证扩展是否正确安装"></a>四、验证扩展是否正确安装</h3><ul><li><strong>验证扩展是否成功安装</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ php -m | grep pdo_sqlsrv</span><br></pre></td></tr></table></figure><p><img src="http://pic-cdn.wanhebin.com/2021/03/22/1399720dd2d6f.png" alt="php-pdo_sqlsrv-1.png"></p><p>这里可以看到 <code>pdo_sqlsrv</code>扩展已经添加到php中了。</p><p>但是又出现了<code>PHP Warning:  Module &#39;PDO&#39; already loaded in Unknown on line 0</code>的Warning信息。</p><p>经过排查，发现在 <code>/etc/php.d/pdo.ini</code> 配置文件中也引用了 <code>pdo.so</code> 扩展：</p><p><img src="http://pic-cdn.wanhebin.com/2021/03/22/f244dcafb7de3.png" alt="php-pdo_sqlsrv-2.png"></p><p>把 <code>/etc/php.d/pdo.ini</code> 中引用的 <code>pdo.so</code> 扩展注释，只保留 <code>/etc/php.ini</code> 中的此扩展即可。</p><p>注释后重启php-fpm，重新查看php扩展，此时Warning信息就没出现了。</p><p><img src="http://pic-cdn.wanhebin.com/2021/03/22/188c17265c17c.png" alt="php-pdo_sqlsrv-3.png"></p><ul><li><strong>在Web端查看PHP信息</strong></li></ul><p><img src="http://pic-cdn.wanhebin.com/2021/03/22/99aa5a234d62d.png" alt="php-pdo_sqlsrv-4.png"></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB单节点升级为副本集高可用集群</title>
      <link href="posts/MongoDB-single-node-upgraded-to-replica-set-cluster/"/>
      <url>posts/MongoDB-single-node-upgraded-to-replica-set-cluster/</url>
      
        <content type="html"><![CDATA[<h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><p>由于历史原因，我们有一个作数据同步的业务，生产环境中MongoDB使用的是单节点。但随着业务增长，考虑到这个同步业务的重要性，避免由于单节点故障造成业务停止，所以需要升级为副本集保证高可用。</p><h3 id="副本集架构"><a href="#副本集架构" class="headerlink" title="副本集架构"></a>副本集架构</h3><p>下面这架构图是这篇文章需要实现的MongoDB副本集高可用架构：</p><p><img src="http://pic-cdn.wanhebin.com/2021/01/20/7828ee3df93d9.png#pic_center" alt="MongoDB_ReplicaSetArchitecture-2.png"></p><h3 id="升级架构前注意事项"><a href="#升级架构前注意事项" class="headerlink" title="升级架构前注意事项"></a>升级架构前注意事项</h3><p>在生产环境中，做单节点升级到集群前，一定要先备份好mongodb的所有数据，避免操作失误导致数据丢失。</p><p>并且在保证在升级期间不会有程序连接到MongoDB进行读写操作，建议停服务升级，且在凌晨业务低峰期，进行操作。</p><h3 id="一、原单节点MongoDB配置信息"><a href="#一、原单节点MongoDB配置信息" class="headerlink" title="一、原单节点MongoDB配置信息"></a>一、原单节点MongoDB配置信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IP: 192.168.30.207</span><br><span class="line">Port: 27017</span><br></pre></td></tr></table></figure><h4 id="1-1-原配置文件"><a href="#1-1-原配置文件" class="headerlink" title="1.1 原配置文件"></a>1.1 原配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file   </span><br><span class="line">  logAppend: <span class="literal">true</span>  </span><br><span class="line">  path: /home/server/mongodb/logs/mongodb.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  dbPath: /home/server/mongodb/data</span><br><span class="line">  directoryPerDB: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">     engineConfig:</span><br><span class="line">        cacheSizeGB: 1</span><br><span class="line">        directoryForIndexes: <span class="literal">true</span></span><br><span class="line">     collectionConfig:</span><br><span class="line">        blockCompressor: zlib</span><br><span class="line">     indexConfig:</span><br><span class="line">        prefixCompression: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /home/server/mongodb/pid/mongod.pid</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1,192.168.30.207</span><br><span class="line">  maxIncomingConnections: 5000</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure><h4 id="1-2-在原来配置文件增加副本集配置"><a href="#1-2-在原来配置文件增加副本集配置" class="headerlink" title="1.2 在原来配置文件增加副本集配置"></a>1.2 在原来配置文件增加副本集配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">replication:</span><br><span class="line">  oplogSizeMB: 4096</span><br><span class="line">  replSetName: rs1</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里需要先把 <strong>认证</strong> 配置注释，副本集配置完成后再开启。</p></blockquote><h3 id="二、新增节点信息"><a href="#二、新增节点信息" class="headerlink" title="二、新增节点信息"></a>二、新增节点信息</h3><table><thead><tr><th>角色</th><th>IP</th><th>Port</th><th></th></tr></thead><tbody><tr><td>PRIMARY</td><td>192.168.30.207</td><td>27017</td><td>原单节点MongoDB</td></tr><tr><td>SECONDARY</td><td>192.168.30.213</td><td>27017</td><td>新增节点1</td></tr><tr><td>SECONDARY</td><td>192.168.30.214</td><td>27017</td><td>新增节点2</td></tr></tbody></table><h4 id="2-1-新增节点配置文件"><a href="#2-1-新增节点配置文件" class="headerlink" title="2.1 新增节点配置文件"></a>2.1 新增节点配置文件</h4><p>这两个SECONDARY节点配置文件，只需复制PRIMARY节点配置文件，并修改相应的 “<strong>bindIp</strong>“即可。</p><ul><li>SECONDARY 节点1配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file   </span><br><span class="line">  logAppend: <span class="literal">true</span>  </span><br><span class="line">  path: /home/server/mongodb/logs/mongodb.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  dbPath: /home/server/mongodb/data</span><br><span class="line">  directoryPerDB: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">     engineConfig:</span><br><span class="line">        cacheSizeGB: 1</span><br><span class="line">        directoryForIndexes: <span class="literal">true</span></span><br><span class="line">     collectionConfig:</span><br><span class="line">        blockCompressor: zlib</span><br><span class="line">     indexConfig:</span><br><span class="line">        prefixCompression: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /home/server/mongodb/pid/mongod.pid</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1,192.168.30.213</span><br><span class="line">  maxIncomingConnections: 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">#security:</span></span><br><span class="line">  <span class="comment">#authorization: enabled</span></span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  oplogSizeMB: 4096</span><br><span class="line">  replSetName: rs1</span><br></pre></td></tr></table></figure><ul><li>SECONDARY 节点2配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file   </span><br><span class="line">  logAppend: <span class="literal">true</span>  </span><br><span class="line">  path: /home/server/mongodb/logs/mongodb.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  dbPath: /home/server/mongodb/data</span><br><span class="line">  directoryPerDB: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">     engineConfig:</span><br><span class="line">        cacheSizeGB: 1</span><br><span class="line">        directoryForIndexes: <span class="literal">true</span></span><br><span class="line">     collectionConfig:</span><br><span class="line">        blockCompressor: zlib</span><br><span class="line">     indexConfig:</span><br><span class="line">        prefixCompression: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /home/server/mongodb/pid/mongod.pid</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1,192.168.30.214</span><br><span class="line">  maxIncomingConnections: 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">#security:</span></span><br><span class="line">  <span class="comment">#authorization: enabled</span></span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  oplogSizeMB: 4096</span><br><span class="line">  replSetName: rs1</span><br></pre></td></tr></table></figure><h4 id="2-2-启动3个节点"><a href="#2-2-启动3个节点" class="headerlink" title="2.2 启动3个节点"></a>2.2 启动3个节点</h4><p>PRIMARY节点需要重启，2个SECONDARY节点直接启动。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动命令</span></span><br><span class="line">$ mongo -f /home/server/mongodb/conf/mongo.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止命令</span></span><br><span class="line">$ mongo -f /home/server/mongodb/conf/mongo.conf --shutdown</span><br></pre></td></tr></table></figure><h3 id="三、初始化副本集"><a href="#三、初始化副本集" class="headerlink" title="三、初始化副本集"></a>三、初始化副本集</h3><p>使用mongo shell连接到其中一个节点，执行初始化命令</p><h4 id="3-1-初始化配置"><a href="#3-1-初始化配置" class="headerlink" title="3.1 初始化配置"></a>3.1 初始化配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config = &#123;</span><br><span class="line">  _id : <span class="string">&quot;rs1&quot;</span>, </span><br><span class="line">  members : [</span><br><span class="line">    &#123;_id:0, host:<span class="string">&quot;192.168.30.207:27017&quot;</span>&#125;,</span><br><span class="line">    &#123;_id:1, host:<span class="string">&quot;192.168.30.213:27017&quot;</span>&#125;,</span><br><span class="line">    &#123;_id:2, host:<span class="string">&quot;192.168.30.214:27017&quot;</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://pic-cdn.wanhebin.com/2021/01/20/d5d7e835ab492.png#pic_center" alt="mongo_replica-1.png"></p><h4 id="3-2-对副本集进行初始化"><a href="#3-2-对副本集进行初始化" class="headerlink" title="3.2 对副本集进行初始化"></a>3.2 对副本集进行初始化</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; rs.initiate(config)//初始化副本集</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,//返回ok：1成功，返回ok：0失败</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1611042829, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1611042829, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://pic-cdn.wanhebin.com/2021/01/20/587bb23f66a55.png#pic_center" alt="mongo_replica-2.png"></p><h4 id="3-3-查看副本集状态"><a href="#3-3-查看副本集状态" class="headerlink" title="3.3 查看副本集状态"></a>3.3 查看副本集状态</h4><ul><li>查看集群状态信息</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.<span class="function"><span class="title">status</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;set&quot;</span> : <span class="string">&quot;rs1&quot;</span>,</span><br><span class="line"><span class="string">&quot;date&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:53.063Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;myState&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;term&quot;</span> : NumberLong(2),</span><br><span class="line"><span class="string">&quot;heartbeatIntervalMillis&quot;</span> : NumberLong(2000),</span><br><span class="line"><span class="string">&quot;optimes&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;lastCommittedOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;readConcernMajorityOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;appliedOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;durableOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;members&quot;</span> : [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 0,</span><br><span class="line"><span class="string">&quot;name&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;health&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;state&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line"><span class="string">&quot;uptime&quot;</span> : 52343,</span><br><span class="line"><span class="string">&quot;optime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:45Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;electionTime&quot;</span> : Timestamp(1611055182, 1),</span><br><span class="line"><span class="string">&quot;electionDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-19T11:19:42Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;configVersion&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;self&quot;</span> : <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;name&quot;</span> : <span class="string">&quot;192.168.30.213:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;health&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;state&quot;</span> : 2,</span><br><span class="line"><span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;SECONDARY&quot;</span>,</span><br><span class="line"><span class="string">&quot;uptime&quot;</span> : 52334,</span><br><span class="line"><span class="string">&quot;optime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDurable&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:45Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;optimeDurableDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:45Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;lastHeartbeat&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:52.487Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;lastHeartbeatRecv&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:52.487Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;pingMs&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;syncingTo&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;configVersion&quot;</span> : 1</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 2,</span><br><span class="line"><span class="string">&quot;name&quot;</span> : <span class="string">&quot;192.168.30.214:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;health&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;state&quot;</span> : 2,</span><br><span class="line"><span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;SECONDARY&quot;</span>,</span><br><span class="line"><span class="string">&quot;uptime&quot;</span> : 52328,</span><br><span class="line"><span class="string">&quot;optime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDurable&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:45Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;optimeDurableDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:45Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;lastHeartbeat&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:52.487Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;lastHeartbeatRecv&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:52.487Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;pingMs&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;syncingTo&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;configVersion&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;9fl/3w/5Gwk4Qd7h3fkrQVQtPhM=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(<span class="string">&quot;6919423507650576385&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看延时从库信息</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.printSlaveReplicationInfo()</span><br><span class="line"><span class="built_in">source</span>: 192.168.30.213:27017</span><br><span class="line">syncedTo: Wed Jan 20 2021 09:52:05 GMT+0800 (CST)</span><br><span class="line">0 secs (0 hrs) behind the primary </span><br><span class="line"><span class="built_in">source</span>: 192.168.30.214:27017</span><br><span class="line">syncedTo: Wed Jan 20 2021 09:52:05 GMT+0800 (CST)</span><br><span class="line">0 secs (0 hrs) behind the primary</span><br></pre></td></tr></table></figure><ul><li>查看集群与主节点</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.<span class="function"><span class="title">isMaster</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;hosts&quot;</span> : [</span><br><span class="line"><span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;192.168.30.213:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;192.168.30.214:27017&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;setName&quot;</span> : <span class="string">&quot;rs1&quot;</span>,</span><br><span class="line"><span class="string">&quot;setVersion&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;ismaster&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;secondary&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;primary&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;me&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;electionId&quot;</span> : ObjectId(<span class="string">&quot;7fffffff0000000000000002&quot;</span>),</span><br><span class="line"><span class="string">&quot;lastWrite&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;opTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611108985, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;lastWriteDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T02:16:25Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;majorityOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611108985, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;majorityWriteDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T02:16:25Z&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;maxBsonObjectSize&quot;</span> : 16777216,</span><br><span class="line"><span class="string">&quot;maxMessageSizeBytes&quot;</span> : 48000000,</span><br><span class="line"><span class="string">&quot;maxWriteBatchSize&quot;</span> : 100000,</span><br><span class="line"><span class="string">&quot;localTime&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T02:16:26.713Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;logicalSessionTimeoutMinutes&quot;</span> : 30,</span><br><span class="line"><span class="string">&quot;minWireVersion&quot;</span> : 0,</span><br><span class="line"><span class="string">&quot;maxWireVersion&quot;</span> : 6,</span><br><span class="line"><span class="string">&quot;readOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1611108985, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1611108985, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;/B6MSETtY8MEoZwXKABCkb1AMY8=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(<span class="string">&quot;6919423507650576385&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、副本集开启认证"><a href="#四、副本集开启认证" class="headerlink" title="四、副本集开启认证"></a>四、副本集开启认证</h3><h4 id="4-1-通过主节点添加一个超级管理员账号"><a href="#4-1-通过主节点添加一个超级管理员账号" class="headerlink" title="4.1 通过主节点添加一个超级管理员账号"></a>4.1 通过主节点添加一个超级管理员账号</h4><blockquote><p><strong>注意</strong>：如果原先单节点mongo已经有了超级管理员账号，这可以忽略这个步鄹。</p></blockquote><p>只需在主节点添加用户，副本集会自动同步主节点上的数据。</p><p>需要注意的是，创建账号这一步需要在开启认证之前操作。</p><ul><li>创建超管账号</li></ul><p>超管用户：  mongouser        密码： 123456      认证库： admin</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongo --host 192.168.30.207 --port 27017</span><br><span class="line">rs1:PRIMARY&gt; use admin</span><br><span class="line">rs1:PRIMARY&gt; db.createUser(&#123;user: <span class="string">&quot;mongouser&quot;</span>,<span class="built_in">pwd</span>: <span class="string">&quot;123456&quot;</span>,roles:[ &#123; role: <span class="string">&quot;root&quot;</span>, db:<span class="string">&quot;admin&quot;</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure><ul><li>查看已创建的账号</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs1:PRIMARY&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">rs1:PRIMARY&gt; db.getUsers()</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : <span class="string">&quot;admin.mongouser&quot;</span>,</span><br><span class="line"><span class="string">&quot;user&quot;</span> : <span class="string">&quot;mongouser&quot;</span>,</span><br><span class="line"><span class="string">&quot;db&quot;</span> : <span class="string">&quot;admin&quot;</span>,</span><br><span class="line"><span class="string">&quot;roles&quot;</span> : [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;role&quot;</span> : <span class="string">&quot;root&quot;</span>,</span><br><span class="line"><span class="string">&quot;db&quot;</span> : <span class="string">&quot;admin&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="4-2-创建副本集认证的key文件"><a href="#4-2-创建副本集认证的key文件" class="headerlink" title="4.2 创建副本集认证的key文件"></a>4.2 创建副本集认证的key文件</h4><blockquote><p>所有副本集节点都必须要用同一份keyfile，一般是在一台机器上生成，然后拷贝到其他机器上，且必须有读的权限，否则将来会报错。<br>一定要保证密钥文件一致，文件位置随便。但是为了方便查找，建议每台机器都放到一个固定的位置，都放到和配置文件一起的目录中。</p></blockquote><ul><li>生成<code>mongo.keyfile</code>文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl rand -base64 90 -out /home/server/mongodb/conf/mongo.keyfile</span><br></pre></td></tr></table></figure><ul><li>拷贝<code>mongo.keyfile</code>文件到另外2个节点相同目录下</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scp /home/server/mongodb/conf/mongo.keyfile root@192.168.30.213:/home/server/mongodb/conf/</span><br><span class="line">$ scp /home/server/mongodb/conf/mongo.keyfile root@192.168.30.214:/home/server/mongodb/conf/</span><br></pre></td></tr></table></figure><h4 id="4-3-修改MongoDB配置文件，开启认证"><a href="#4-3-修改MongoDB配置文件，开启认证" class="headerlink" title="4.3 修改MongoDB配置文件，开启认证"></a>4.3 修改MongoDB配置文件，开启认证</h4><ul><li>在配置文件中添加、修改如下配置。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">security:</span><br><span class="line">  keyFile: /home/server/mongodb/conf/mongo.keyfile</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure><ul><li>重启所有的mongo节点</li></ul><h4 id="4-4-验证副本集认证"><a href="#4-4-验证副本集认证" class="headerlink" title="4.4 验证副本集认证"></a>4.4 验证副本集认证</h4><p>使用用户名、免密、认证库登录MongoDB副本集主节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongo -u mongouser -p 123456 --host 192.168.30.207 --port 27017 -authenticationDatabase admin</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Elasticsearch 7.X 分片数量不足问题</title>
      <link href="posts/solve-shortage-of-es7.x-shards/"/>
      <url>posts/solve-shortage-of-es7.x-shards/</url>
      
        <content type="html"><![CDATA[<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>这是Logstash向ES请求创建新索引时，Logstash日志出现以下报错信息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2021-01-11T13:23:52,381][WARN ][logstash.outputs.elasticsearch][main][08029a8bd56dc10a64b84e502acbac75</span><br><span class="line">f20dc2c03ac3454af5ea5a31d7aade2c] Could not index event to Elasticsearch. &#123;:status=&gt;400, :action=&gt;[<span class="string">&quot;ind</span></span><br><span class="line"><span class="string">ex&quot;</span>, &#123;:_id=&gt;nil, :_index=&gt;<span class="string">&quot;catalina-prod-openapi-2021.01.11&quot;</span>, :routing=&gt;nil, :_type=&gt;<span class="string">&quot;_doc&quot;</span>&#125;, <span class="comment">#&lt;LogStas</span></span><br><span class="line">h::Event:0x3a2c6612&gt;], :response=&gt;&#123;<span class="string">&quot;index&quot;</span>=&gt;&#123;<span class="string">&quot;_index&quot;</span>=&gt;<span class="string">&quot;catalina-prod-2021.01.11&quot;</span>, <span class="string">&quot;_type&quot;</span></span><br><span class="line">=&gt;<span class="string">&quot;_doc&quot;</span>, <span class="string">&quot;_id&quot;</span>=&gt;nil, <span class="string">&quot;status&quot;</span>=&gt;400, <span class="string">&quot;error&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;validation_exception&quot;</span>, <span class="string">&quot;reason&quot;</span>=&gt;<span class="string">&quot;Validation Fa</span></span><br><span class="line"><span class="string">iled: 1: this action would add [2] total shards, but this cluster currently has [1000]/[1000] maximum s</span></span><br><span class="line"><span class="string">hards open;&quot;</span>&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>从日志可以找到报错信息，如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failed: 1: this action would add [2] total shards, but this cluster currently has [1000]/[1000] maximum</span><br><span class="line">shards open;</span><br></pre></td></tr></table></figure><blockquote><p><em>ES当前最大的分片数只有1000，并且已经占用满了，但是此时ES创建新索引时还需要2个分片。也就是说ES的分片数不够用了。</em></p></blockquote><p>&nbsp;</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>从Elasticsearch7.X版本开始，每个node默认只允许有1000个分片，所以上述报错是因为集群分片数不足引起的。</p><h4 id="修改ES的分片数量"><a href="#修改ES的分片数量" class="headerlink" title="修改ES的分片数量"></a>修改ES的分片数量</h4><p>1、通过配置文件<code>elasticsearch.yml</code>修改节点（集群）分片数量，需要重启服务。（永久生效）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster.max_shards_per_node: 5000</span><br></pre></td></tr></table></figure><p>2、通过curl命令修改分片数量</p><blockquote><p>集群更新 API 有两种工作模式：</p><p>临时（Transient）</p><p>这些变更在集群重启之前一直会生效。一旦整个集群重启，这些配置就被清除。</p><p>永久（Persistent）</p><p>这些变更会永久存在直到被显式修改。即使全集群重启它们也会存活下来并覆盖掉静态配置文件里的选项。</p><p>临时或永久配置需要在 JSON 体里分别指定。</p></blockquote><ul><li>临时生效</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPUT -H <span class="string">&quot;Content-Type:application/json&quot;</span> http://localhost:9200/_cluster/settings -d <span class="string">&#x27;&#123; &quot;transient&quot;: &#123; &quot;cluster&quot;: &#123; &quot;max_shards_per_node&quot;: 5000 &#125; &#125; &#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>永久生效</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPUT -H <span class="string">&quot;Content-Type:application/json&quot;</span> http://localhost:9200/_cluster/settings -d <span class="string">&#x27;&#123; &quot;persistent&quot;: &#123; &quot;cluster&quot;: &#123; &quot;max_shards_per_node&quot;: 5000 &#125; &#125; &#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h4 id="查看分片数量"><a href="#查看分片数量" class="headerlink" title="查看分片数量"></a>查看分片数量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET http://localhost:9200/_cluster/settings?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;persistent&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;cluster&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;max_shards_per_node&quot;</span> : <span class="string">&quot;5000&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;transient&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;cluster&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;max_shards_per_node&quot;</span> : <span class="string">&quot;5000&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><p><strong>参考文档</strong></p><ul><li><a href="https://blog.csdn.net/knight_zhou/article/details/105707342">https://blog.csdn.net/knight_zhou/article/details/105707342</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose 部署 EFK</title>
      <link href="posts/docker-compose-deploys-efk/"/>
      <url>posts/docker-compose-deploys-efk/</url>
      
        <content type="html"><![CDATA[<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>系统版本：CentOS 7.6</p><p>服务器配置：2H 4G</p><p>软件版本（docker镜像）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elasticsearch 6.6.0</span><br><span class="line">kibana 6.6.0</span><br><span class="line">filebeat 6.6.0</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker-CE"></a>安装 Docker-CE</h2><h3 id="添加-stable-版本的-docker-仓库"><a href="#添加-stable-版本的-docker-仓库" class="headerlink" title="添加 stable 版本的 docker 仓库"></a>添加 <code>stable</code> 版本的 docker 仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装-docker-ce"><a href="#安装-docker-ce" class="headerlink" title="安装 docker-ce"></a>安装 docker-ce</h3><h4 id="安装最新版的-docker"><a href="#安装最新版的-docker" class="headerlink" title="安装最新版的 docker"></a>安装最新版的 docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h4 id="安装指定版本-docker"><a href="#安装指定版本-docker" class="headerlink" title="安装指定版本 docker"></a>安装指定版本 docker</h4><ul><li>查询可安装的版本：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line"> * updates: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line"> * extras: mirrors.huaweicloud.com</span><br><span class="line">docker-ce.x86_64            3:19.03.4-3.el7                     docker-ce-stable</span><br><span class="line">......</span><br><span class="line">docker-ce.x86_64            3:18.09.9-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable</span><br><span class="line">......</span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure><ul><li>比如这里我们来安装 docker-ce-18.09.9 版本：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install docker-ce-18.09.9 docker-ce-cli-18.09.9 containerd.io -y</span><br></pre></td></tr></table></figure><p>安装完成，但是还没有启动，由于我这里的磁盘空间不大，所以需要更改下 Docker 的根目录，将默认的 <code>/var/lib/docker</code> 更改为 <code>/data/docker</code> 目录，添加如下配置文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /etc/docker</span><br><span class="line">$ vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span> : [</span><br><span class="line">    <span class="string">&quot;https://ot2k4d59.mirror.aliyuncs.com/&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;graph&quot;</span>: <span class="string">&quot;/data/docker&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>镜像加速器：</strong></p><p>使用加速器可以提升获取 Docker 官方镜像的速度，建议注册阿里云帐号，使用阿里云提供的镜像加速服务，地址：<a href="https://cr.console.aliyun.com/cn-beijing/instances/mirrors%E3%80%82">https://cr.console.aliyun.com/cn-beijing/instances/mirrors。</a></p></blockquote><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置为开机启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker  </span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line"><span class="comment"># 启动 docker</span></span><br><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="部署-EFK"><a href="#部署-EFK" class="headerlink" title="部署 EFK"></a>部署 EFK</h2><h4 id="编写docker-compose启动文件"><a href="#编写docker-compose启动文件" class="headerlink" title="编写docker-compose启动文件"></a>编写docker-compose启动文件</h4><ul><li>创建项目目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /data/project/efk </span><br></pre></td></tr></table></figure><ul><li>编写docker-compose</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  es660:</span><br><span class="line">    image: elasticsearch:6.6.0</span><br><span class="line">    container_name: elasticsearch</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">      - 9300:9300</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/dockerdata/es660/etc/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span><br><span class="line">      - /data/dockerdata/es660/plugins/x-pack-core:/usr/share/elasticsearch/modules/x-pack-core</span><br><span class="line">      - /data/dockerdata/es660/data/:/usr/share/elasticsearch/data</span><br><span class="line">      - /data/dockerdata/es660/backup:/data/backup</span><br><span class="line">      - /data/dockerdata/es660/logs:/usr/share/elasticsearch/logs</span><br><span class="line">    hostname: es</span><br><span class="line">    restart: always</span><br><span class="line">    network_mode: <span class="string">&quot;bridge&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai<span class="comment"># 更改容器时区为 CST（默认为UTC）</span></span><br><span class="line"></span><br><span class="line">  kibana660:</span><br><span class="line">    image: kibana:6.6.0</span><br><span class="line">    container_name: kibana</span><br><span class="line">    ports:</span><br><span class="line">      - 5601:5601</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/dockerdata/kibana660/etc/kibana.yml:/usr/share/kibana/config/kibana.yml</span><br><span class="line">      - /data/dockerdata/kibana660/plugins:/usr/share/kibana/plugins</span><br><span class="line">      - /data/dockerdata/kibana660/logs:/usr/share/kibana/logs</span><br><span class="line">    hostname: kibana</span><br><span class="line">    restart: always</span><br><span class="line">    network_mode: <span class="string">&quot;bridge&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai<span class="comment"># 更改容器时区为 CST（默认为UTC）</span></span><br><span class="line"></span><br><span class="line">  filebeat660:</span><br><span class="line">    image: elastic/filebeat:6.6.0</span><br><span class="line">    container_name: filebeat</span><br><span class="line">    ports: </span><br><span class="line">      - 5044:5044</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/dockerdata/filebeat660/etc/filebeat.yml:/usr/share/filebeat/filebeat.yml</span><br><span class="line">      - /data/dockerdata/filebeat660/data:/usr/share/filebeat/data</span><br><span class="line">      - /data/dockerdata/filebeat660/logs:/usr/share/filebeat/logs  </span><br><span class="line">      - /data/dockerdata/filebeat660/tmp:/usr/share/filebeat/tmp</span><br><span class="line">      - /data/logs/nginx:/data/logs/nginx<span class="comment"># 把nginx日志目录挂载到容器内部</span></span><br><span class="line">    hostname: filebeat</span><br><span class="line">    restart: always</span><br><span class="line">    network_mode: <span class="string">&quot;bridge&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai<span class="comment"># 更改容器时区为 CST（默认为UTC）</span></span><br></pre></td></tr></table></figure><h4 id="创建EFK相关目录"><a href="#创建EFK相关目录" class="headerlink" title="创建EFK相关目录"></a>创建EFK相关目录</h4><ul><li>创建 ES 所需目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/dockerdata/es660/&#123;etc,plugins,data,logs,backup&#125;</span><br></pre></td></tr></table></figure><ul><li>创建 Kibana 所需目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/dockerdata/kibana660/&#123;etc,plugins,logs&#125;</span><br></pre></td></tr></table></figure><ul><li>创建 Filebeat 所需目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/dockerdata/filebeat660/&#123;etc,data,logs,tmp&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>由于目录时挂载进去的，容器内部需要一些读写权限，要进行一些权限配置，否则容器不能正常启动。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment"># elasticsearch 目录</span></span><br><span class="line">&gt;chmod 777 /data/dockerdata/es660/&#123;data,logs,backup&#125;</span><br><span class="line">&gt;chmod 644 -R /data/dockerdata/es660/&#123;etc,plugins&#125;/*</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment"># kibana 目录</span></span><br><span class="line">&gt;chmod 777 /data/dockerdata/kibana660/&#123;plugins,logs&#125;</span><br><span class="line">&gt;chmod 644 -R /data/dockerdata/es660/etc/*</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment"># filebeat 目录</span></span><br><span class="line">&gt;chmod 777 /data/dockerdata/filebeat660/&#123;data,logs,tmp&#125;</span><br><span class="line">&gt;chmod 644 -R /data/dockerdata/filebeat660/etc/*</span><br></pre></td></tr></table></figure></blockquote><h4 id="配置EFK所需配置文件"><a href="#配置EFK所需配置文件" class="headerlink" title="配置EFK所需配置文件"></a>配置EFK所需配置文件</h4><ul><li><strong>Elasticsearch所需文件</strong></li></ul><p>配置文件<code>elasticsearch.yml</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat&gt;&gt;/data/dockerdata/es660/etc/elasticsearch.yml&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">cluster.name: es</span></span><br><span class="line"><span class="string">node.name: es-01</span></span><br><span class="line"><span class="string">bootstrap.memory_lock: true</span></span><br><span class="line"><span class="string">network.host: 0.0.0.0</span></span><br><span class="line"><span class="string">http.port: 9200</span></span><br><span class="line"><span class="string">discovery.type: single-node     # 启动单节点类型</span></span><br><span class="line"><span class="string">xpack.security.enabled: false    # 关闭x-pack认证</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在本文，我针对ES开启了x-pack插件，所以需要替换原ES的x-pack-core目录文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://download.wanhebin.com/package/elk/plugins/x-pack-6.6.0/x-pack-core.tar.gz</span><br><span class="line">$ tar xf x-pack-core.tar.gz -C /data/dockerdata/es660/plugins/</span><br></pre></td></tr></table></figure><ul><li><strong>Kibana所需文件</strong></li></ul><p>配置文件<code>kibana.yml</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat&gt;&gt;/data/dockerdata/kibana660/etc/kibana.yml&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">server.port: 5601</span></span><br><span class="line"><span class="string">server.host: &quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="string">elasticsearch.hosts: [&quot;http://es660:9200&quot;] # 如果无法正常连接ES，请更换成宿主机docker0网卡的IP</span></span><br><span class="line"><span class="string">kibana.index: &quot;.kibana&quot;</span></span><br><span class="line"><span class="string">logging.dest: /usr/share/kibana/logs/kibana.log</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 连接ES认证配置</span></span><br><span class="line"><span class="string"># elasticsearch.username: &quot;kibana&quot;</span></span><br><span class="line"><span class="string"># elasticsearch.password: &quot;123456&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>Filebeat所需文件</strong></li></ul><p>配置文件<code>filebeat.yml</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat&gt;&gt;/data/dockerdata/filebeat660/etc/filebeat.yml&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="string">- type: log</span></span><br><span class="line"><span class="string">  enabled: true</span></span><br><span class="line"><span class="string">  paths:</span></span><br><span class="line"><span class="string">    - /data/logs/nginx/nginx_access_json-1.log# json格式的nginx日志文件路径</span></span><br><span class="line"><span class="string">  json.keys_under_root: true</span></span><br><span class="line"><span class="string">  json.overwrite_keys: true</span></span><br><span class="line"><span class="string">  json.message_key: log</span></span><br><span class="line"><span class="string">  tags: [&quot;nginx-log1&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- type: log</span></span><br><span class="line"><span class="string">  enabled: true</span></span><br><span class="line"><span class="string">  paths:</span></span><br><span class="line"><span class="string">    - /data/logs/nginx/nginx_access_json-2.log# json格式的nginx日志文件路径</span></span><br><span class="line"><span class="string">  json.keys_under_root: true</span></span><br><span class="line"><span class="string">  json.overwrite_keys: true</span></span><br><span class="line"><span class="string">  json.message_key: log</span></span><br><span class="line"><span class="string">  tags: [&quot;nginx-log2&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">filebeat.config:</span></span><br><span class="line"><span class="string">  modules:</span></span><br><span class="line"><span class="string">    path: $&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class="line"><span class="string">    reload.enabled: false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">setup.ilm.enabled: false</span></span><br><span class="line"><span class="string">setup.template:</span></span><br><span class="line"><span class="string">  name: &quot;nginx&quot;</span></span><br><span class="line"><span class="string">  pattern: &quot;nginx-*&quot;</span></span><br><span class="line"><span class="string">setup.template.overwrite: true</span></span><br><span class="line"><span class="string">setup.template.enabled: false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">output.elasticsearch:</span></span><br><span class="line"><span class="string">  hosts: [&quot;es660:9200&quot;]# 如果无法正常连接ES，请更换成宿主机docker0网卡的IP</span></span><br><span class="line"><span class="string">  indices:</span></span><br><span class="line"><span class="string">    - index: &quot;nginx-access-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line"><span class="string">      when.contains:</span></span><br><span class="line"><span class="string">        tags: &quot;nginx-log1&quot;</span></span><br><span class="line"><span class="string">    - index: &quot;nginx-error-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line"><span class="string">      when.contains:</span></span><br><span class="line"><span class="string">        tags: &quot;nginx-log2&quot;</span></span><br><span class="line"><span class="string">  # ES连接认证</span></span><br><span class="line"><span class="string">  # username: &#x27;elastic&#x27;  </span></span><br><span class="line"><span class="string">  # password: &#x27;changeme&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">setup.template.overwrite: false</span></span><br><span class="line"><span class="string">setup.template.json.enabled: true</span></span><br><span class="line"><span class="string">setup.template.enabled: false</span></span><br><span class="line"><span class="string">setup.ilm.enabled: false</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="破解-Elasticsearch-的x-pack插件"><a href="#破解-Elasticsearch-的x-pack插件" class="headerlink" title="破解 Elasticsearch 的x-pack插件"></a>破解 Elasticsearch 的x-pack插件</h2><p>在上面已经把x-pacK-core插件目录替换成了破解包，接下来只需要进行激活步鄹。</p><p>详细步鄹参考 <a href="https://www.wanhebin.com/devops/elk/elasticsearch/983.html">Elasticsearch 6.6.0 x-pack 破解</a> 进行x-pack激活。</p><ul><li><strong>启动es容器</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /data/project/efk</span><br><span class="line">$ docker-compose start es660</span><br></pre></td></tr></table></figure><ul><li><strong>导入liences</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://download.wanhebin.com/package/elk/plugins/x-pack-6.6.0/license.json</span><br><span class="line">$ curl -XPUT -H <span class="string">&quot;Content-Type: application/json&quot;</span> <span class="string">&#x27;http://127.0.0.1:9200/_xpack/license&#x27;</span> -d @license.json</span><br></pre></td></tr></table></figure><ul><li><strong>查看 license 授权</strong></li></ul><p><img src="http://pic-cdn.wanhebin.com/2020/12/07/0147ef657804c.png" alt="efk-04.png"></p><p>&nbsp;</p><h2 id="EFK-开启-X-PACK-认证"><a href="#EFK-开启-X-PACK-认证" class="headerlink" title="EFK 开启 X-PACK 认证"></a>EFK 开启 X-PACK 认证</h2><h3 id="ES开启x-pack认证"><a href="#ES开启x-pack认证" class="headerlink" title="ES开启x-pack认证"></a>ES开启x-pack认证</h3><ul><li><strong>修改配置文件<code>/data/dockerdata/es660/etc/elasticsearch.yml</code></strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -ir <span class="string">&#x27;s@xpack.security.enabled: false@xpack.security.enabled: true@g&#x27;</span> /data/dockerdata/es660/etc/elasticsearch.yml</span><br></pre></td></tr></table></figure><ul><li><strong>重启es容器</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /data/project/efk</span><br><span class="line">$ docker-compose restart es660</span><br></pre></td></tr></table></figure><ul><li><strong>进入容器，设置ES密码</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入es容器内部</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it elasticsearch bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在容器内，进入es目录，生成密码</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/share/elasticsearch</span><br><span class="line">$ ./bin/elasticsearch-setup-passwords auto  </span><br></pre></td></tr></table></figure><h3 id="Kibana-开启认证"><a href="#Kibana-开启认证" class="headerlink" title="Kibana 开启认证"></a>Kibana 开启认证</h3><p>开启用户认证，让kibana可以正常访问es。</p><ul><li><strong>修改<code>kibana.yml</code>配置文件</strong></li></ul><p>在之前写kibana配置文件时，就已经把认证配置加上了，现在取消注释。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -ir <span class="string">&#x27;s@# elasticsearch.username: &quot;kibana&quot;@elasticsearch.username: &quot;kibana&quot;@g&#x27;</span> /data/dockerdata/kibana660/etc/kibana.yml</span><br><span class="line"></span><br><span class="line">$ sed -ir <span class="string">&#x27;s@# elasticsearch.password: &quot;123456&quot;@elasticsearch.password: &quot;123456&quot;@g&#x27;</span> /data/dockerdata/kibana660/etc/kibana.yml</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>这里的用户密码，填写刚才es里生成的密码</p></blockquote><ul><li><strong>启动kibana容器</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /data/project/efk</span><br><span class="line">$ docker-compose restart kibana660</span><br></pre></td></tr></table></figure><h3 id="Filebeat-开启认证"><a href="#Filebeat-开启认证" class="headerlink" title="Filebeat 开启认证"></a>Filebeat 开启认证</h3><p>开启用户认证，让filebeat可以正常访问es，使其可以向es传输数据。</p><ul><li><strong>修改<code>kibana.yml</code>配置文件</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -ir <span class="string">&#x27;s@# username: &#x27;</span>elastic<span class="string">&#x27;@username: &#x27;</span>elastic<span class="string">&#x27;@g&#x27;</span> /data/dockerdata/filebeat660/etc/filebeat.yml</span><br><span class="line"></span><br><span class="line">$ sed -ir <span class="string">&#x27;s@# password: &#x27;</span>changeme<span class="string">&#x27;@password: &#x27;</span>changeme<span class="string">&#x27;@g&#x27;</span> /data/dockerdata/filebeat660/etc/filebeat.yml</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>这里的用户密码，填写刚才es里生成的密码</p></blockquote><ul><li><strong>启动filebeat容器</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /data/project/efk</span><br><span class="line">$ docker-compose restart filebeat660</span><br></pre></td></tr></table></figure><h3 id="查看EFK容器状态"><a href="#查看EFK容器状态" class="headerlink" title="查看EFK容器状态"></a>查看EFK容器状态</h3><p>所有容器的 STATUS 都为 UP 说明容器正常启动运行。</p><p><img src="http://pic-cdn.wanhebin.com/2020/12/07/2fb0742a742c4.png" alt="efk-01.png"></p><p>如果有容器不处于 UP 状态，请检查相关容器日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker logs -f 容器名</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="登录-Kibana-界面"><a href="#登录-Kibana-界面" class="headerlink" title="登录 Kibana 界面"></a>登录 Kibana 界面</h2><p>使用<code>elastic</code>账户进行登录，地址：<a href="http://ip:5601/">http://IP:5601</a></p><p><img src="http://pic-cdn.wanhebin.com/2020/12/07/9b699f90773ed.png" alt="efk-02.png"><img src="http://pic-cdn.wanhebin.com/2020/12/07/d59c9726ffa60.png" alt="efk-03.png"></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 6.6.0 X-PACK 破解</title>
      <link href="posts/elasticsearch-6.6.0-x-pack-crack/"/>
      <url>posts/elasticsearch-6.6.0-x-pack-crack/</url>
      
        <content type="html"><![CDATA[<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p><strong>软件包版本</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elasticsearch-6.6.0.rpm</span><br><span class="line">kibana-6.6.0-x86_64.rpm</span><br><span class="line">logstash-6.6.0.rpm</span><br></pre></td></tr></table></figure><p><strong>在做下列操作前，建议先停止Elasticsearch、Kibana</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop elasticsearch kibana</span><br></pre></td></tr></table></figure><p>如果是相同版本，可直接使用已破解好的相关 x-pack-6.6.0 文件：<a href="http://download.wanhebin.com/package/elk/plugins/x-pack-6.6.0.zip">下载地址</a></p><p>&nbsp;</p><h3 id="反编译-x-pack-core-6-6-0-jar"><a href="#反编译-x-pack-core-6-6-0-jar" class="headerlink" title="反编译 x-pack-core-6.6.0.jar"></a>反编译 x-pack-core-6.6.0.jar</h3><p>下载Luyten：<a href="https://github.com/deathmarine/Luyten/release">https://github.com/deathmarine/Luyten/release</a></p><p>从ES服务器上把<code>x-pack-core-6.6.0.jar</code> 下载到PC，打开Luyten软件，并把<code>x-pack-core-6.6.0.jar</code>包拖入。</p><blockquote><p>rpm包安装的elasticsearch插件路径：<code>/usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar</code></p></blockquote><p>找到 <code>org.elasticsearch.license.LicenseVerifier</code>、<code>org.elasticsearch.xpack.core.XPackBuild</code>这两个文件。</p><p><img src="https://pic-cdn.wanhebin.com/2020/11/18/f0292119e3f0d.png" alt="x-pack-01.png"></p><p><img src="https://pic-cdn.wanhebin.com/2020/11/18/5b90efa381229.png" alt="x-pack-02.png"></p><p>选择文件后，使用 Luyten 的 Save As 提取出文件。</p><p>&nbsp;</p><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><h4 id="1、修改LicenseVerifier-java"><a href="#1、修改LicenseVerifier-java" class="headerlink" title="1、修改LicenseVerifier.java"></a>1、修改<code>LicenseVerifier.java</code></h4><blockquote><p>LicenseVerifier 中有两个静态方法，这就是验证授权文件是否有效的方法，我们把它修改为全部返回true。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.elasticsearch.license;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.bytes.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.util.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.core.internal.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LicenseVerifier</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verifyLicense</span><span class="params">(<span class="keyword">final</span> License license, <span class="keyword">final</span> <span class="keyword">byte</span>[] publicKeyData)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verifyLicense</span><span class="params">(<span class="keyword">final</span> License license)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、修改XPackBuild-java"><a href="#2、修改XPackBuild-java" class="headerlink" title="2、修改XPackBuild.java"></a>2、修改<code>XPackBuild.java</code></h4><blockquote><p>XPackBuild 中最后一个静态代码块中 try的部分全部删除，这部分会验证jar包是否被修改。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.elasticsearch.xpack.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XPackBuild</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> XPackBuild CURRENT;</span><br><span class="line">    <span class="keyword">private</span> String shortHash;</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressForbidden(reason = &quot;looks up path of xpack.jar directly&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Path <span class="title">getElasticsearchCodebase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> URL url = XPackBuild.class.getProtectionDomain().getCodeSource().getLocation();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> PathUtils.get(url.toURI());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (URISyntaxException bogus) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(bogus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    XPackBuild(<span class="keyword">final</span> String shortHash, <span class="keyword">final</span> String date) &#123;</span><br><span class="line">        <span class="keyword">this</span>.shortHash = shortHash;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shortHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.shortHash;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Path path = getElasticsearchCodebase();</span><br><span class="line">        String shortHash = <span class="keyword">null</span>;</span><br><span class="line">        String date = <span class="keyword">null</span>;</span><br><span class="line">        Label_0109: &#123;</span><br><span class="line">            shortHash = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">            date = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CURRENT = <span class="keyword">new</span> XPackBuild(shortHash, date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="编译修改后的java文件"><a href="#编译修改后的java文件" class="headerlink" title="编译修改后的java文件"></a>编译修改后的java文件</h3><p>先将修改后的文件上传到ES服务器上，再进行编译。</p><ul><li>编译生成新的 class 文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac -cp <span class="string">&quot;/usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar:/usr/share/elasticsearch/lib/*&quot;</span> LicenseVerifier.java </span><br><span class="line"></span><br><span class="line">javac -cp <span class="string">&quot;/usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar:/usr/share/elasticsearch/lib/*&quot;</span> XPackBuild.java </span><br></pre></td></tr></table></figure><ul><li>覆盖原class文件</li></ul><p>复制并解压 x-pack-core-6.6.0.jar 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /opt/x-pack-core-6.6.0</span><br><span class="line">cp /usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar /opt/</span><br><span class="line">unzip xf x-pack-core-6.6.0.jar -d x-pack-core-6.6.0/</span><br><span class="line"><span class="built_in">cd</span> /opt/x-pack-core-6.6.0/</span><br></pre></td></tr></table></figure><p>把<code>LicenseVerifier.class</code>、<code>XPackBuild.class</code>覆盖原文件</p><blockquote><p>LicenseVerifier.class 路径： <code>org/elasticsearch/license/LicenseVerifier.class</code></p><p>XPackBuild.class 路径： <code>org/elasticsearch/xpack/core/XPackBuild.class</code></p></blockquote><p>&nbsp;</p><h3 id="重新打包并替换-x-pack-core-6-6-0-jar"><a href="#重新打包并替换-x-pack-core-6-6-0-jar" class="headerlink" title="重新打包并替换 x-pack-core-6.6.0.jar"></a>重新打包并替换 x-pack-core-6.6.0.jar</h3><ul><li>打包<code>x-pack-core-6.6.0</code>为新的 x-pack-core-6.6.0.jar</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/x-pack-core-6.6.0/</span><br><span class="line">jar cvf /root/x-pack-core-6.6.0.jar *</span><br></pre></td></tr></table></figure><ul><li>备份原来的 x-pack-core-6.6.0.jar，并将新的 x-pack-core-6.6.0.jar 覆盖原文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line">\cp /opt/x-pack-core-6.6.0/x-pack-core-6.6.0.jar /usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="授权文件导入"><a href="#授权文件导入" class="headerlink" title="授权文件导入"></a>授权文件导入</h3><h4 id="1、禁用-x-pack-security"><a href="#1、禁用-x-pack-security" class="headerlink" title="1、禁用 x-pack security"></a>1、禁用 <code>x-pack security</code></h4><p>先把禁用<code>x-pack security</code>，否则不能正常导入 license 文件 </p><blockquote><p><code>vim /etc/elasticsearch/elasticsearch.yml</code></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xpack.security.enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>重启elasticsearch</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart elasticsearch.service</span><br></pre></td></tr></table></figure><h4 id="2、修改授权文件"><a href="#2、修改授权文件" class="headerlink" title="2、修改授权文件"></a>2、修改授权文件</h4><blockquote><p>去官网申请basic授权文件：<a href="https://license.elastic.co/registration">https://license.elastic.co/registration</a></p><p>根据邮箱里的链接下载授权文件，更改名为 license.json</p></blockquote><p>修改 license.json 信息</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;uid&quot;</span>:<span class="string">&quot;654c015f-2dba-4412-b6dc-38939b36b2de&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;platinum&quot;</span>,#修改为白金授权</span><br><span class="line">        <span class="attr">&quot;issue_date_in_millis&quot;</span>:<span class="number">1605571200000</span>,</span><br><span class="line">        <span class="attr">&quot;expiry_date_in_millis&quot;</span>:<span class="number">4070793600000</span>,#2098年过期</span><br><span class="line">        <span class="attr">&quot;max_nodes&quot;</span>:<span class="number">999</span>,#集群最大节点数</span><br><span class="line">        <span class="attr">&quot;issued_to&quot;</span>:<span class="string">&quot;HEBIN (CN)&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;issuer&quot;</span>:<span class="string">&quot;Web Form&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;signature&quot;</span>:<span class="string">&quot;AAAA........zDD1U&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;start_date_in_millis&quot;</span>:<span class="number">1605571200000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、导入-license"><a href="#3、导入-license" class="headerlink" title="3、导入 license"></a>3、导入 license</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPUT -H <span class="string">&quot;Content-Type: application/json&quot;</span> <span class="string">&#x27;http://127.0.0.1:9200/_xpack/license&#x27;</span> -d @license.json</span><br></pre></td></tr></table></figure><ul><li>查看 license 授权</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XGET http://127.0.0.1:9200/_license</span><br></pre></td></tr></table></figure><p><img src="https://pic-cdn.wanhebin.com/2020/11/18/dee1d2e2453d7.png" alt="x-pack-03.png"></p><p>&nbsp;</p><h3 id="ES开启x-pack认证"><a href="#ES开启x-pack认证" class="headerlink" title="ES开启x-pack认证"></a>ES开启x-pack认证</h3><ul><li>修改配置文件<code>/etc/elasticsearch/elasticsearch.yml</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xpack.security.enabled: <span class="literal">true</span></span><br><span class="line">xpack.security.transport.ssl.enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>重启elasticsearch</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart elasticsearch.service</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="设置ES密码"><a href="#设置ES密码" class="headerlink" title="设置ES密码"></a>设置ES密码</h3><ul><li><strong>生成自定义密码</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure><ul><li><strong>生成随机密码</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="Kibana开启x-pack认证"><a href="#Kibana开启x-pack认证" class="headerlink" title="Kibana开启x-pack认证"></a>Kibana开启x-pack认证</h3><ul><li>修改配置文件<code>vim /etc/kibana/kibana.yml</code></li></ul><p>密码填写上一步生成的elastic用户密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elasticsearch.username: <span class="string">&quot;elastic&quot;</span></span><br><span class="line">elasticsearch.password: <span class="string">&quot;changeme&quot;</span></span><br></pre></td></tr></table></figure><ul><li>重启kibana</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart kibana.service</span><br></pre></td></tr></table></figure><ul><li>访问kibana页面，验证x-pack</li></ul><p><img src="https://pic-cdn.wanhebin.com/2020/11/18/20c79a8ed2504.png" alt="x-pack-04.png"></p><p>&nbsp;</p><h3 id="Logstash开启x-pack认证"><a href="#Logstash开启x-pack认证" class="headerlink" title="Logstash开启x-pack认证"></a>Logstash开启x-pack认证</h3><ul><li>在<code>logstash.yml</code>中配置验证</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xpack.monitoring.enabled: <span class="literal">true</span></span><br><span class="line">xpack.monitoring.elasticsearch.username: logstash_system</span><br><span class="line">xpack.monitoring.elasticsearch.password: xxxxxxx<span class="comment">#填写对应用户密码</span></span><br></pre></td></tr></table></figure><ul><li>在<code>/etc/logstash/conf.d/test.conf</code>配置文件的 output 模块中配置验证验证</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">hosts =&gt; [<span class="string">&quot;127.0.0.1:9200&quot;</span>]</span><br><span class="line">index =&gt; <span class="string">&quot;system-syslog-toes-%&#123;+YYYY.MM&#125;&quot;</span></span><br><span class="line">user =&gt; <span class="string">&quot;logstash_system&quot;</span><span class="comment">#填写用户名</span></span><br><span class="line">password =&gt; <span class="string">&quot;xxxxx&quot;</span><span class="comment">#填写对应用户密码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启logstash</li></ul>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 配置 mailx 代理 163&amp;QQ 邮箱</title>
      <link href="posts/centos7-configure-mailx-proxy-163&amp;qq-mailbox/"/>
      <url>posts/centos7-configure-mailx-proxy-163&amp;qq-mailbox/</url>
      
        <content type="html"><![CDATA[<h2 id="网易-163-邮箱"><a href="#网易-163-邮箱" class="headerlink" title="网易 163 邮箱"></a>网易 163 邮箱</h2><h3 id="一、安装服务软件"><a href="#一、安装服务软件" class="headerlink" title="一、安装服务软件"></a>一、安装服务软件</h3><p>安装 mailx、sendmail 软件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y mailx sendmail</span><br></pre></td></tr></table></figure><h3 id="二、配置修改"><a href="#二、配置修改" class="headerlink" title="二、配置修改"></a>二、配置修改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/mail.rc</span><br><span class="line"><span class="built_in">set</span> from=xxx@163.com<span class="comment"># 发送邮件后显示的邮件发送方</span></span><br><span class="line"><span class="built_in">set</span> smtp=smtps://smtp.163.com:465<span class="comment"># 163 smtp邮件服务器</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=youremail@163.com<span class="comment"># 你的163邮箱</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-password=xxxxxx<span class="comment"># 你的163邮箱密码（设置页面加密后的授权码）</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth=login<span class="comment"># 动作、登录</span></span><br><span class="line"><span class="built_in">set</span> nss-config-dir=/root/.certs/<span class="comment"># 证书路径</span></span><br><span class="line"><span class="built_in">set</span> ssl-verify=ignore<span class="comment"># 忽略ssl验证</span></span><br></pre></td></tr></table></figure><h3 id="三、生成邮箱证书"><a href="#三、生成邮箱证书" class="headerlink" title="三、生成邮箱证书"></a>三、生成邮箱证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /root/.certs/</span><br><span class="line">$ <span class="built_in">echo</span> -n | openssl s_client -connect smtp.163.com:465 | sed -ne <span class="string">&#x27;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#x27;</span> &gt; ~/.certs/163.crt</span><br><span class="line">$ certutil -A -n <span class="string">&quot;GeoTrust SSL CA&quot;</span> -t <span class="string">&quot;C,,&quot;</span> -d ~/.certs -i ~/.certs/163.crt</span><br><span class="line">$ certutil -A -n <span class="string">&quot;GeoTrust Global CA&quot;</span> -t <span class="string">&quot;C,,&quot;</span> -d ~/.certs -i ~/.certs/163.crt</span><br><span class="line">$ certutil -L -d /root/.certs</span><br><span class="line">$ <span class="built_in">cd</span> /root/.certs/</span><br><span class="line">$ certutil -A -n <span class="string">&quot;GeoTrust SSL CA - G3&quot;</span> -t <span class="string">&quot;Pu,Pu,Pu&quot;</span> -d ./ -i 163.crt</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>出现 下面提示说明正常</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Notice: Trust flag u is <span class="built_in">set</span> automatically <span class="keyword">if</span> the private key is present.</span><br></pre></td></tr></table></figure></blockquote><h3 id="四、测试发送邮件"><a href="#四、测试发送邮件" class="headerlink" title="四、测试发送邮件"></a>四、测试发送邮件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;This is a test mail.&quot;</span> | mail -s <span class="string">&quot;Test Mail&quot;</span> -a test.txt youremail@163.com</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>echo 的为邮件内容，-s 是邮件主题，-a 为添加附件,逗号分隔多个邮箱地址。</p></blockquote><p>&nbsp;</p><h2 id="腾讯-QQ-邮箱"><a href="#腾讯-QQ-邮箱" class="headerlink" title="腾讯 QQ 邮箱"></a>腾讯 QQ 邮箱</h2><h3 id="一、安装服务软件-1"><a href="#一、安装服务软件-1" class="headerlink" title="一、安装服务软件"></a>一、安装服务软件</h3><p>安装 mailx、sendmail 软件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y mailx sendmail</span><br></pre></td></tr></table></figure><h3 id="二、配置修改-1"><a href="#二、配置修改-1" class="headerlink" title="二、配置修改"></a>二、配置修改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/mail.rc</span><br><span class="line"><span class="built_in">set</span> from=xxx@qq.com<span class="comment"># 发送邮件后显示的邮件发送方</span></span><br><span class="line"><span class="built_in">set</span> smtp=smtps://smtp.qq.com:465<span class="comment"># qq smtp邮件服务器</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=youremail@qq.com<span class="comment"># 你的 qq 邮箱</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-password=xxxxxx<span class="comment"># 你的 qq 邮箱密码（设置页面加密后的授权码）</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth=login<span class="comment"># 动作、登录</span></span><br><span class="line"><span class="built_in">set</span> nss-config-dir=/root/.certs/<span class="comment"># 证书路径</span></span><br><span class="line"><span class="built_in">set</span> ssl-verify=ignore<span class="comment"># 忽略ssl验证</span></span><br></pre></td></tr></table></figure><h3 id="三、生成邮箱证书-1"><a href="#三、生成邮箱证书-1" class="headerlink" title="三、生成邮箱证书"></a>三、生成邮箱证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /root/.certs/</span><br><span class="line">$ <span class="built_in">echo</span> -n | openssl s_client -connect smtp.qq.com:465 | sed -ne <span class="string">&#x27;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#x27;</span> &gt; ~/.certs/qq.crt</span><br><span class="line">$ certutil -A -n <span class="string">&quot;GeoTrust SSL CA&quot;</span> -t <span class="string">&quot;C,,&quot;</span> -d ~/.certs -i ~/.certs/qq.crt</span><br><span class="line">$ certutil -A -n <span class="string">&quot;GeoTrust Global CA&quot;</span> -t <span class="string">&quot;C,,&quot;</span> -d ~/.certs -i ~/.certs/qq.crt</span><br><span class="line">$ certutil -L -d /root/.certs</span><br><span class="line">$ <span class="built_in">cd</span> /root/.certs/</span><br><span class="line">$ certutil -A -n <span class="string">&quot;GeoTrust SSL CA - G3&quot;</span> -t <span class="string">&quot;Pu,Pu,Pu&quot;</span> -d ./ -i qq.crt</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>出现 下面提示说明正常</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Notice: Trust flag u is <span class="built_in">set</span> automatically <span class="keyword">if</span> the private key is present.</span><br></pre></td></tr></table></figure></blockquote><h3 id="四、测试发送邮件-1"><a href="#四、测试发送邮件-1" class="headerlink" title="四、测试发送邮件"></a>四、测试发送邮件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;This is a test mail.&quot;</span> | mail -s <span class="string">&quot;Test Mail&quot;</span> -a test.txt youremail@qq.com</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>echo 的为邮件内容，-s 是邮件主题，-a 为添加附件,逗号分隔多个邮箱地址。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mailx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 之 mysqldump 备份权限</title>
      <link href="posts/mysql-mysqldump-backup-permissions/"/>
      <url>posts/mysql-mysqldump-backup-permissions/</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建一个用于备份数据库的用户"><a href="#1-创建一个用于备份数据库的用户" class="headerlink" title="1.创建一个用于备份数据库的用户"></a>1.创建一个用于备份数据库的用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="2-添加权限"><a href="#2-添加权限" class="headerlink" title="2.添加权限"></a>2.添加权限</h3><h4 id="2-1-添加-SELECT-权限"><a href="#2-1-添加-SELECT-权限" class="headerlink" title="2.1 添加 SELECT 权限"></a>2.1 添加 SELECT 权限</h4><p>根据报错，backup用户缺少select权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@private_server ~]<span class="comment"># mysqldump -ubackup -p123 -B wordpress &gt; wordpress.sql</span></span><br><span class="line">mysqldump: Got error: 1044: <span class="string">&quot;Access denied for user &#x27;backup&#x27;@&#x27;localhost&#x27; to database &#x27;wordpress&#x27;&quot;</span> when selecting the database</span><br></pre></td></tr></table></figure><p>给backup用户添加select权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT SELECT ON *.* TO <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="2-2-添加-LOCK-TABLES-权限"><a href="#2-2-添加-LOCK-TABLES-权限" class="headerlink" title="2.2 添加 LOCK TABLES 权限"></a>2.2 添加 LOCK TABLES 权限</h4><p>根据报错，backup用户缺少lock tables权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@private_server ~]<span class="comment"># mysqldump -ubackup -p123 -B wordpress &gt; wordpress.sql</span></span><br><span class="line">mysqldump: Got error: 1044: <span class="string">&quot;Access denied for user &#x27;backup&#x27;@&#x27;localhost&#x27; to database &#x27;wordpress&#x27;&quot;</span> when using LOCK TABLES</span><br></pre></td></tr></table></figure><p>给backup用户添加lock tables权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT lock tables ON *.* TO <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><p>如果备份时加入<code>--single-transaction</code>选项，则可不需要LOCK TABLES权限。</p></blockquote><h4 id="2-3-添加-SHOW-VIEW-权限"><a href="#2-3-添加-SHOW-VIEW-权限" class="headerlink" title="2.3 添加 SHOW VIEW 权限"></a>2.3 添加 SHOW VIEW 权限</h4><p>当数据库中存在view（视图）的时候，使用mysqldump备份数据库，需要有SHOW VIEW权限</p><ul><li>给test2库添加一个view</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE VIEW view_1 AS SELECT 1 AS Number;</span><br></pre></td></tr></table></figure><ul><li>使用mysqldump备份，会提示缺少SHOW VIEW权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@private_server ~]<span class="comment"># mysqldump -ubackup -p123 -B test2 &gt; test2.sql</span></span><br><span class="line">mysqldump: Couldn<span class="string">&#x27;t execute &#x27;</span>show create table `view_1`<span class="string">&#x27;: SHOW VIEW command denied to user &#x27;</span>backup<span class="string">&#x27;@&#x27;</span>localhost<span class="string">&#x27; for table &#x27;</span>view_1<span class="string">&#x27; (1142)</span></span><br></pre></td></tr></table></figure><ul><li>给用户backup添加SHOW VIEW权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT SHOW VIEW ON *.* TO <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-添加-RELOAD-权限"><a href="#2-4-添加-RELOAD-权限" class="headerlink" title="2.4 添加 RELOAD 权限"></a>2.4 添加 RELOAD 权限</h4><p>加入–master-data选项后，备份需要RELOAD权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@private_server ~]<span class="comment"># mysqldump -ubackup -p123 --master-data=2 -B wordpress &gt; wordpress.sql</span></span><br><span class="line">mysqldump: Couldn<span class="string">&#x27;t execute &#x27;</span>FLUSH /*!40101 LOCAL */ TABLES<span class="string">&#x27;: Access denied; you need (at least one of) the RELOAD privilege(s) for this operation (1227)</span></span><br></pre></td></tr></table></figure><p>给backup用户添加RELOAD权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT reload ON *.* TO <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="2-5-添加-REPLICATION-CLIENT-权限"><a href="#2-5-添加-REPLICATION-CLIENT-权限" class="headerlink" title="2.5 添加 REPLICATION CLIENT 权限"></a>2.5 添加 REPLICATION CLIENT 权限</h4><p>根据备份的报错提示，需要REPLICATION CLIENT权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@private_server ~]<span class="comment"># mysqldump -ubackup -p123 --master-data=2 -B wordpress &gt; wordpress.sql</span></span><br><span class="line">mysqldump: Couldn<span class="string">&#x27;t execute &#x27;</span>SHOW MASTER STATUS<span class="string">&#x27;: Access denied; you need (at least one of) the SUPER,REPLICATION CLIENT privilege(s) for this operation (1227)</span></span><br></pre></td></tr></table></figure><p>给backup用户添加REPLICATION CLIENT权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT REPLICATION CLIENT ON *.* TO <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="2-6-添加-EVEN-权限"><a href="#2-6-添加-EVEN-权限" class="headerlink" title="2.6 添加 EVEN 权限"></a>2.6 添加 EVEN 权限</h4><p>备份是若要备份事件，即使用–events选项，则需要EVENT权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@private_server ~]<span class="comment"># mysqldump -ubackup -p123 --single-transaction --master-data=2 --events -B wordpress &gt; wordpress.sql</span></span><br><span class="line">mysqldump: Couldn<span class="string">&#x27;t execute &#x27;</span>show events<span class="string">&#x27;: Access denied for user &#x27;</span>backup<span class="string">&#x27;@&#x27;</span>localhost<span class="string">&#x27; to database &#x27;</span>wordpress<span class="string">&#x27; (1044)</span></span><br></pre></td></tr></table></figure><p>给backup用户添加EVENT权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT EVENT ON *.* TO <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="2-7-添加-TRIGGER-权限"><a href="#2-7-添加-TRIGGER-权限" class="headerlink" title="2.7 添加 TRIGGER 权限"></a>2.7 添加 TRIGGER 权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT TRIGGER ON *.* TO <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="3-查看backup用户的所有权限"><a href="#3-查看backup用户的所有权限" class="headerlink" title="3.查看backup用户的所有权限"></a>3.查看backup用户的所有权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [test2]&gt; SHOW GRANTS FOR <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Grants <span class="keyword">for</span> backup@localhost: GRANT SELECT, RELOAD, LOCK TABLES, REPLICATION CLIENT, SHOW VIEW, EVENT, TRIGGER ON *.* TO <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY PASSWORD <span class="string">&#x27;*23AE809DDACAF96AF0FD78ED04B6A265E05AA257&#x27;</span></span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>总结：一个mysql的备份用户需要以下权限：<strong>SELECT, RELOAD, LOCK TABLES, REPLICATION CLIENT, SHOW VIEW, EVENT, TRIGGER</strong>。</p><p>最终授权命令可以综合成一条：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT SELECT, RELOAD, LOCK TABLES, REPLICATION CLIENT, SHOW VIEW, EVENT, TRIGGER ON *.* TO <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> mysqldump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 半同步复制</title>
      <link href="posts/mysql-semisynchronous-replication/"/>
      <url>posts/mysql-semisynchronous-replication/</url>
      
        <content type="html"><![CDATA[<h3 id="一、半同步复制"><a href="#一、半同步复制" class="headerlink" title="一、半同步复制"></a>一、半同步复制</h3><h4 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h4><p>在半同步复制出现之前，虽然异步复制可以满足主从实例之间的数据同步，同时row 格式的binlog也能够大幅度避免主从实例的数据不一致的情况，但是如果碰到主库崩溃，写业务故障切换到从库，将从库提升为主库时，原来的主库上可能有一部分数据还没来得及被从库接收，而事实上这部分丢失的数据可能在主库上已经正常提交完成了。为解决这个问题，在MySQL 5.5版本中引入了半同步复制，半同步复制的关键改进就是当客户端在 主库上写入一个事务时，需要等待从库接收到主库的binlog，且主库接收到ACK确认之后，客户端才能收到事务成功提交的消息，如图</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/89a87f6517711.png" alt="mysql_semi-syn_rep-1.png"></p><p>这里有一个小细节需要注意：早期的半同步复制有一个缺陷，在正常的半同步复制流程中，当客户端对主库发起事务提交之后，主库发送binlog给从库，从库接收到binlog并返回ACK，然后主库返回事务提交成功的消息给发起提交的客户端。这里对于发起事务提交的客户端看起来没有任何问题，但实际上在早期的半同步复制中，主库在等待ACK 的InnoDB存储引擎内部已经提交事务，只是阻塞了返回给发起事务提交的客户端消息而已。此时如果有其他会话对该事务修改的数据进行查询，将会查询到最新数据，类似于下图</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/77514da9974d9.png" alt="mysql_semi-syn_rep-2.png"></p><p>该缺陷可能导致非发起数据提交的客户端在碰到主库故障转移时发生幻读，类似下图。User 1发起一个INSERT操作 写入一行数据，正在等待写入成功返回，此时User 2就可以在主库上查询到User 1插入的 数据，当主库发生故障，写业务切换到从库，而从库又没有收到User1写入的数据时，那 么此时对于User 1来说，会收到事务写入失败的信息，但对于User 2来说，之前在主库上能查询到的数据，切换到从库之后却发现查询不到了，就好像发生了幻读一样。</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/1d2aec7e9df9d.png" alt="mysql_semi-syn_rep-3.png"></p><h4 id="2-开启半同步复制"><a href="#2-开启半同步复制" class="headerlink" title="2.开启半同步复制"></a>2.开启半同步复制</h4><p><strong>主库配置：</strong></p><p>需要提前安装好semisync_master.so</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在主库上启用半同步复制插件</span></span><br><span class="line">rpl_semi_sync_master_enabled = 1</span><br><span class="line"><span class="comment">#等待从库发送 ACK 接收确认包的时间，如果时间超过1，则主库自动切换为异步复制。</span></span><br><span class="line">rpl_semi_sync_master_timeout = 1000</span><br></pre></td></tr></table></figure><p><strong>从库配置：</strong></p><p>需要提前安装好semisync_slave.so</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在从库上启用半同步复制插件</span></span><br><span class="line">rpl_semi_sync_slave_enabled = 1</span><br></pre></td></tr></table></figure><h4 id="3-半同步复制部署"><a href="#3-半同步复制部署" class="headerlink" title="3.半同步复制部署"></a>3.半同步复制部署</h4><p>半同步复制是基于异步复制的基础上，所以在开启半同步复制前，需要先部署好异步复制。</p><p>这异步复制的搭建详见：<a href="https://blog.wanhebin.com/posts/mysql-asynchronous-replication/">《MySQL 异步复制》</a></p><p>这里直接从已部署好异步复制的服务器上做半同步复制。</p><hr><p><strong>主库操作：</strong></p><ul><li>检查是否有动态支持</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global variables like <span class="string">&#x27;have_dynamic_loading&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>安装semisync_master.so插件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSTALL PLUGIN rpl_semi_sync_master SONAME <span class="string">&#x27;semisync_master.so&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>开启半同步复制</p><ul><li>临时生效</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET GLOBAL rpl_semi_sync_master_enabled = 1;</span><br><span class="line">mysql&gt; SET GLOBAL rpl_semi_sync_master_timeout = 1000;</span><br></pre></td></tr></table></figure><ul><li>永久生效（把配置卸载配置文件中，重启生效）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">rpl_semi_sync_master_enabled = 1</span><br><span class="line">rpl_semi_sync_master_timeout = 1000</span><br></pre></td></tr></table></figure></li><li><p>检查半同步复制是否开启</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&quot;%semi%&quot;</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>从库操作：</strong></p><ul><li>安装semisync_slave.so插件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="string">&#x27;semisync_slave.so&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>开启半同步复制</p><ul><li>临时生效</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET GLOBAL rpl_semi_sync_slave_enabled = 1;</span><br><span class="line"><span class="comment">#重启io线程使半同步复制生效</span></span><br><span class="line">mysql&gt; stop slave io_thread;</span><br><span class="line">mysql&gt; start slave io_thread;</span><br></pre></td></tr></table></figure><p><em>注意：如果I / O线程已经在运行，并且您没有重新启动它，则从服务器将继续使用异步复制。</em></p><ul><li>永久生效（把配置卸载配置文件中，重启生效）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">rpl_semi_sync_slave_enabled = 1</span><br></pre></td></tr></table></figure></li><li><p>检查半同步复制是否开启</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&quot;%semi%&quot;</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>检查半同步状态</strong></p><p>在主库上执行<code>show global status like &#39;rpl_semi%&#39;;</code>语句查看半同步的状态：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like <span class="string">&#x27;%semi%&#x27;</span>;</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Variable_name                              | Value |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Rpl_semi_sync_master_clients               | 1     |</span><br><span class="line">| Rpl_semi_sync_master_net_avg_wait_time     | 371   |</span><br><span class="line">| Rpl_semi_sync_master_net_wait_time         | 38649 |</span><br><span class="line">| Rpl_semi_sync_master_net_waits             | 104   |</span><br><span class="line">| Rpl_semi_sync_master_no_times              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_tx                 | 0     |</span><br><span class="line">| Rpl_semi_sync_master_status                | ON    |</span><br><span class="line">| Rpl_semi_sync_master_timefunc_failures     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_avg_wait_time      | 414   |</span><br><span class="line">| Rpl_semi_sync_master_tx_wait_time          | 43138 |</span><br><span class="line">| Rpl_semi_sync_master_tx_waits              | 104   |</span><br><span class="line">| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_sessions         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_yes_tx                | 104   |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="二、增强半同步复制"><a href="#二、增强半同步复制" class="headerlink" title="二、增强半同步复制"></a>二、增强半同步复制</h3><h4 id="1-原理-1"><a href="#1-原理-1" class="headerlink" title="1.原理"></a>1.原理</h4><p>从MySQL 5.7开始，Oracle MySQL 官方对半同步复制进行了增强，从字面“增强半同步复制”来看，增强半同步复制本质上就是对早期的半同步复制的缺陷进行一些修补增 强，而其原理与半同步复制并无差别。那么，增强半同步复制在早期的半同步复制的基础 上做了什么修改呢？</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/ba0223dae9ab9.png" alt="mysql_semi-syn_rep-4.png"></p><p>从图中方框标记的地方可以看到，Engine Commit逻辑下沉到了最后，也就是 说，在增强半同步复制下，一个事务在存储引擎内部提交之前，必须要先收到从库的 ACK确认，否则不进行事务最后的提交。这样一来，非发起事务提交的客户端在查询数 据时，所看到的数据就能够和发起事务提交的客户端保持一致，从而解决了在主库故障转 移之后可能出现的幻读问题。</p><h4 id="2-开启增强半同步复制"><a href="#2-开启增强半同步复制" class="headerlink" title="2.开启增强半同步复制"></a>2.开启增强半同步复制</h4><p><strong>主库配置：</strong></p><p>需要提前安装好semisync_master.so</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在主库上启用半同步复制插件</span></span><br><span class="line">rpl_semi_sync_master_enabled = 1</span><br><span class="line"><span class="comment">#在 rpl_semi_sync_master_timeout 超时周期内，如果连接主库的从库数量降到 0 值，主库仍然继续等待从库的接收确认包</span></span><br><span class="line">rpl_semi_sync_master_wait_no_slave = ON</span><br><span class="line"><span class="comment">#主库需要接收到多少个从库的 ACK 确认之后，主库的事务才进行提交。</span></span><br><span class="line">rpl_semi_sync_master_wait_for_slave_count = 1</span><br><span class="line"><span class="comment">#默认值是AFTER_SYNC。主库将每个事务写入binlog中，并将binlog sync 到磁盘。在 sync binlog 之后，主库等待从库该事务的 ack 确认。在收到任意一个从库的确认后，主人将在存储引擎层提交事务，并将事务提交结果返回给客户端</span></span><br><span class="line">rpl_semi_sync_master_wait_point = AFTER_SYNC</span><br></pre></td></tr></table></figure><p><strong>从库配置：</strong></p><p>与早期的半同步复制相比，从库无新增参数。需要提前安装好semisync_slave.so。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在从库上启用半同步复制插件</span></span><br><span class="line">rpl_semi_sync_slave_enabled = 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZABBIX 4.4安装部署</title>
      <link href="posts/zabbix-installation-and-deployment/"/>
      <url>posts/zabbix-installation-and-deployment/</url>
      
        <content type="html"><![CDATA[<h3 id="安装zabbix"><a href="#安装zabbix" class="headerlink" title="安装zabbix"></a>安装zabbix</h3><ul><li><strong>配置Zabbix的yum源仓库</strong></li></ul><p>安装一个Zabbix官方源仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p>改用官方源为阿里云镜像源：</p><p>由于官方源是国外的镜像仓库，速度非常慢，改用阿里云的镜像仓库会非常快。只需在官方源的repo文件中修改URL即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s@http://repo.zabbix.com@https://mirrors.aliyun.com/zabbix@g&#x27; /etc/yum.repos.d/zabbix.repo</span><br></pre></td></tr></table></figure><ul><li><strong>安装zabbix</strong></li></ul><p>安装Zabbix 服务端，web前端，客户端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br></pre></td></tr></table></figure><ul><li><strong>安装Zabbix前端软件包。</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y zabbix-web-mysql zabbix-nginx-conf</span><br></pre></td></tr></table></figure><h3 id="安装配置数据库"><a href="#安装配置数据库" class="headerlink" title="安装配置数据库"></a>安装配置数据库</h3><p>数据库这里使用mysql和mariadb都可以，此处以mariadb为例。</p><ul><li>安装mariadb</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y mariadb-server mariadb</span><br></pre></td></tr></table></figure><ul><li>启动mariadb</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure><ul><li>配置数据库</li></ul><p>创建数据库，数据库用户，并授权</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; create user zabbix@<span class="string">&#x27;127.0.0.1&#x27;</span> identified by <span class="string">&#x27;zabbix&#x27;</span>;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>导入zabbix的初始数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -pzabbix zabbix</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li>配置zabbix服务端<code>/etc/zabbix/zabbix_server.conf</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]<span class="comment"># vim /etc/zabbix/zabbix_server.conf</span></span><br><span class="line">DBHost=127.0.0.1</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=zabbix</span><br></pre></td></tr></table></figure><ul><li>编辑文件/etc/php-fpm.d/zabbix.conf，取消注释并设置正确的时区。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">把     ; php_value[date.timezone] = Europe/Riga</span><br><span class="line">修改为  php_value[date.timezone] = Asia/Shanghai</span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent nginx php-fpm</span><br><span class="line">systemctl <span class="built_in">enable</span> zabbix-server zabbix-agent nginx php-fpm</span><br></pre></td></tr></table></figure><ul><li>检查端口</li></ul><p>zabbix服务端端口为10051，客户端端口为10050</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]<span class="comment"># netstat -lnt | grep -E &#x27;10050|10051&#x27;</span></span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN     </span><br><span class="line">tcp6       0      0 :::10050                :::*                    LISTEN     </span><br><span class="line">tcp6       0      0 :::10051                :::*                    LISTEN  </span><br></pre></td></tr></table></figure><h3 id="配置Zabbix前端"><a href="#配置Zabbix前端" class="headerlink" title="配置Zabbix前端"></a>配置Zabbix前端</h3><p>前端Web界面地址：<a href="http://10.0.0.210/">http://10.0.0.210</a></p><ul><li><strong>安装界面配置</strong></li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/0827747ace8ab.png" alt="zabbix_install-1.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/dd2b212b2eb17.png" alt="zabbix_install-2.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/f64d51eb86296.png" alt="zabbix_install-3.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/9a7ec649a975a.png" alt="zabbix_install-4.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/38f8de7c0f22f.png" alt="zabbix_install-5.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/ba5eaa4459125.png" alt="zabbix_install-6.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/cdb9134b36f72.png" alt="zabbix_install-7.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/bacb67b035e86.png" alt="zabbix_install-8.png"></p><ul><li><strong>如果不习惯英文界面，可以修改为中文界面</strong></li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/ed3c41c2ebb58.png" alt="zabbix_install-9.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/8465d70999d5c.png" alt="zabbix_install-10.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/e7b35fdf44cb5.png" alt="zabbix_install-11.png"></p><p>到这里，Zabbix4.4就安装完成了。</p><h3 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h3><p>在zabbix设置中文显示后，监控图形的一些中文会显示乱码，这是由于linux系统无法识别造成的。</p><p>可以拷贝一份中文字体到zabbix服务的字符集目录下。</p><ul><li>在window 10系统<code>C:\Windows\Fonts</code>下随便选一个中文字体上传到zabbix-server的<code>/usr/share/zabbix/assets/fonts/</code>目录下（比如这里选用微软雅黑）</li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/3e51a22d4feba.png" alt="zabbix_install-12.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#备份原文件</span></span><br><span class="line">mv /usr/share/zabbix/assets/fonts/graphfont.ttf&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名中文字字符集文件</span></span><br><span class="line">mv msyh.ttc graphfont.ttf</span><br></pre></td></tr></table></figure><ul><li>刷新zabbix页面，对比修改前后效果</li></ul><p><strong>修改前</strong></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/bf3ce503ca864.png" alt="zabbix_install-13.png"></p><p><strong>修改后</strong></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/5b2585f67a36d.png" alt="zabbix_install-14.png"></p>]]></content>
      
      
      <categories>
          
          <category> ZABBIX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZABBIX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Cluster 介绍与实战</title>
      <link href="posts/redis-cluster-introduction-and-actual-combat/"/>
      <url>posts/redis-cluster-introduction-and-actual-combat/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Redis-Cluster-分布式分片集群"><a href="#一、Redis-Cluster-分布式分片集群" class="headerlink" title="一、Redis Cluster 分布式分片集群"></a>一、Redis Cluster 分布式分片集群</h2><h3 id="Redis-Cluster简介"><a href="#Redis-Cluster简介" class="headerlink" title="Redis Cluster简介"></a>Redis Cluster简介</h3><ul><li><p>Redis集群是一个可以在多个Redis节点之间进行数据共享的设施（installation）。</p></li><li><p>Redis集群不支持那些需要同时处理多个键的Redis命令，因为执行这些命令需要在多个Redis节点之间移动数据，并且在高负载的情况下，这些命令将降低Redis集群的性能，并导致不可预测的行为。</p></li><li><p>Redis集群通过分区（partition）来提供一定程度的可用性（availability）：即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。</p></li><li><p>Redis集群有将数据自动切分（split）到多个节点的能力。</p></li></ul><h3 id="Redis-Cluster中槽-slot-的概念"><a href="#Redis-Cluster中槽-slot-的概念" class="headerlink" title="Redis Cluster中槽(slot)的概念"></a>Redis Cluster中槽(slot)的概念</h3><ul><li><p>Redis Cluster中一共有16384个槽位，他们的编号为0、1、2、3……16382、16383，这些槽是虚拟的。</p></li><li><p>这些槽位会平均分配给Redis Cluster中的每个master节点，当有某个key被映射到某个master负责的槽，那么这个master负责为这个key提供服务。</p></li><li><p>当需要在redis集群中写入一个key -value的时候，会使用HASH_SLOT=CRC16(key) mod 16384之后的值，决定将key写入值哪一个槽位从而决定写入哪一个Redis节点上，从而有效解决单机瓶颈。</p></li><li><p>在Redis Cluster中，只有master才拥有槽的所有权，如果是某个master的slave，这个slave只负责槽的使用，但是没有所有权。</p></li></ul><h3 id="Redis-Cluster的特点"><a href="#Redis-Cluster的特点" class="headerlink" title="Redis Cluster的特点"></a>Redis Cluster的特点</h3><ul><li>解决了redis资源利用率的问题</li><li>所有Redis节点使用(PING机制)互联</li><li>在多分片节点中，将16384个槽位，均匀分布到多个分片节点中</li><li>存数据时，将key做crc16（key），然后和16384进行取模，得出槽位值（0-16383之间）</li><li>根据计算得出的槽位值，找到相对应的分片节点的主节点，存储到相应槽位上</li><li>如果客户端当时连接的节点不是将来要存储的分片节点，分片集群会将客户端连接切换至真正存储节点进行数据存储</li><li>在搭建集群时，会为每一个分片的主节点，对应一个从节点，实现slaveof功能，同时当主节点down，实现类似于sentinel的自动failover的功能。</li></ul><h3 id="Redis-Cluster运行机制"><a href="#Redis-Cluster运行机制" class="headerlink" title="Redis Cluster运行机制"></a>Redis Cluster运行机制</h3><ul><li>所有的redis节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。</li><li>节点的fail是通过集群中超过半数的master节点检测失效时才生效。</li><li>客户端与redis节点直连，不需要中间proxy层。客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。</li><li>redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster 负责维护node&lt;-&gt;slot&lt;-&gt;key</li></ul><h3 id="Redis-Cluster故障转移"><a href="#Redis-Cluster故障转移" class="headerlink" title="Redis Cluster故障转移"></a>Redis Cluster故障转移</h3><ul><li>在集群里面，节点会对其他节点进行下线检测。</li><li>当一个主节点下线时，集群里面的其他主节点负责对下线主节点进行故障移。</li><li>换句话说，集群的节点集成了下线检测和故障转移等类似 Sentinel 的功能。</li><li>因为 Sentinel 是一个独立运行的监控程序，而集群的下线检测和故障转移等功能是集成在节点里面的，它们的运行模式非常地不同，所以尽管这两者的功能很相似，但集群的实现没有重用 Sentinel 的代码。</li></ul><p>&nbsp;</p><h2 id="二、Redis-Cluster-分布式集群搭建"><a href="#二、Redis-Cluster-分布式集群搭建" class="headerlink" title="二、Redis Cluster 分布式集群搭建"></a>二、Redis Cluster 分布式集群搭建</h2><p>Redis Cluster 架构图：</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/25/76b5b847760a6.jpg" alt="redis-cluster-architecture.jpg"></p><h3 id="1-部署Redis-Cluster"><a href="#1-部署Redis-Cluster" class="headerlink" title="1.部署Redis Cluster"></a>1.部署Redis Cluster</h3><h4 id="环境规划"><a href="#环境规划" class="headerlink" title="环境规划"></a>环境规划</h4><table><thead><tr><th align="center">节点</th><th align="center">主机名</th><th align="center">IP</th><th align="center">端口</th></tr></thead><tbody><tr><td align="center">node1</td><td align="center">redis-01</td><td align="center">172.16.1.56</td><td align="center">6379, 6380</td></tr><tr><td align="center">node2</td><td align="center">redis-02</td><td align="center">172.16.1.57</td><td align="center">6379, 6380</td></tr><tr><td align="center">node3</td><td align="center">redis-03</td><td align="center">172.16.1.58</td><td align="center">6379, 6380</td></tr></tbody></table><h4 id="创建Redis工作目录"><a href="#创建Redis工作目录" class="headerlink" title="创建Redis工作目录"></a>创建Redis工作目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># mkdir -p /server/redis/&#123;6379,6380&#125;</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># mkdir -p /server/redis/&#123;6379,6380&#125;</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># mkdir -p /server/redis/&#123;6379,6380&#125;</span></span><br></pre></td></tr></table></figure><h4 id="配置每个Redis节点"><a href="#配置每个Redis节点" class="headerlink" title="配置每个Redis节点"></a>配置每个Redis节点</h4><ul><li>redis-01的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#6379实例的配置文件</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># vim /service/redis/6379/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.56 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6379/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6379/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6379&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">#6380实例的配置文件</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># vim /service/redis/6380/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.56 127.0.0.1</span><br><span class="line">port 6380</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6380/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6380/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6380&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br></pre></td></tr></table></figure><ul><li>redis-02的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#6379实例的配置文件</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># vim /service/redis/6379/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.57 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6379/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6379/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6379&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">#6380实例的配置文件</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># vim /service/redis/6380/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.57 127.0.0.1</span><br><span class="line">port 6380</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6380/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6380/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6380&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br></pre></td></tr></table></figure><ul><li>redis-03的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#6379实例的配置文件</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># vim /service/redis/6379/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.58 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6379/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6379/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6379&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">#6380实例的配置文件</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># vim /service/redis/6380/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.58 127.0.0.1</span><br><span class="line">port 6380</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6380/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6380/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6380&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br></pre></td></tr></table></figure><h4 id="启动每个节点的所有Redis实例"><a href="#启动每个节点的所有Redis实例" class="headerlink" title="启动每个节点的所有Redis实例"></a>启动每个节点的所有Redis实例</h4><ul><li>启动redis服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-server /server/redis/6379/redis.conf</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># redis-server /server/redis/6379/redis.conf</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># redis-server /server/redis/6379/redis.conf</span></span><br><span class="line"></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-server /server/redis/6380/redis.conf</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># redis-server /server/redis/6380/redis.conf</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># redis-server /server/redis/6380/redis.conf</span></span><br></pre></td></tr></table></figure><ul><li>查看端口，检查redis是否启动</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 6379]<span class="comment"># netstat -tln | grep -Ew &quot;6379|6380&quot;</span></span><br><span class="line">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 172.16.1.56:6379        0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 127.0.0.1:6380          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 172.16.1.56:6380        0.0.0.0:*               LISTEN </span><br></pre></td></tr></table></figure><h4 id="将所有节点加入集群"><a href="#将所有节点加入集群" class="headerlink" title="将所有节点加入集群"></a>将所有节点加入集群</h4><p>一共有node1、node2、node3这三个节点，其中每个节点有2个实例（6379、6380）。</p><ul><li>关联节点前，先查看每个redis节点信息</li></ul><p>此时所有机器集群中都只有自己一个节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">172.16.1.56:6379&gt; cluster nodes</span><br><span class="line">98d2d1e2f97607d52585ea041db4b0e90ce06769 :6379 myself,master - 0 0 0 connected</span><br></pre></td></tr></table></figure><ul><li>把所有节点加入集群（可以在任何一个redis实例中操作）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.56 6380</span><br><span class="line">OK</span><br><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.57 6379</span><br><span class="line">OK</span><br><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.57 6380</span><br><span class="line">OK</span><br><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.58 6379</span><br><span class="line">OK</span><br><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.58 6380</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>关联节点后，查看集群</li></ul><p>所有节点都成功加入了集群中，且每个节点都是master</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/352e0b2bae706.png" alt="redis_cluster-2.png"></p><h4 id="给集群中的节点做主从"><a href="#给集群中的节点做主从" class="headerlink" title="给集群中的节点做主从"></a>给集群中的节点做主从</h4><p><strong>主从规划：</strong></p><p>node1节点的6380实例作为node2节点的6379实例的从库。</p><p>node2节点的6380实例作为node3节点的6379实例的从库。</p><p>node3节点的6380实例作为node1节点的6379实例的从库。</p><p>这样任何一个节点宕机了，也能保证整个Redis Cluster 处于正常状态。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">主节点：172.16.1.56:6379、172.16.1.57:6379、172.16.1.58:6379</span><br><span class="line">从节点：172.16.1.56:6380、172.16.1.57:6380、172.16.1.58:6380</span><br></pre></td></tr></table></figure><ul><li>给每个主节点分配从节点</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在redis-01上操作</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6380 -h 172.16.1.56</span></span><br><span class="line">172.16.1.56:6380&gt; cluster replicate 6af845e7ff405845605a418f976184f343764d17</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#在redis-02上操作</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># redis-cli -p 6380 -h 172.16.1.57</span></span><br><span class="line">172.16.1.57:6380&gt; cluster replicate ae875d8a949e7ad62a3f5374db9de546afb6520d</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#在redis-03上操作</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># redis-cli -p 6380 -h 172.16.1.58</span></span><br><span class="line">172.16.1.58:6380&gt; cluster replicate 98d2d1e2f97607d52585ea041db4b0e90ce06769</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><em>注意：*</em><code>cluster replicate</code> 命令后的ID是器主库的ID号*<em>。</em></p><ul><li>主从分配成功后，查看集群</li></ul><p>集群中存在master和slave，说明主从分配完成。</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/7399754d75b38.png" alt="redis_cluster-3.png"></p><h4 id="给集群分配槽位"><a href="#给集群分配槽位" class="headerlink" title="给集群分配槽位"></a>给集群分配槽位</h4><p><strong>槽位规划：</strong></p><table><thead><tr><th>主机名</th><th>实例</th><th>槽位</th></tr></thead><tbody><tr><td>redis-01</td><td>172.16.1.56:6379</td><td>0 ~ 5460</td></tr><tr><td>redis-02</td><td>172.16.1.57:6379</td><td>5461 ~ 10921</td></tr><tr><td>redis-03</td><td>172.16.1.58:6379</td><td>10922 ~ 16383</td></tr></tbody></table><ul><li>执行命令，批量分配槽位</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 -h 172.16.1.56 cluster addslots &#123;0..5460&#125;</span></span><br><span class="line">OK</span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 -h 172.16.1.57 cluster addslots &#123;5461..10921&#125;</span></span><br><span class="line">OK</span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 -h 172.16.1.58 cluster addslots &#123;10922..16383&#125;</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><em>注意：槽位只分配给集群中的主节点</em></p><ul><li>查看槽位的分配信息</li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/e11be4826c59b.png" alt="redis_cluster-4.png"></p><ul><li>查看集群的状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">172.16.1.56:6379&gt; cluster info </span><br><span class="line">cluster_state:ok<span class="comment">#集群状态为 OK</span></span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:5</span><br><span class="line">cluster_my_epoch:3</span><br><span class="line">cluster_stats_messages_sent:22785</span><br><span class="line">cluster_stats_messages_received:22785</span><br></pre></td></tr></table></figure><p>到这里，Redis Cluster 分布式集群搭建完成。</p><h3 id="2-插入数据测试"><a href="#2-插入数据测试" class="headerlink" title="2.插入数据测试"></a>2.插入数据测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#插入一条数据，报错</span></span><br><span class="line">172.16.1.56:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">(error) MOVED 12706 172.16.1.58:6379<span class="comment">#报错：该key只能插入数据到12706槽位</span></span><br><span class="line"><span class="comment">#换一个值就可以插入</span></span><br><span class="line">172.16.1.56:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到槽位所在节点插入数据</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.58 -p 6379</span></span><br><span class="line">172.16.1.58:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用ASK协议连接，插入数据</span></span><br><span class="line">-c    启用群集模式（遵循-ASK和-MOVED重定向）</span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.56 -p 6379 -c</span></span><br><span class="line">172.16.1.56:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">-&gt; Redirected to slot [12706] located at 172.16.1.58:6379</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#大量数据插入测试</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># for i in &#123;1..10000&#125;;do redis-cli -p 6379 -h 172.16.1.56 -c set k_$&#123;i&#125; v_$&#123;i&#125;;done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看数据是否平均</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.56 -p 6379</span></span><br><span class="line">172.16.1.56:6379&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 3344</span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.57 -p 6379</span></span><br><span class="line">172.16.1.57:6379&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 3314</span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.58 -p 6379</span></span><br><span class="line">172.16.1.58:6379&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 3344</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="三、Redis-Cluster-集群管理操作（核心）"><a href="#三、Redis-Cluster-集群管理操作（核心）" class="headerlink" title="三、Redis Cluster 集群管理操作（核心）"></a>三、Redis Cluster 集群管理操作（核心）</h2><h3 id="1-安装集群管理插件"><a href="#1-安装集群管理插件" class="headerlink" title="1.安装集群管理插件"></a>1.安装集群管理插件</h3><h4 id="安装ruby插件"><a href="#安装ruby插件" class="headerlink" title="安装ruby插件"></a>安装ruby插件</h4><ul><li>安装ruby支持</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># yum install ruby rubygems -y</span></span><br></pre></td></tr></table></figure><ul><li>更换gem源</li></ul><p>查看当前的gem源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># gem source -l</span></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">http://rubygems.org/</span><br></pre></td></tr></table></figure><p>添加阿里云的gem源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># gem sources -a http://mirrors.aliyun.com/rubygems/</span></span><br><span class="line">http://mirrors.aliyun.com/rubygems/ added to <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>删除国外gem源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># gem sources  --remove https://rubygems.org/ </span></span><br><span class="line">https://rubygems.org/ removed from sources</span><br></pre></td></tr></table></figure><p>再次查看gem源，已经替换成阿里的了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># gem source -l</span></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">http://mirrors.aliyun.com/rubygems/</span><br></pre></td></tr></table></figure><ul><li>使用gem安装redis的ruby插件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># gem install redis -v 3.3.3</span></span><br><span class="line">Fetching: redis-3.3.3.gem (100%)</span><br><span class="line">Successfully installed redis-3.3.3</span><br><span class="line">Parsing documentation <span class="keyword">for</span> redis-3.3.3</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> redis-3.3.3</span><br><span class="line">1 gem installed</span><br></pre></td></tr></table></figure><h4 id="ruby插件使用说明"><a href="#ruby插件使用说明" class="headerlink" title="ruby插件使用说明"></a>ruby插件使用说明</h4><p>redis的ruby插件安装好后，redis就可以使用<code>redis-trib.rb</code>命令了。</p><p><strong>命令参数说明：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb help</span></span><br><span class="line">create       <span class="comment">#创建集群</span></span><br><span class="line">check        <span class="comment">#检查集群状态</span></span><br><span class="line">info         <span class="comment">#集群信息</span></span><br><span class="line">fix          <span class="comment">#修复集群</span></span><br><span class="line">reshard      <span class="comment">#迁移槽位</span></span><br><span class="line">rebalance    <span class="comment">#平衡槽位数量</span></span><br><span class="line">add-node <span class="comment">#添加节点</span></span><br><span class="line">del-node     <span class="comment">#删除节点</span></span><br><span class="line">set-timeout  <span class="comment">#设置超时时间</span></span><br><span class="line">1call        <span class="comment">#集群中机器批量执行命令</span></span><br><span class="line">1import      <span class="comment">#导入redis数据</span></span><br></pre></td></tr></table></figure><h3 id="2-添加新节点到Redis-Cluster"><a href="#2-添加新节点到Redis-Cluster" class="headerlink" title="2.添加新节点到Redis Cluster"></a>2.添加新节点到Redis Cluster</h3><p>在另外一台机新机器上，准备两个实例。（生产环境）</p><p>这里我就不新加服务器了，直接在redis-03上再添加2个实例（ <code>172.16.1.58:6381</code> 、<code>172.16.1.58:6382</code> ）。</p><h4 id="创建实例工作目录"><a href="#创建实例工作目录" class="headerlink" title="创建实例工作目录"></a>创建实例工作目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-03 ~]<span class="comment"># mkdir -p /service/redis/63&#123;81,82&#125;</span></span><br></pre></td></tr></table></figure><h4 id="配置两个实例"><a href="#配置两个实例" class="headerlink" title="配置两个实例"></a>配置两个实例</h4><ul><li>实例6381的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-03 ~]<span class="comment"># vim /service/redis/6381/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.58 127.0.0.1</span><br><span class="line">port 6381</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6381/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6381/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6381&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br></pre></td></tr></table></figure><ul><li>实例6382的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-03 ~]<span class="comment"># vim /service/redis/6382/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.58 127.0.0.1</span><br><span class="line">port 6382</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6382/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6382/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6382&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br></pre></td></tr></table></figure><h4 id="启动实例"><a href="#启动实例" class="headerlink" title="启动实例"></a>启动实例</h4><ul><li>启动6381和6382这2个实例</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-03 ~]<span class="comment"># redis-server /service/redis/6381/redis.conf </span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># redis-server /service/redis/6382/redis.conf</span></span><br></pre></td></tr></table></figure><ul><li>查看端口，检查是否启动成功</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-03 ~]<span class="comment"># netstat -tln | grep -Ew &quot;6381|6382&quot;</span></span><br><span class="line">tcp        0      0 127.0.0.1:6381          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 172.16.1.58:6381        0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 127.0.0.1:6382          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 172.16.1.58:6382        0.0.0.0:*               LISTEN </span><br></pre></td></tr></table></figure><h4 id="将新节点加入到集群中"><a href="#将新节点加入到集群中" class="headerlink" title="将新节点加入到集群中"></a>将新节点加入到集群中</h4><ul><li>添加实例到集群中</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.58 6381</span><br><span class="line">OK</span><br><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.58 6382</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>查看集群</li></ul><p>6381和6382这两个实例已经加入到集群中。</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/6686e18e31e9b.png" alt="redis_cluster-5.png"></p><h4 id="给新添加的节点分配主从"><a href="#给新添加的节点分配主从" class="headerlink" title="给新添加的节点分配主从"></a>给新添加的节点分配主从</h4><p>由于原来的集群主从节点已经分配好了，现在新加入2个实例，所以这里需要稍微改动下集群中的主从规划</p><p>改动信息为：<code>172.16.1.58:6380</code> 为 <code>172.16.1.58:6381</code> 的从库，<code>172.16.1.58:6382</code> 为 <code>172.16.1.56:6379</code> 的从库。</p><ul><li>给172.16.1.58:6380指定新的主节点为172.16.1.58:6381</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.58 -p 6380</span></span><br><span class="line">172.16.1.58:6380&gt; cluster replicate fe38fef7425262fd0a98ab494d31312f4d755fc5</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>给172.16.1.58:6382指定主节点为172.16.1.56:6379</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.58 -p 6382</span></span><br><span class="line">172.16.1.58:6382&gt; cluster replicate 98d2d1e2f97607d52585ea041db4b0e90ce06769</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>主从配置好后，查看集群</li></ul><p>6381和6382已经处于主从状态了</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/7424100319883.png" alt="redis_cluster-6.png"></p><h4 id="重新给集群分配槽位"><a href="#重新给集群分配槽位" class="headerlink" title="重新给集群分配槽位"></a>重新给集群分配槽位</h4><p>新节点加入集群后，发现 <code>172.16.1.58:6381</code> 节点并没有槽位，所以这里需要给它分配槽位。</p><ul><li>重新分片</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb reshard 172.16.1.58:6381</span></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 172.16.1.58:6381)</span><br><span class="line">M: fe38fef7425262fd0a98ab494d31312f4d755fc5 172.16.1.58:6381</span><br><span class="line">   slots: (0 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 98d2d1e2f97607d52585ea041db4b0e90ce06769 172.16.1.56:6379</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: ae875d8a949e7ad62a3f5374db9de546afb6520d 172.16.1.58:6379</span><br><span class="line">   slots:10922-16383 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: b77db6765e079f5b50cbd0c168cc4d3062208b15 172.16.1.57:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ae875d8a949e7ad62a3f5374db9de546afb6520d</span><br><span class="line">S: a0e86878dc86ce6ff49aa27fa82b246adf938fd5 172.16.1.58:6382</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 98d2d1e2f97607d52585ea041db4b0e90ce06769</span><br><span class="line">S: b91bd15633fc2b1d6d00c4d4ec405c3a9c6b5863 172.16.1.58:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates fe38fef7425262fd0a98ab494d31312f4d755fc5</span><br><span class="line">S: 208c6db915517ea7424acfca94f382eb7cf254d8 172.16.1.56:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6af845e7ff405845605a418f976184f343764d17</span><br><span class="line">M: 6af845e7ff405845605a418f976184f343764d17 172.16.1.57:6379</span><br><span class="line">   slots:5461-10921 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"><span class="comment">#你想要转移多少slot(槽位)到新节点</span></span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 4096</span><br><span class="line"><span class="comment">#哪个节点接收这些槽位？ID</span></span><br><span class="line">What is the receiving node ID? fe38fef7425262fd0a98ab494d31312f4d755fc5</span><br><span class="line">Please enter all the <span class="built_in">source</span> node IDs.</span><br><span class="line">  Type <span class="string">&#x27;all&#x27;</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</span><br><span class="line">  Type <span class="string">&#x27;done&#x27;</span> once you entered all the <span class="built_in">source</span> nodes IDs.</span><br><span class="line"><span class="comment">#哪个节点接收这些槽位？ID</span></span><br><span class="line">Source node <span class="comment">#1:all</span></span><br><span class="line"><span class="comment">#是否确认分片计划?</span></span><br><span class="line">Do you want to proceed with the proposed reshard plan (yes/no)?yes</span><br></pre></td></tr></table></figure><ul><li>分片完成后，检查下槽位</li></ul><p>使用<code>redis-trib.rb</code>命令查看槽位</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb info 172.16.1.58:6381</span></span><br><span class="line">172.16.1.58:6381 (fe38fef7...) -&gt; 2517 keys | 4096 slots | 1 slaves.</span><br><span class="line">172.16.1.56:6379 (98d2d1e2...) -&gt; 2498 keys | 4096 slots | 1 slaves.</span><br><span class="line">172.16.1.58:6379 (ae875d8a...) -&gt; 2502 keys | 4096 slots | 1 slaves.</span><br><span class="line">172.16.1.57:6379 (6af845e7...) -&gt; 2485 keys | 4096 slots | 1 slaves.</span><br><span class="line">[OK] 10002 keys <span class="keyword">in</span> 4 masters.</span><br><span class="line">0.61 keys per slot on average.</span><br></pre></td></tr></table></figure><p>也可以通过查看集群方式查看槽位</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/ec4ae457f27ef.png" alt="redis_cluster-7.png"></p><h3 id="3-删除Redis-Cluster中的节点"><a href="#3-删除Redis-Cluster中的节点" class="headerlink" title="3.删除Redis Cluster中的节点"></a>3.删除Redis Cluster中的节点</h3><p>删除集群中的节点，需要移除它的槽位（如果是主节）。并重新给集群分配槽位</p><h4 id="重新分片"><a href="#重新分片" class="headerlink" title="重新分片"></a>重新分片</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb reshard 172.16.1.58:6381</span></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 172.16.1.58:6381)</span><br><span class="line">M: fe38fef7425262fd0a98ab494d31312f4d755fc5 172.16.1.58:6381</span><br><span class="line">   slots:0-1364,5461-6825,10922-12287 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 98d2d1e2f97607d52585ea041db4b0e90ce06769 172.16.1.56:6379</span><br><span class="line">   slots:1365-5460 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: ae875d8a949e7ad62a3f5374db9de546afb6520d 172.16.1.58:6379</span><br><span class="line">   slots:12288-16383 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: b77db6765e079f5b50cbd0c168cc4d3062208b15 172.16.1.57:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ae875d8a949e7ad62a3f5374db9de546afb6520d</span><br><span class="line">S: a0e86878dc86ce6ff49aa27fa82b246adf938fd5 172.16.1.58:6382</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 98d2d1e2f97607d52585ea041db4b0e90ce06769</span><br><span class="line">S: b91bd15633fc2b1d6d00c4d4ec405c3a9c6b5863 172.16.1.58:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates fe38fef7425262fd0a98ab494d31312f4d755fc5</span><br><span class="line">S: 208c6db915517ea7424acfca94f382eb7cf254d8 172.16.1.56:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6af845e7ff405845605a418f976184f343764d17</span><br><span class="line">M: 6af845e7ff405845605a418f976184f343764d17 172.16.1.57:6379</span><br><span class="line">   slots:6826-10921 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"><span class="comment">#移动多少槽位</span></span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 4096</span><br><span class="line"><span class="comment">#接收槽位的节点ID   (这里随便选择一个除6382之外的master就可以)</span></span><br><span class="line">What is the receiving node ID? 98d2d1e2f97607d52585ea041db4b0e90ce06769</span><br><span class="line">Please enter all the <span class="built_in">source</span> node IDs.</span><br><span class="line">  Type <span class="string">&#x27;all&#x27;</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</span><br><span class="line">  Type <span class="string">&#x27;done&#x27;</span> once you entered all the <span class="built_in">source</span> nodes IDs.</span><br><span class="line"><span class="comment">#源节点的ID      (这里选择172.16.1.58:6381的ID)</span></span><br><span class="line">Source node <span class="comment">#1:fe38fef7425262fd0a98ab494d31312f4d755fc5</span></span><br><span class="line"><span class="comment">#结束</span></span><br><span class="line">Source node <span class="comment">#2:done</span></span><br><span class="line"><span class="comment">#是否确认分片计划</span></span><br><span class="line">Do you want to proceed with the proposed reshard plan (yes/no)? yes</span><br></pre></td></tr></table></figure><h4 id="平衡槽位"><a href="#平衡槽位" class="headerlink" title="平衡槽位"></a>平衡槽位</h4><ul><li>平衡前，先查看槽位信息</li></ul><p>发现 <code>172.16.1.58:6381</code> 节点没有槽位</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/2580ca91fe688.png" alt="redis_cluster-8.png"></p><p>查看其他节点的槽位大小，<code>172.16.1.56:6379</code>  最大有8192个槽位，其他两个节点都是4096个槽位。</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/2faad217861ab.png" alt="redis_cluster-9.png"></p><ul><li>使用<code>redis-trib.rb rebalance</code>命令给这3个节点平均分配槽位</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb rebalance 172.16.1.56:6379</span></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 172.16.1.56:6379)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">&gt;&gt;&gt; Rebalancing across 3 nodes. Total weight = 3</span><br><span class="line">Moving 1366 slots from 172.16.1.56:6379 to 172.16.1.58:6379</span><br><span class="line"><span class="comment">############################################################################.......</span></span><br><span class="line">Moving 1365 slots from 172.16.1.56:6379 to 172.16.1.57:6379</span><br><span class="line"><span class="comment">############################################################################.......</span></span><br></pre></td></tr></table></figure><ul><li>平衡槽位后，在查看槽位大小</li></ul><p>发现这3个主节点的槽位大小基本相等了。</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/4c90d06218337.png" alt="redis_cluster-10.png"></p><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>先查看6381（主节点）和6382（从节点）节点的ID信息，在进行删除。</p><ul><li>查看节点状态，获取ID号</li></ul><p>主节点：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 cluster nodes | grep master</span></span><br><span class="line">fe38fef7425262fd0a98ab494d31312f4d755fc5 172.16.1.58:6381 master - 0 1594383787509 11 connected</span><br><span class="line">ae875d8a949e7ad62a3f5374db9de546afb6520d 172.16.1.58:6379 master - 0 1594383788516 13 connected 0-1365 12288-16383</span><br><span class="line">6af845e7ff405845605a418f976184f343764d17 172.16.1.57:6379 master - 0 1594383788516 14 connected 1366-2730 6826-10921</span><br><span class="line">98d2d1e2f97607d52585ea041db4b0e90ce06769 172.16.1.56:6379 myself,master - 0 0 12 connected 2731-6825 10922-12287</span><br></pre></td></tr></table></figure><p>从节点：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 cluster nodes | grep slave</span></span><br><span class="line">a0e86878dc86ce6ff49aa27fa82b246adf938fd5 172.16.1.58:6382 slave 98d2d1e2f97607d52585ea041db4b0e90ce06769 0 1594383794053 12 connected</span><br><span class="line">b91bd15633fc2b1d6d00c4d4ec405c3a9c6b5863 172.16.1.58:6380 slave 98d2d1e2f97607d52585ea041db4b0e90ce06769 0 1594383792036 12 connected</span><br><span class="line">208c6db915517ea7424acfca94f382eb7cf254d8 172.16.1.56:6380 slave 6af845e7ff405845605a418f976184f343764d17 0 1594383792539 14 connected</span><br><span class="line">b77db6765e079f5b50cbd0c168cc4d3062208b15 172.16.1.57:6380 slave ae875d8a949e7ad62a3f5374db9de546afb6520d 0 1594383794053 13 connected</span><br></pre></td></tr></table></figure><ul><li>删除172.16.1.58:6381和172.16.1.58:6382两个节点</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除主节点</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb del-node 172.16.1.58:6381 fe38fef7425262fd0a98ab494d31312f4d755fc5</span></span><br><span class="line">&gt;&gt;&gt; Removing node fe38fef7425262fd0a98ab494d31312f4d755fc5 from cluster 172.16.1.58:6381</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; SHUTDOWN the node.</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除从节点</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb del-node 172.16.1.58:6382 a0e86878dc86ce6ff49aa27fa82b246adf938fd5</span></span><br><span class="line">&gt;&gt;&gt; Removing node a0e86878dc86ce6ff49aa27fa82b246adf938fd5 from cluster 172.16.1.58:6382</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; SHUTDOWN the node.</span><br></pre></td></tr></table></figure><ul><li>查看集群，确认节点是否删除</li></ul><p>发现172.16.1.58:6381和172.16.1.58:6382两个节点已经不存在于集群中了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 cluster nodes</span></span><br><span class="line">ae875d8a949e7ad62a3f5374db9de546afb6520d 172.16.1.58:6379 master - 0 1594384104291 13 connected 0-1365 12288-16383</span><br><span class="line">6af845e7ff405845605a418f976184f343764d17 172.16.1.57:6379 master - 0 1594384103285 14 connected 1366-2730 6826-10921</span><br><span class="line">b91bd15633fc2b1d6d00c4d4ec405c3a9c6b5863 172.16.1.58:6380 slave 98d2d1e2f97607d52585ea041db4b0e90ce06769 0 1594384103788 12 connected</span><br><span class="line">208c6db915517ea7424acfca94f382eb7cf254d8 172.16.1.56:6380 slave 6af845e7ff405845605a418f976184f343764d17 0 1594384102780 14 connected</span><br><span class="line">b77db6765e079f5b50cbd0c168cc4d3062208b15 172.16.1.57:6380 slave ae875d8a949e7ad62a3f5374db9de546afb6520d 0 1594384102277 13 connected</span><br><span class="line">98d2d1e2f97607d52585ea041db4b0e90ce06769 172.16.1.56:6379 myself,master - 0 0 12 connected 2731-6825 10922-12287</span><br></pre></td></tr></table></figure><h3 id="4-修复槽位分配故障"><a href="#4-修复槽位分配故障" class="headerlink" title="4.修复槽位分配故障"></a>4.修复槽位分配故障</h3><p>再给槽位进行重新分片时，由于意外导致分片中断，这样很可能造成槽位分配失败，集群出现故障。</p><h4 id="模拟故障"><a href="#模拟故障" class="headerlink" title="模拟故障"></a>模拟故障</h4><ul><li>执行从新分片操作时，在输入yes后，Ctrl + c 强制终止</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb reshard 172.16.1.51:6379</span></span><br></pre></td></tr></table></figure><ul><li>然后使用<code>redis-trib-rb check</code>检查集群</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb check 172.16.1.51:6379</span></span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">[WARNING] Node 172.16.1.56:6379 has slots <span class="keyword">in</span> importing state (52).</span><br><span class="line">[WARNING] Node 172.16.1.58:6379 has slots <span class="keyword">in</span> migrating state (52).</span><br><span class="line">[WARNING] The following slots are open: 52</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br></pre></td></tr></table></figure><p>检查后，发现52槽位出现问题。</p><h4 id="修复故障"><a href="#修复故障" class="headerlink" title="修复故障"></a>修复故障</h4><ul><li>使用<code>redis-trib.rb fix</code>命令修复槽位</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb fix 172.16.1.56:6379</span></span><br></pre></td></tr></table></figure><ul><li>再次检查集群，发现故障已经被修复</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 异步复制</title>
      <link href="posts/mysql-asynchronous-replication/"/>
      <url>posts/mysql-asynchronous-replication/</url>
      
        <content type="html"><![CDATA[<h3 id="一、异步复制原理"><a href="#一、异步复制原理" class="headerlink" title="一、异步复制原理"></a>一、异步复制原理</h3><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/6c8061a72a50f.jpg" alt="mysql-async-repl-arch.jpg"></p><ul><li><p>主库有一个线程：binlog dump线程。</p></li><li><p>从库有两个线程：IO线程、SQL线程。</p></li></ul><hr><h4 id="1-异步复制原理"><a href="#1-异步复制原理" class="headerlink" title="1.异步复制原理"></a>1.异步复制原理</h4><ul><li><p>用户对数据的修改进行提交，然后Master（主库）把所有数据库的变更写进binlog中，主库线程binlog dump把binlog内容推送给Slave（从库）。</p><blockquote><p><strong>注意</strong>：</p><p><em>启动复制通道后，第一次是从库告诉主库要从哪个位置点或者gtid位执行，然后主库启动一个dump线程，向从库推数据。</em></p></blockquote></li><li><p>从库I/O线程读取主库上的binlog信息，并把binlog写到本地中继日志 （relay log）中。</p></li><li><p>从库SQL线程读取并解析ralay log内容，按照主库中的提交顺序进行事务回放，写 入本地数据文件中，这样就实现了数据在主从实例之间的同步。</p></li></ul><blockquote><p><strong>注意</strong>：</p><p>主库在写入binlog并落盘之后，通知dump线程有新的 binlog 产生，并发送到从库中。然后主库并不理会从库是否接收到binlog，而是自顾自地照常进行事务的提交，如下图。</p></blockquote><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/7d39390f084f6.png" alt="mysql_async_rep.png"></p><hr><h4 id="2-异步复制过程"><a href="#2-异步复制过程" class="headerlink" title="2.异步复制过程"></a>2.异步复制过程</h4><ul><li>从库通过执行change master to 语句连接主库，提供了连接的用户一切条件（user 、password、port、ip），并且让从库知道，二进制日志的起点位置（file名 position 号）； 然后start slave启动从库线程。</li><li>从库的IO线程和主库的dump线程建立连接。</li><li>从库根据change master to 语句提供的file名和position号，IO线程向主库发起binlog的请求。</li><li>主库dump线程根据从库的请求，将本地binlog以events的方式推送给从库IO线程。</li><li>从库IO线程接收binlog events，并存放到本地relay-log中，传送过来的信息，会记录到master.info中</li><li>从库SQL线程应用relay-log，并且把应用过的记录到relay-log.info中，默认情况下，已经应用过的relay 会自动被清理purge</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">master.info：用于保存从库的I/O线程连接主库的连接状态、账号、IP地址、端口、密码，以及I/O线程当前读取主库binlog的文件和位置 信息（称为I/O线程信息日志）。</span><br><span class="line"></span><br><span class="line">relay-log.info：当从库的I/O线程从主库获取 到最新的binlog事件信息后会先写入从库本地的relay <span class="built_in">log</span>中，然后SQL线程再去读取relay <span class="built_in">log</span>解析并重放。relay-log.info就是用于记录最新的 relay <span class="built_in">log</span>的文件和位置，以及SQL线程当前重放的事件对应的主库binlog的文件和位置信息 的（SQL线程位置被称为SQL线程信息日志）。</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="二、异步复制搭建"><a href="#二、异步复制搭建" class="headerlink" title="二、异步复制搭建"></a>二、异步复制搭建</h3><h4 id="1-主库配置"><a href="#1-主库配置" class="headerlink" title="1.主库配置"></a>1.主库配置</h4><p>1.1 修改主库配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip_name_resolve = ON</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">basedir = /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">datadir = /usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line">log_bin = mysql-bin<span class="comment">#开启binlog</span></span><br><span class="line">server_id = 1<span class="comment">#该参数在同一个复制架构中需要保持唯一</span></span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">socket = /tmp/mysql.sock</span><br></pre></td></tr></table></figure><p>1.2 在主库授权一个用户，用与从库连接主库‘</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to rep@<span class="string">&#x27;172.16.1.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><p>1.3 查看主库的binlog信息，从库连接主库时需要用到。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000002 |      326 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="2-从库配置"><a href="#2-从库配置" class="headerlink" title="2.从库配置"></a>2.从库配置</h4><p>2.1 修改配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip_name_resolve = ON</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">basedir = /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">datadir = /usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line">server_id = 2<span class="comment">#该参数在同一个复制架构中需要保持唯一</span></span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">socket = /tmp/mysql.sock</span><br></pre></td></tr></table></figure><p>2.2 从主库的备份同步主库数据（为了保证主库、从库数据一致，可省略）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 &lt; master.sql</span></span><br></pre></td></tr></table></figure><p>2.3 登录从库，执行change master to 语句</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql &gt; change master to </span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000002&#x27;</span>,</span><br><span class="line">master_log_pos=326;</span><br></pre></td></tr></table></figure><p>2.4 启动从库线程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><p>2.4 查看从库IO线程和SQL线程是否正常</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 -e &quot;show slave status\G&quot; | grep -Ew &quot;Slave_(IO|SQL)_Running&quot;</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="三、主从故障处理"><a href="#三、主从故障处理" class="headerlink" title="三、主从故障处理"></a>三、主从故障处理</h3><h4 id="1-IO线程故障"><a href="#1-IO线程故障" class="headerlink" title="1.IO线程故障"></a>1.IO线程故障</h4><ul><li>IO线程为Connecting状态  </li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 -e &quot;show slave status\G&quot; | grep -Ew &quot;Slave_IO_Running&quot;</span></span><br><span class="line">             Slave_IO_Running: Connecting</span><br></pre></td></tr></table></figure><ul><li>IO线程为No状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 -e &quot;show slave status\G&quot; | grep -Ew &quot;Slave_IO_Running&quot;</span></span><br><span class="line">             Slave_IO_Running: No</span><br></pre></td></tr></table></figure><p><strong>出现这2种状态的故障一般有以下几种原因：</strong></p><p>1.从库与主库的网络不通</p><p>2.主库的mysql服务没有启动</p><p>3.从库在执行change master to语句时，配置有问题</p><p>4.从库在连接主库的数据库时，IP被反向解析成了主机名</p><p>5.开启了防火墙，并未对mysql服务、端口放行</p><h4 id="2-SQL线程故障"><a href="#2-SQL线程故障" class="headerlink" title="2.SQL线程故障"></a>2.SQL线程故障</h4><ul><li>SQL线程为No状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 -e &quot;show slave status\G&quot; | grep -Ew &quot;Slave_SQL_Running&quot;</span></span><br><span class="line">            Slave_SQL_Running: No</span><br></pre></td></tr></table></figure><p><strong>SQL线程出现故障的原因一般都是主库和从库数据不一致：</strong></p><p>1.主库有数据，从库没有<br>2.从库有数据，主库没有<br>3.主库与从库数据库结构不一致</p><p><strong>SQL线程故障解决方法：</strong></p><p><strong>方法一</strong>：让从库跳过下一个event记录</p><p>1.停止从库SQL线程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; stop slave sql_thread;</span><br></pre></td></tr></table></figure><p>2.跳过下一个event记录（错误的event）</p><p>若有N个错的的events，可以跳过N个events</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global sql_slave_skip_counter=1;</span><br></pre></td></tr></table></figure><p>3.启动SQL线程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave sql_thread;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：跳过错误代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">slave_skip_errors=1107,1032,1062</span><br></pre></td></tr></table></figure><p><strong>方法三</strong>：重新同步主库数据、重做从库（同步数据前，从库环境要纯净）</p><p>&nbsp;</p><h3 id="四、延时从库"><a href="#四、延时从库" class="headerlink" title="四、延时从库"></a>四、延时从库</h3><h4 id="1-对已经为从库的数据库做延时从库"><a href="#1-对已经为从库的数据库做延时从库" class="headerlink" title="1.对已经为从库的数据库做延时从库"></a>1.对已经为从库的数据库做延时从库</h4><ul><li>停止从库的IO、SQL线程</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; stop slave;</span><br></pre></td></tr></table></figure><ul><li>执行change master to 语句，配置延迟从库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; change master to master_delay=3600;</span><br></pre></td></tr></table></figure><ul><li>启动从库线程</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><ul><li>查看从库的状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">                    SQL_Delay: 3600<span class="comment">#延时从库延时的时间</span></span><br><span class="line">          SQL_Remaining_Delay: NULL <span class="comment">#执行语句倒计时，如果主库没有操作，为NULL</span></span><br></pre></td></tr></table></figure><h4 id="2-对新数据配置延迟从库"><a href="#2-对新数据配置延迟从库" class="headerlink" title="2.对新数据配置延迟从库"></a>2.对新数据配置延迟从库</h4><ul><li>修改配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">server_id=3</span><br></pre></td></tr></table></figure><ul><li>从主库的备份同步主库数据（为了保证主库、从库数据一致，可省略）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 &lt; master.sql</span></span><br></pre></td></tr></table></figure><ul><li>在从库执行change master to 语句，配置延迟从库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql &gt; change master to </span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000002&#x27;</span>,</span><br><span class="line">master_log_pos=326,</span><br><span class="line">master_delay=3600;</span><br></pre></td></tr></table></figure><ul><li>启动从库线程</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><ul><li>查看从库的状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">                    SQL_Delay: 3600<span class="comment">#延时从库延时的时间</span></span><br><span class="line">          SQL_Remaining_Delay: NULL <span class="comment">#执行语句倒计时，如果主库没有操作，为NULL</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="五、过滤复制"><a href="#五、过滤复制" class="headerlink" title="五、过滤复制"></a>五、过滤复制</h3><p>过滤复制其实就是在从库或者主库，配置白名单、黑名单，只针对某些库、表进行复制。</p><h4 id="1-过滤复制的方式"><a href="#1-过滤复制的方式" class="headerlink" title="1.过滤复制的方式"></a>1.过滤复制的方式</h4><ul><li><strong>白名单：只执行白名单中列出的库或者表的binlog</strong></li></ul><p>配置方法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只同步test1库</span></span><br><span class="line">replicate_do_db=test1</span><br><span class="line"><span class="comment">#只同步test1库下面的tb1表</span></span><br><span class="line">replicate_do_table=test1.tb1</span><br><span class="line"><span class="comment">#同步test1库下面的t开头的所有表（支持通配符）</span></span><br><span class="line">replicate_wild_do_table=test.t*</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果需要同步多个库，则可以用逗号隔开，如：test1,test2,test3</span></span><br><span class="line"><span class="comment">#也可以写多条配置。</span></span><br></pre></td></tr></table></figure><ul><li><strong>黑名单：不执行黑名单中列出的库或者表的binlog</strong></li></ul><p>配置方法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不同步test2库</span></span><br><span class="line">replicate_ignore_db=test2</span><br><span class="line"><span class="comment">#不同步test2库下面的tb2表</span></span><br><span class="line">replicate_ignore_table=test2.tb2</span><br><span class="line"><span class="comment">#不同步test2库下面的t开头的所有表（支持通配符）</span></span><br><span class="line">replicate_wild_ignore_table=test2.t*</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果需要指定多个库，则可以用逗号隔开，如：test1,test2,test3</span></span><br><span class="line"><span class="comment">#也可以写多条配置。</span></span><br></pre></td></tr></table></figure><h4 id="2-在主库配置过滤复制"><a href="#2-在主库配置过滤复制" class="headerlink" title="2.在主库配置过滤复制"></a>2.在主库配置过滤复制</h4><p>在主库配置过滤复制后，从库的IO线程只会读取主库的白名单内或黑名单外的库或表的binlog（即：主库的dump线程只会推送白名单内或黑名单外的表库的binlog给从库）。</p><ul><li>给主库配置白名单</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">replicate_do_db=yxlm</span><br></pre></td></tr></table></figure><p>保存并重启数据库</p><ul><li>查看主库状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000007 |      120 | yxlm         |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>在Binlog_Do_DB看到只同步yxlm库.</p><p>在数据中新建一些库、表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table yxlm.hsmg(id int);</span><br><span class="line">mysql&gt; create database db_test1;</span><br><span class="line">mysql&gt; create database db_test2;</span><br></pre></td></tr></table></figure><ul><li>去从库查看数据库信息</li></ul><p>看到在主库执行的三条语句当中，只有第一条同步了过来。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">| yxlm               |</span><br><span class="line">+--------------------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use yxlm</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_yxlm |</span><br><span class="line">+----------------+</span><br><span class="line">| hsmg           |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>查看从库中继日志：</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/39963800c6c0e.png" alt="mysql_master_slave-1.png">从中继日志中，确实发现只记录了<code>create table yxlm.hsmg(id int)</code>语句。</p><h4 id="3-在从库配置过滤复制"><a href="#3-在从库配置过滤复制" class="headerlink" title="3.在从库配置过滤复制"></a>3.在从库配置过滤复制</h4><p>在从库配置过滤复制后，从库的IO线程会读取主库的白名单内或黑名单外的所有库或表的binlog，但是从库的SQL线程只执行白名单内或黑名单外的所有库或表的binlog。</p><ul><li>在主库创建几个新库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database jdqs;</span><br><span class="line">mysql&gt; create database lol;</span><br></pre></td></tr></table></figure><ul><li>给从库配置白名单</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">replicate_do_db=jdqs,lol</span><br></pre></td></tr></table></figure><p>查看从库的主从状态：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: jdqs,lol</span><br></pre></td></tr></table></figure><ul><li>再次在主库创建一些库和表</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table jdqs.yafu(id int);</span><br><span class="line">mysql&gt; create table lol.cjzd(id int);</span><br><span class="line">mysql&gt; create database new_test1;</span><br><span class="line">mysql&gt; create database new_test2;</span><br></pre></td></tr></table></figure><p>查看从库数据库信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| jdqs               |</span><br><span class="line">| lol                |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use lol</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+---------------+</span><br><span class="line">| Tables_in_lol |</span><br><span class="line">+---------------+</span><br><span class="line">| hsmg          |</span><br><span class="line">+---------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use jdqs</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_jdqs |</span><br><span class="line">+----------------+</span><br><span class="line">| yafu           |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>从结果来看，new_test1库和new_test2库并没有创建。</p><p>在查看下从库的binlog日志：</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/8b74647e5b35a.png" alt="mysql_master_slave-2.png"></p><p>发现在主库执行的4条SQL，从库中继日志中都记录了下来。</p><p>但因为在从库设置了白名单，所以SQL线程只重写了前2行SQL命令。</p><h4 id="4-过滤复制总结"><a href="#4-过滤复制总结" class="headerlink" title="4.过滤复制总结"></a>4.过滤复制总结</h4><ul><li><strong>在主库配置时：</strong></li></ul><p>1.配置白名单：主库只将白名单配置的库相关语句记录到binlog<br>2.配置黑名单：主库只不记录黑名单配置的库相关语句到binlog</p><ul><li><strong>在从库配置时：</strong></li></ul><p>1.配置白名单：IO线程将主库数据拿到relay-log，但是SQL线程只执行白名单设置的库相关语句<br>2.配置黑名单：IO线程将主库数据拿到relay-log，但是SQL线程不执行黑名单设置的库相关语句</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 高可用架构之 MHA</title>
      <link href="posts/mysql-high-availability-architecture-mha/"/>
      <url>posts/mysql-high-availability-architecture-mha/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MHA高可用介绍"><a href="#一、MHA高可用介绍" class="headerlink" title="一、MHA高可用介绍"></a>一、MHA高可用介绍</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>​        MHA（Master HA）是一款开源的MySQL的高可用程序，它为MySQL主从复制架构提供了automating master failover 功能。MHA在监控到master节点故障时，会提升其中拥有最新数据的slave节点成为新的master节点，在此期间，MHA会通过与其它从节点获取额外信息来避免一致性方面的问题。MHA还提供了master节点的在线切换功能，即按需切换master/slave节点。</p><p>​        MHA 是由日本人 yoshinorim（原就职于DeNA现就职于FaceBook）开发的比较成熟的 MySQL 高可用方案。MHA 能够在30秒内实现故障切换，并能在故障切换中，最大可能的保证数据一致性。目前淘宝也正在开发相似产品 TMHA， 目前已支持一主一从。</p><h3 id="2-MHA工作原理"><a href="#2-MHA工作原理" class="headerlink" title="2.MHA工作原理"></a>2.MHA工作原理</h3><p>​        当Master出现故障时，通过对比slave之间I/O线程读取master binlog的位置，选取最接近的slave做为 latest slave。 其它slave通过与latest slave对比生成差异中继日志。在latest slave上应用从master保存的binlog，同时将latest slave提升为master。最后在其它slave上应用相应的差异中继日志并开始从新的master开始复制。<br>在MHA实现Master故障切换过程中，MHA Node会试图访问故障的master（通过SSH），如果可以访问（不是硬件故障，比如InnoDB数据文件损坏等），会保存二进制文件，以最大程度保 证数据不丢失。MHA和半同步复制一起使用会大大降低数据丢失的危险。</p><p><img src="https://pic-cdn.wanhebin.com/2021/04/25/7d5a1a7258ce1.jpg" alt="mysql_mha_principle.jpg"></p><p>MHA工作原理总结为以下几条：<br>（1） 从宕机崩溃的 master 保存二进制日志事件（binlog events）；<br>（2） 识别含有最新更新的 slave ；<br>（3） 应用差异的中继日志(relay log) 到其他 slave ；<br>（4） 应用从 master 保存的二进制日志事件(binlog events)；<br>（5） 提升一个 slave 为新 master ；<br>（6） 使用其他的 slave 连接新的 master 进行复制。</p><p>&nbsp;</p><h2 id="二、MHA高可用架构"><a href="#二、MHA高可用架构" class="headerlink" title="二、MHA高可用架构"></a>二、MHA高可用架构</h2><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><ul><li>MHA是C/S架构</li><li>整个MHA集群中所有服务器都要安装node节点</li><li>manager可以装在集群或者集群外任意一台机器上</li><li>manager尽量不要与master装在一台服务器上</li><li>一个MHA的manager可以管理多套集群，只要配置多个配置文件启动即可</li><li>MHA可以在主从运行中添加</li><li>MHA通过ssh管理node节点，一点要在集群中做免密登录</li><li>manager监控主库的node节点，查看是否存活，指挥从库的node节点会在切换主库是发送一些指令</li></ul><h3 id="2-MHA优点总结"><a href="#2-MHA优点总结" class="headerlink" title="2.MHA优点总结"></a>2.MHA优点总结</h3><ol><li><p>Masterfailover and slave promotion can be done very quickly.</p><p>自动故障转移快。</p></li><li><p>Mastercrash does not result in data inconsistency.</p><p>主库崩溃不存在数据一致性问题。</p></li><li><p>Noneed to modify current MySQL settings (MHA works with regular MySQL).</p><p>不需要对当前mysql环境做重大修改。</p></li><li><p>Noneed to increase lots of servers.</p><p>不需要添加额外的服务器(仅一台manager就可管理上百个replication)。</p></li><li><p>Noperformance penalty.</p><p>性能优秀，可工作在半同步复制和异步复制，当监控mysql状态时，仅需要每隔N秒向master发送ping包(默认3秒)，所以对性能无影响。你可以理解为MHA的性能和简单的主从复制框架性能一样。</p></li><li><p>Works with any storage engine.</p><p>只要replication支持的存储引擎，MHA 都支持，不会局限于InnoDB。</p></li></ol><p>&nbsp;</p><h2 id="三、MHA工具介绍"><a href="#三、MHA工具介绍" class="headerlink" title="三、MHA工具介绍"></a>三、MHA工具介绍</h2><p>MHA高可用架构是由manager、node这2款工具实现的。</p><h3 id="1-manager相关工具"><a href="#1-manager相关工具" class="headerlink" title="1.manager相关工具"></a>1.manager相关工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># tar xf mha4mysql-manager-0.56.tar.gz</span></span><br><span class="line">[root@db01 ~]<span class="comment"># ll mha4mysql-manager-0.56/bin/</span></span><br><span class="line"><span class="comment">#检查主从复制</span></span><br><span class="line">masterha_check_repl</span><br><span class="line"><span class="comment">#检查ssh，检查能否免密登录</span></span><br><span class="line">masterha_check_ssh</span><br><span class="line"><span class="comment">#检查MHA状态</span></span><br><span class="line">masterha_check_status</span><br><span class="line"><span class="comment">#配置主机信息(MHA切换过程中，删除到配置文件中故障的主库)</span></span><br><span class="line">masterha_conf_host</span><br><span class="line">    [server2]</span><br><span class="line">    hostname=172.16.1.52</span><br><span class="line">    port=3306</span><br><span class="line">    [server3]</span><br><span class="line">    hostname=172.16.1.53</span><br><span class="line">    port=3306</span><br><span class="line"><span class="comment">#manager启动程序</span></span><br><span class="line">masterha_manager</span><br><span class="line"><span class="comment">#监控主库是否存活</span></span><br><span class="line">masterha_master_monitor</span><br><span class="line"><span class="comment">#切换主库</span></span><br><span class="line">masterha_master_switch</span><br><span class="line"><span class="comment">#建立连接</span></span><br><span class="line">masterha_secondary_check</span><br><span class="line"><span class="comment">#停止的工具</span></span><br><span class="line">masterha_stop</span><br><span class="line"></span><br><span class="line">-----------------我们使用的工具--------------------</span><br><span class="line">masterha_check_repl</span><br><span class="line">masterha_check_ssh</span><br><span class="line">masterha_manager</span><br><span class="line">masterha_stop</span><br></pre></td></tr></table></figure><h3 id="2-node相关工具"><a href="#2-node相关工具" class="headerlink" title="2.node相关工具"></a>2.node相关工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># tar xf mha4mysql-node-0.56.tar.gz</span></span><br><span class="line">[root@db01 ~]<span class="comment"># ll mha4mysql-node-0.56/bin/</span></span><br><span class="line"><span class="comment">#对比中继日志</span></span><br><span class="line">apply_diff_relay_logs</span><br><span class="line"><span class="comment">#防止binlog回滚</span></span><br><span class="line">filter_mysqlbinlog</span><br><span class="line"><span class="comment">#删除relay-log#关闭自动删除relay-log的功能</span></span><br><span class="line">purge_relay_logs</span><br><span class="line"><span class="comment">#保存binlog日志</span></span><br><span class="line">save_binary_logs</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="四、MHA高可用架构搭建"><a href="#四、MHA高可用架构搭建" class="headerlink" title="四、MHA高可用架构搭建"></a>四、MHA高可用架构搭建</h2><p>在搭建MHA高可用前，需要搭建好MySQL的主从复制，可以是普通的异步复制、半同步复制、基于GTID的主从复制。本文以基于GTID主从复制为例，搭建MHA高可用架构。</p><h3 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1.准备环境"></a>1.准备环境</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>角色</th></tr></thead><tbody><tr><td>db01</td><td>172.16.1.51</td><td>master</td></tr><tr><td>db02</td><td>172.16.1.52</td><td>slave1、candidate_master</td></tr><tr><td>db03</td><td>172.16.1.53</td><td>slave2、manager</td></tr></tbody></table><h3 id="2-修改数据库配置文件"><a href="#2-修改数据库配置文件" class="headerlink" title="2.修改数据库配置文件"></a>2.修改数据库配置文件</h3><p>这些配置包含了GTID模式主从复制、MHA的必要配置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主库db01配置文件</span></span><br><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip_name_resolve=ON</span><br><span class="line">server_id=1</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">relay_log=relay-log</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">log_slave_updates=ON </span><br><span class="line">relay_log_purge=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#从库db02配置文件</span></span><br><span class="line">[root@db02 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip_name_resolve=ON</span><br><span class="line">server_id=2</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">relay_log=relay-log</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">log_slave_updates=ON</span><br><span class="line">relay_log_purge=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#从库db03配置文件</span></span><br><span class="line">[root@db03 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">skip_name_resolve=ON</span><br><span class="line">server_id=3</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">relay_log=relay-log</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">log_slave_updates=ON</span><br><span class="line">relay_log_purge=0</span><br></pre></td></tr></table></figure><blockquote><p><strong>log_slave_updates=ON和relay_log_purge=0</strong></p></blockquote><ul><li><p>log_slave_updates=ON，让从库也记录binlog日志</p></li><li><p>relay_log_purge=0，关闭中继日志自动删除</p></li></ul><h3 id="3-配置基于GTID的主从复制"><a href="#3-配置基于GTID的主从复制" class="headerlink" title="3.配置基于GTID的主从复制"></a>3.配置基于GTID的主从复制</h3><p>配置GTID的主从复制，需要开启GTID模式，主要要加入<code>gtid_mode=ON</code>、<code>enforce_gtid_consistency=ON</code>和<code> log_slave_updates=ON</code>这三行配置。</p><p>关于GTID的详细介绍可以参考这篇文章<a href="https://www.wanhebin.com/database/mysql/734.html">https://www.wanhebin.com/database/mysql/734.html</a></p><h4 id="3-1-主库操作"><a href="#3-1-主库操作" class="headerlink" title="3.1 主库操作"></a>3.1 主库操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to rep@<span class="string">&#x27;172.16.1.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="3-2-从库操作"><a href="#3-2-从库操作" class="headerlink" title="3.2 从库操作"></a>3.2 从库操作</h4><ul><li>执行change master to 语句</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; change master to </span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_auto_position=1;</span><br></pre></td></tr></table></figure><ul><li>启动从库线程</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><h3 id="4-部署MHA"><a href="#4-部署MHA" class="headerlink" title="4.部署MHA"></a>4.部署MHA</h3><p>在部署MHA之前，需要先满足以下条件：</p><ul><li>从库是否开启了binlog</li><li>从库是否配置了binlog保存（log-slave-updates）</li><li>复制架构中server_id要唯一</li><li>主库与从库数据的一致性</li><li>所有节点都要创建主从用户</li><li>配置relay-log不自动删除（relay_log_purge=0）</li></ul><h4 id="4-1-安装依赖环境"><a href="#4-1-安装依赖环境" class="headerlink" title="4.1 安装依赖环境"></a>4.1 安装依赖环境</h4><ul><li>node节点安装依赖</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install perl-DBD-MySQL -y</span><br></pre></td></tr></table></figure><ul><li>manager节点安装依赖</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y perl-Config-Tiny epel-release perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes</span><br></pre></td></tr></table></figure><h4 id="4-2-下载安装MHA的node和manager软件工具"><a href="#4-2-下载安装MHA的node和manager软件工具" class="headerlink" title="4.2 下载安装MHA的node和manager软件工具"></a>4.2 下载安装MHA的node和manager软件工具</h4><p>MHA 的软件包可以去 <a href="https://github.com/yoshinorim/mha4mysql-manager/wiki/Downloads">Github</a> 下载。</p><ul><li>在整个复制架构中的所有服务器安装mha4mysql-node工具</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum localinstall -y mha4mysql-node-0.56-0.el6.noarch.rpm  </span><br></pre></td></tr></table></figure><ul><li>在manager节点安装mha4mysql-manager工具</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum localinstall -y mha4mysql-manager-0.56-0.el6.noarch.rpm </span><br></pre></td></tr></table></figure><h4 id="4-3-在主库上创建一个MHA的管理用户"><a href="#4-3-在主库上创建一个MHA的管理用户" class="headerlink" title="4.3 在主库上创建一个MHA的管理用户"></a>4.3 在主库上创建一个MHA的管理用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to mhaadmin@<span class="string">&#x27;172.16.1.%&#x27;</span> identified by <span class="string">&#x27;mhapass&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="4-4-配置三台机器的ssh免密互信（三台都要操作）"><a href="#4-4-配置三台机器的ssh免密互信（三台都要操作）" class="headerlink" title="4.4 配置三台机器的ssh免密互信（三台都要操作）"></a>4.4 配置三台机器的ssh免密互信（三台都要操作）</h4><p>方法一：执行命令实现ssh互信</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.16.1.51</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.16.1.52</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.16.1.53</span><br></pre></td></tr></table></figure><p>方法二：使用免密脚本ssh-key.sh实现ssh互信</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#下载安装sshpass命令</span></span><br><span class="line">yum install -y sshpass &amp;&gt; /dev/null</span><br><span class="line"><span class="comment">#生成ssh-key秘钥</span></span><br><span class="line">ssh-keygen -t rsa -f /root/.ssh/id_rsa -P <span class="string">&quot;&quot;</span> -q &amp;&amp;\</span><br><span class="line"><span class="comment">#免密推送秘钥给其他几台服务器(db01,db02,db03)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;51..53&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">sshpass -p1  ssh-copy-id -i /root/.ssh/id_rsa.pub -o StrictHostKeyChecking=no root@172.16.1.<span class="variable">$&#123;i&#125;</span> &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="4-5-配置MHA配置文件"><a href="#4-5-配置MHA配置文件" class="headerlink" title="4.5 配置MHA配置文件"></a>4.5 配置MHA配置文件</h4><ul><li>创建mha相关目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /service/mha/&#123;app1,etc,scripts&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># vim /service/mha/etc/app1.cnf</span></span><br><span class="line">[server default]</span><br><span class="line"><span class="comment">#设置manager的日志</span></span><br><span class="line">manager_log=/service/mha/app1/manager.log</span><br><span class="line"><span class="comment">#设置manager的工作目录</span></span><br><span class="line">manager_workdir=/service/mha/app1</span><br><span class="line"><span class="comment">#设置master 保存binlog的位置</span></span><br><span class="line">master_binlog_dir=/usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line"><span class="comment">#设置自动failover时候的切换脚本</span></span><br><span class="line">master_ip_failover_script=/service/mha/scripts/master_ip_failover</span><br><span class="line"><span class="comment">#设置手动切换时候的切换脚本</span></span><br><span class="line">master_ip_online_change_script=/service/mha/scripts/master_ip_online_change</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置mha管理用户名</span></span><br><span class="line">user=mhaadmin</span><br><span class="line"><span class="comment">#设置mha管理用户密码</span></span><br><span class="line">password=mhapass</span><br><span class="line"><span class="comment">#设置复制环境中的复制用户名</span></span><br><span class="line">repl_user=rep</span><br><span class="line">repl_password=123</span><br><span class="line"><span class="comment">#设置免密登录用户</span></span><br><span class="line">ssh_user=root</span><br><span class="line"><span class="comment">#发送ping包的时间间隔</span></span><br><span class="line">ping_interval=2</span><br><span class="line"></span><br><span class="line">[server1]</span><br><span class="line">hostname=172.16.1.51</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">[server2]</span><br><span class="line">hostname=172.16.1.52</span><br><span class="line">port=3306</span><br><span class="line"><span class="comment">#设置为候选master，如果设置该参数以后，发生主从切换以后将会将此从库提升为主库</span></span><br><span class="line">candidate_master=1</span><br><span class="line"><span class="comment">#默认情况下如果一个slave落后master 100M的relay logs的话，MHA将不会选择该slave作为一个新的master，因为对于这个slave的恢复需要花费很长时间，通过设置check_repl_delay=0,MHA触发切换在选择一个新的master的时候将会忽略复制延时，这个参数对于设置了candidate_master=1的主机非常有用，因为这个候选主在切换的过程中一定是新的master</span></span><br><span class="line">check_repl_delay=0</span><br><span class="line"></span><br><span class="line">[server3]</span><br><span class="line">hostname=172.16.1.53</span><br><span class="line">port=3306</span><br></pre></td></tr></table></figure><h4 id="4-6-配置VIP漂移脚本（manager节点）"><a href="#4-6-配置VIP漂移脚本（manager节点）" class="headerlink" title="4.6 配置VIP漂移脚本（manager节点）"></a>4.6 配置VIP漂移脚本（manager节点）</h4><ul><li>自动failover脚本  <code>/service/mha/scripts/master_ip_failover</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env perl</span></span><br><span class="line"></span><br><span class="line">use strict;</span><br><span class="line">use warnings FATAL =&gt; <span class="string">&#x27;all&#x27;</span>;</span><br><span class="line"></span><br><span class="line">use Getopt::Long;</span><br><span class="line"></span><br><span class="line">my (</span><br><span class="line">    <span class="variable">$command</span>,          <span class="variable">$ssh_user</span>,        <span class="variable">$orig_master_host</span>, <span class="variable">$orig_master_ip</span>,</span><br><span class="line">    <span class="variable">$orig_master_port</span>, <span class="variable">$new_master_host</span>, <span class="variable">$new_master_ip</span>,    <span class="variable">$new_master_port</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">my <span class="variable">$vip</span> = <span class="string">&#x27;172.16.1.59/24&#x27;</span>;</span><br><span class="line">my <span class="variable">$key</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">my <span class="variable">$ssh_start_vip</span> = <span class="string">&quot;/sbin/ifconfig eth1:<span class="variable">$key</span> <span class="variable">$vip</span>&quot;</span>;</span><br><span class="line">my <span class="variable">$ssh_stop_vip</span> = <span class="string">&quot;/sbin/ifconfig eth1:<span class="variable">$key</span> down&quot;</span>;</span><br><span class="line"></span><br><span class="line">GetOptions(</span><br><span class="line">    <span class="string">&#x27;command=s&#x27;</span>          =&gt; \<span class="variable">$command</span>,</span><br><span class="line">    <span class="string">&#x27;ssh_user=s&#x27;</span>         =&gt; \<span class="variable">$ssh_user</span>,</span><br><span class="line">    <span class="string">&#x27;orig_master_host=s&#x27;</span> =&gt; \<span class="variable">$orig_master_host</span>,</span><br><span class="line">    <span class="string">&#x27;orig_master_ip=s&#x27;</span>   =&gt; \<span class="variable">$orig_master_ip</span>,</span><br><span class="line">    <span class="string">&#x27;orig_master_port=i&#x27;</span> =&gt; \<span class="variable">$orig_master_port</span>,</span><br><span class="line">    <span class="string">&#x27;new_master_host=s&#x27;</span>  =&gt; \<span class="variable">$new_master_host</span>,</span><br><span class="line">    <span class="string">&#x27;new_master_ip=s&#x27;</span>    =&gt; \<span class="variable">$new_master_ip</span>,</span><br><span class="line">    <span class="string">&#x27;new_master_port=i&#x27;</span>  =&gt; \<span class="variable">$new_master_port</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> &amp;main();</span><br><span class="line"></span><br><span class="line">sub main &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;\n\nIN SCRIPT TEST====<span class="variable">$ssh_stop_vip</span>==<span class="variable">$ssh_start_vip</span>===\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$command</span> eq <span class="string">&quot;stop&quot;</span> || <span class="variable">$command</span> eq <span class="string">&quot;stopssh&quot;</span> ) &#123;</span><br><span class="line"></span><br><span class="line">        my <span class="variable">$exit_code</span> = 1;</span><br><span class="line">        <span class="built_in">eval</span> &#123;</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Disabling the VIP on old master: <span class="variable">$orig_master_host</span> \n&quot;</span>;</span><br><span class="line">            &amp;stop_vip();</span><br><span class="line">            <span class="variable">$exit_code</span> = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$@</span>) &#123;</span><br><span class="line">            warn <span class="string">&quot;Got Error: <span class="variable">$@</span>\n&quot;</span>;</span><br><span class="line">            <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    elsif ( <span class="variable">$command</span> eq <span class="string">&quot;start&quot;</span> ) &#123;</span><br><span class="line"></span><br><span class="line">        my <span class="variable">$exit_code</span> = 10;</span><br><span class="line">        <span class="built_in">eval</span> &#123;</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Enabling the VIP - <span class="variable">$vip</span> on the new master - <span class="variable">$new_master_host</span> \n&quot;</span>;</span><br><span class="line">            &amp;start_vip();</span><br><span class="line">            <span class="variable">$exit_code</span> = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$@</span>) &#123;</span><br><span class="line">            warn <span class="variable">$@</span>;</span><br><span class="line">            <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    elsif ( <span class="variable">$command</span> eq <span class="string">&quot;status&quot;</span> ) &#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Checking the Status of the script.. OK \n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        &amp;usage();</span><br><span class="line">        <span class="built_in">exit</span> 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub <span class="function"><span class="title">start_vip</span></span>() &#123;</span><br><span class="line">    `ssh <span class="variable">$ssh_user</span>\@<span class="variable">$new_master_host</span> \&quot; <span class="variable">$ssh_start_vip</span> \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line">sub <span class="function"><span class="title">stop_vip</span></span>() &#123;</span><br><span class="line">     <span class="built_in">return</span> 0  unless  (<span class="variable">$ssh_user</span>);</span><br><span class="line">    `ssh <span class="variable">$ssh_user</span>\@<span class="variable">$orig_master_host</span> \&quot; <span class="variable">$ssh_stop_vip</span> \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub usage &#123;</span><br><span class="line">    <span class="built_in">print</span></span><br><span class="line">    <span class="string">&quot;Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>手动 failover脚本<code>/service/mha/scripts/master_ip_online_change</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> /root/.bash_profile</span><br><span class="line">vip=`<span class="built_in">echo</span> <span class="string">&#x27;172.16.1.59/24&#x27;</span>`  <span class="comment">#设置VIP</span></span><br><span class="line">key=`<span class="built_in">echo</span> <span class="string">&#x27;1&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span>=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> | awk -F = <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">orig_master_host=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$2</span>&quot;</span> | awk -F = <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">new_master_host=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$7</span>&quot;</span> | awk -F = <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">orig_master_ssh_user=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;12&#125;</span>&quot;</span> | awk -F = <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">new_master_ssh_user=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;13&#125;</span>&quot;</span> | awk -F = <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#要求服务的网卡识别名一样，都为eth1(这里是)</span></span><br><span class="line">stop_vip=`<span class="built_in">echo</span> <span class="string">&quot;ssh root@<span class="variable">$orig_master_host</span> /usr/sbin/ifconfig eth1:<span class="variable">$key</span> down&quot;</span>`</span><br><span class="line">start_vip=`<span class="built_in">echo</span> <span class="string">&quot;ssh root@<span class="variable">$new_master_host</span> /usr/sbin/ifconfig eth1:<span class="variable">$key</span> <span class="variable">$vip</span>&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$command</span> = <span class="string">&#x27;stop&#x27;</span> ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\n\n****************************\n&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> -e <span class="string">&quot;Disabled thi VIP - <span class="variable">$vip</span> on old master: <span class="variable">$orig_master_host</span> \n&quot;</span></span><br><span class="line">   <span class="variable">$stop_vip</span></span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">     <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Disabled the VIP successfully&quot;</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Disabled the VIP failed&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;***************************\n\n\n&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$command</span> = <span class="string">&#x27;start&#x27;</span> -o <span class="variable">$command</span> = <span class="string">&#x27;status&#x27;</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n\n\n*************************\n&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;Enabling the VIP - <span class="variable">$vip</span> on new master: <span class="variable">$new_master_host</span> \n&quot;</span></span><br><span class="line">    <span class="variable">$start_vip</span></span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Enabled the VIP successfully&quot;</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Enabled the VIP failed&quot;</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   <span class="built_in">echo</span> -e <span class="string">&quot;***************************\n\n\n&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>给脚本添加执行权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x /service/mha/scripts/master_ip_failover </span><br><span class="line">chmod +x /service/mha/scripts/master_ip_online_change</span><br></pre></td></tr></table></figure><h4 id="4-7-启动前验证MHA"><a href="#4-7-启动前验证MHA" class="headerlink" title="4.7 启动前验证MHA"></a>4.7 启动前验证MHA</h4><ul><li>通过 masterha_check_ssh 验证 ssh 信任登录是否成功</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># masterha_check_ssh --conf=/service/mha/etc/app1.cnf</span></span><br><span class="line">Wed Apr 16 23:17:58 2020 -  All SSH connection tests passed successfully.<span class="comment">#表示所有都成功</span></span><br></pre></td></tr></table></figure><ul><li>通过 masterha_check_repl 验证 mysql 主从复制是否成功</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># masterha_check_repl --conf=/service/mha/etc/app1.cnf</span></span><br><span class="line">MySQL Replication Health is OK.<span class="comment">#表示所有都成功</span></span><br></pre></td></tr></table></figure><h4 id="4-8-启动MHA"><a href="#4-8-启动MHA" class="headerlink" title="4.8 启动MHA"></a>4.8 启动MHA</h4><ul><li>第一次启动，先在master上手动绑定vip，以后会自动切换</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># /usr/sbin/ifconfig eth1:1 172.16.1.59/24</span></span><br></pre></td></tr></table></figure><ul><li>启动命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># nohup masterha_manager --conf=/service/mha/etc/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /service/mha/logs/masterha_manager.log 2&gt;&amp;1 &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#选项说明</span></span><br><span class="line">--remove_dead_master_conf<span class="comment">#移除配置文件中已宕机的主机信息</span></span><br><span class="line">--ignore_last_failover<span class="comment">#忽略上一次切换</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><p>MHA监控脚本切换一次就会退出，需要再次启动</p></blockquote><ul><li>关闭命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">masterha_stop --conf=/service/mha/etc/app1.cnf</span><br></pre></td></tr></table></figure><p><em>拓展：MySQL安全机制</em></p><p><em>1.完成一次切换，会生成一个锁文件</em></p><p><em>2.下一次切换前，会检查锁文件</em></p><p><em>3.如果锁文件存在，则8小时以内不允许再次切换</em></p><h4 id="4-9-检查MHA的状态"><a href="#4-9-检查MHA的状态" class="headerlink" title="4.9 检查MHA的状态"></a>4.9 检查MHA的状态</h4><ul><li>检查MHA的启动状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># tailf /service/mha/app1/manager.log</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">#如果最后一行是如下，表明启动成功</span></span><br><span class="line">Ping(SELECT) succeeded, waiting until MySQL doesn’t respond..</span><br></pre></td></tr></table></figure><ul><li>检查集群状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># masterha_check_status --conf=/service/mha/etc/app1.cnf</span></span><br><span class="line">mha (pid:7598) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：上面的信息中“mha (pid:7598) is running(0:PING_OK)”表示MHA服务运行OK，否则， 则会显示为类似“mha is stopped(1:NOT_RUNNING).”</span></span><br></pre></td></tr></table></figure><h4 id="4-10-切换测试"><a href="#4-10-切换测试" class="headerlink" title="4.10 切换测试"></a>4.10 切换测试</h4><p>测试当master节点宕机后，一个slave被提升为新的master节点，且VIP也漂移到了这台新的master节点。</p><ul><li>手动关闭master节点的mysql服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># systemctl stop mysqld</span></span><br></pre></td></tr></table></figure><ul><li>查看从库状态，确定master节点是否切换成功</li></ul><p>在从库db03上查看slave状态，db03从库是指向db02这台服务器的（即db03为db02的slave节点），则证明MHA的切换测试成功。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">                  Master_Host: 172.16.1.52</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><ul><li>检查VIP是否漂移到了新的master节点</li></ul><p>在db02上观察到，VIP<code>172.16.1.59</code> 已经漂移到了db02（新的master）上</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># ip address show eth1</span></span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:a3:<span class="built_in">cd</span>:4a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.1.51/24 brd 172.16.1.255 scope global noprefixroute eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.16.1.59/24 brd 172.16.1.255 scope global secondary eth1:1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fea3:cd4a/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h3 id="5-将故障的master节点重新加入集群"><a href="#5-将故障的master节点重新加入集群" class="headerlink" title="5.将故障的master节点重新加入集群"></a>5.将故障的master节点重新加入集群</h3><p>通常情况下自动切换以后,原master可能已经废弃掉,待原master主机修复后,如果数据完整的情况下,可能想把原来master重新作为新主库的slave,这时我们可以借助当时自动切换时刻的MHA志来完成对原master的修复。</p><ul><li>修改manager配置文件（只针对自动切换的，在线切换不会删除配置）</li></ul><p>在/service/mha/etc/app1.cnf中添加如下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[server1]</span><br><span class="line">hostname=172.16.1.51</span><br><span class="line">port=3306</span><br><span class="line">candidate_master=1</span><br><span class="line">check_repl_delay=0</span><br></pre></td></tr></table></figure><ul><li>修复旧的master，然后配置成为新master的slave节点</li></ul><p>这里需要注意一点，如果是基于GTID的主从复制框架，可自动定位到binlog位置点，可以不查看日志寻找位置点信息。若是其他的主从复制架构，则需要通过日志来查看binglog位置点。</p><p>查看manager切换时产生的日志信息，找到CHANGE MASTER TO语句相关信息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># less /service/mha/app1/manager.log</span></span><br><span class="line">Wed Jul  1 16:27:51 2020 - [info]  All other slaves should start replication from here. Statement should be: CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;172.16.1.52&#x27;</span>, MASTER_PORT=3306, MASTER_AUTO_POSITION=1, MASTER_USER=<span class="string">&#x27;rep&#x27;</span>, MASTER_PASSWORD=<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于本文使用的是GTID的主从复制架构，所以这里并没显示出binglog位置点，若是使用的其他复制架构，这里则可以显示出binglog位置点信息</span></span><br></pre></td></tr></table></figure><ul><li>在旧master上执行change master to 语句</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; change master to </span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.52&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_auto_position=1;</span><br></pre></td></tr></table></figure><ul><li>启动旧master的线程，并查看从库状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line">mysql&gt; show slave status\G</span><br></pre></td></tr></table></figure><p>到这里，旧master就可以同步新master的数据了。此时旧的master已经重新加入集群，变成mha集群中的一个slave角色了。</p><ul><li>在manager节点上重新启动manager监控进程</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup masterha_manager --conf=/service/mha/etc/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /service/mha/logs/masterha_manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><blockquote><p><strong>master节点故障设置成slave节点脚本<code>mha_master_recover_to_slave.sh</code></strong></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#设置mysql服务变量</span></span><br><span class="line">mysqlserver=`ps -ef | grep [m]ysql | wc -l`</span><br><span class="line"><span class="comment">#判断mysql服务是否存在，启动或重启</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$mysqlserver</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    systemctl start mysqld</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    pkill mysqld</span><br><span class="line">    systemctl start mysqld</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#mysql启动需要时间</span></span><br><span class="line">sleep 3</span><br><span class="line"><span class="comment">#获取change master to语句,并修改rep的密码为123</span></span><br><span class="line">change=`ssh 172.16.1.53 <span class="string">&quot;grep -i &#x27;change master to&#x27; /service/mha/app1/manager.log | tail -1 | sed -r &#x27;s#(.*)(CHANGE.*)#\2#g&#x27; | sed &#x27;s#xxx#123#g&#x27;&quot;</span>`</span><br><span class="line"><span class="comment">#恢复的数据执行change语句</span></span><br><span class="line">mysql -e <span class="string">&quot;<span class="variable">$change</span>;start slave&quot;</span></span><br><span class="line"><span class="comment">#修改manager的配置文件</span></span><br><span class="line"><span class="keyword">if</span> [ -z  ]</span><br><span class="line">ssh 172.16.1.53 <span class="string">&quot;cat&gt;&gt;/service/mha/etc/app1.cnf&lt;&lt;EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[server1]</span></span><br><span class="line"><span class="string">hostname=172.16.1.51</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string">EOF&quot;</span></span><br><span class="line"><span class="comment">#远程启动mha</span></span><br><span class="line">ssh 172.16.1.53 <span class="string">&quot;nohup masterha_manager --conf=/service/mha/etc/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /service/mha/masterha_manager.log 2&gt;&amp;1 &amp;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6-MHA主库切换机制"><a href="#6-MHA主库切换机制" class="headerlink" title="6.MHA主库切换机制"></a>6.MHA主库切换机制</h3><ul><li>读取manager配置文件，查看是否有优先级设置</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#优先提升为主库</span></span><br><span class="line">candidate_master=1</span><br><span class="line"><span class="comment">#关闭检查恢复延迟</span></span><br><span class="line">check_repl_delay=0</span><br></pre></td></tr></table></figure><ul><li><p>数据量不同时，从库中relay log最新的优先级高</p></li><li><p>如果没有配置优先级，并且数据量相同，主机标签小的优先级高</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[server1] &gt; [server2] &gt; [server3]</span><br><span class="line">[a] &gt; [b] &gt; [c]</span><br><span class="line">[1] &gt; [2] &gt; [3]</span><br></pre></td></tr></table></figure><h3 id="7-配置MHA让manager获取binglog信息"><a href="#7-配置MHA让manager获取binglog信息" class="headerlink" title="7.配置MHA让manager获取binglog信息"></a>7.配置MHA让manager获取binglog信息</h3><p>当MHA高可用架构中master故障时，MHA把从库提升为主库，从库和主库之间可能会存在数据差异，manager通过获取主库的binlog给从库同步数据。</p><p>但这里面有个问题，若主库只是MySQL服务停止了，manager可以去主库获取binglog；但如果主库服务器出现故障无法通过网络连接时，manager就无法拿到binglog给从库同步存在差异的数据了。</p><p>这里给出一个解决方案：配置MHA，在manager开启一个进程，实时的把主库产生binglog获取到manager端，后续切换master时，就在manager端拿取binlog同步数据。</p><h4 id="7-1-配置manager的配置文件（实时获取）"><a href="#7-1-配置manager的配置文件（实时获取）" class="headerlink" title="7.1 配置manager的配置文件（实时获取）"></a>7.1 配置manager的配置文件（实时获取）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># cat&gt;&gt;/service/mha/etc/app1.cnf&lt;&lt;EOF</span></span><br><span class="line"></span><br><span class="line">[binlog1]</span><br><span class="line">no_master=1</span><br><span class="line">hostname=172.16.1.53</span><br><span class="line">master_binlog_dir=/data/mysql/binlog</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="7-2-创建binlog存放目录"><a href="#7-2-创建binlog存放目录" class="headerlink" title="7.2 创建binlog存放目录"></a>7.2 创建binlog存放目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># mkdir -p /data/mysql/binlog</span></span><br></pre></td></tr></table></figure><h4 id="7-3-启动binlog实时获取进程"><a href="#7-3-启动binlog实时获取进程" class="headerlink" title="7.3 启动binlog实时获取进程"></a>7.3 启动binlog实时获取进程</h4><p>进入到 /data/mysql/binlog 目录下启动进程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># cd /data/mysql/binlog</span></span><br><span class="line">[root@db03 ~]<span class="comment"># mysqlbinlog -R --host=172.16.1.51 --user=mhaadmin --password=mhapass --raw --stop-never mysql-bin.000001 &amp;</span></span><br></pre></td></tr></table></figure><p>命令选项说明：</p><ul><li>-R ：–read-from-remote-server：备份远端服务器的binlog</li><li>–host：指定远端主机</li><li>–user：指定用户</li><li>–password：指定密码</li><li>–raw：将binlog以二进制方式存储</li><li>–stop-never：从指定的binlog开始，以后生成的所有binlog都会同步</li></ul><h4 id="7-4-重新启动manager监控进程"><a href="#7-4-重新启动manager监控进程" class="headerlink" title="7.4 重新启动manager监控进程"></a>7.4 重新启动manager监控进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup masterha_manager --conf=/service/mha/etc/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /service/mha/masterha_manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> MHA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 备份与恢复</title>
      <link href="posts/mysql-backup-and-restore/"/>
      <url>posts/mysql-backup-and-restore/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库备份的类型"><a href="#一、数据库备份的类型" class="headerlink" title="一、数据库备份的类型"></a>一、数据库备份的类型</h2><p>按照服务器的运行状态，可分为：冷备、热备、温备。</p><ul><li><p><strong>冷备</strong>：数据库处于停机状态下进行备份。</p></li><li><p><strong>热备</strong>：数据库处于运行状态下备份，在热备期间，数据库的读写操作均可正常进行。</p><p>​            在mysql中，MyISAM存储引擎不支持热备，InnoDB存储引擎支持热备。</p></li><li><p><strong>温备</strong>：数据库处于运行状态下备份，但是在温备期间数据库只能进行读操作，不能进行写操作</p></li></ul><hr><p>按照备份后的内容量，可分为：全备、增备、差异备份。</p><ul><li><strong>全量备份</strong>：对所有数据进行一个完全的备份。</li><li><strong>增备备份</strong>：对上一次”备份”以后变化的数据的备份。</li><li><strong>差异备份</strong>：对上一次”全量备份”以后变化的数据的备份。</li></ul><hr><p>按照备份的方式，可分为：逻辑备份、物理备份。</p><ul><li><p><strong>逻辑备份</strong>：将数据从数据库中导出，并将导出的数据进行存档备份。</p></li><li><p><strong>物理备份</strong>：直接备份数据库所对应的数据文件。物理备份相对逻辑备份来说，性能更强。</p></li></ul><p>&nbsp;</p><h2 id="二、数据库备份方式"><a href="#二、数据库备份方式" class="headerlink" title="二、数据库备份方式"></a>二、数据库备份方式</h2><p>在数据库备份当中，一般会采用逻辑备份、物理备份这两种方式对数据库进行备份。</p><h3 id="2-1-逻辑备份"><a href="#2-1-逻辑备份" class="headerlink" title="2.1 逻辑备份"></a>2.1 逻辑备份</h3><p>基于SQL语句进行备份。</p><p>常见得逻辑备份方式：</p><ul><li><p>以binlog方式进行备份</p></li><li><p>使用mysqldump备份工具备份</p></li><li><p>replication（数据库主从）</p></li><li><p>select  into outfile （使用SQL语句导出数据到文件）</p></li></ul><h3 id="2-2-物理备份"><a href="#2-2-物理备份" class="headerlink" title="2.2 物理备份"></a>2.2 物理备份</h3><p>基于数据文件的备份。</p><p>常见物理备份方式：</p><ul><li>使用xtrabackup备份工具备份</li></ul><p>&nbsp;</p><h2 id="三、MySQL主流备份工具之mysqldump"><a href="#三、MySQL主流备份工具之mysqldump" class="headerlink" title="三、MySQL主流备份工具之mysqldump"></a>三、MySQL主流备份工具之mysqldump</h2><p>mysqldump是MySQL自带的免费备份工具，是一种<strong>逻辑备份</strong>工具。</p><p>在MySQL 5.7中新增了一个mysqldump的改进版备份工具mysqlpump，它支持基于表级别的并行备份。</p><h3 id="3-1-备份方法"><a href="#3-1-备份方法" class="headerlink" title="3.1 备份方法"></a>3.1 备份方法</h3><ul><li>备份单表或者一组指定的库表</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump [options] db_name [tbl_name ...]</span><br></pre></td></tr></table></figure><ul><li>备份一组或者一个数据库下的所有表</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump [options] --databases db_name ...</span><br></pre></td></tr></table></figure><ul><li>备份整个数据库实例</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump [options] --all-databases</span><br></pre></td></tr></table></figure><h3 id="3-2-mysqldump常用命令行选项"><a href="#3-2-mysqldump常用命令行选项" class="headerlink" title="3.2 mysqldump常用命令行选项"></a>3.2 mysqldump常用命令行选项</h3><ul><li>-A，–all-databases：备份所有数据库下的所有表。</li><li>-B，–databases：备份指定数据库下的所有表。</li><li>–master-data[=value]：则在备份文件中会生成一 条CHANGE MASTER TO语句（包含binlog pos，binlog file）<ul><li>value=2：备份文件中生成的CHANGE MASTER TO语句将被注释</li><li>value=1：该语句不会被注释</li><li>value=0：不记录CHANGE MASTER TO语句</li></ul></li><li>-F，–flush-logs：在开始备份之前刷新MySQL二进制日志文件。</li><li>-E,–events：在备份数据中包含数据库的事件。</li><li>–triggers：在备份文件中包含每个备份表的触发器。</li><li>–single-transaction：在备份数据之前开启一个事务快照，然后在事务快照内进行备份。<ul><li>结合–master-data实现<strong>热备</strong></li></ul></li><li>-d，–no-data：不备份表数据，只备份表结构。</li><li>-t，–no-create-info：只备份数据，不备份表结构。</li><li>-R，–routines：备份数据中存储过程和函数。</li></ul><h3 id="3-3-mysqldump备份注意"><a href="#3-3-mysqldump备份注意" class="headerlink" title="3.3 mysqldump备份注意"></a>3.3 mysqldump备份注意</h3><ul><li>mysqldump在备份和恢复时都需要MySQL实例启动为前提</li><li>一般数据量级100G以内，大约15-30分钟可以恢复（TB、PB、EB就需要考虑别的方式）</li><li>mysqldump是以覆盖的形式恢复数据的</li></ul><h3 id="3-4-实战：模拟完全备份和恢复"><a href="#3-4-实战：模拟完全备份和恢复" class="headerlink" title="3.4 实战：模拟完全备份和恢复"></a>3.4 实战：模拟完全备份和恢复</h3><p>在备份源数据库中插入一些数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+-------+</span><br><span class="line">| id | name  |</span><br><span class="line">+----+-------+</span><br><span class="line">|  1 | tset1 |</span><br><span class="line">|  2 | test2 |</span><br><span class="line">|  3 | test3 |</span><br><span class="line">|  4 | test4 |</span><br><span class="line">|  5 | test5 |</span><br><span class="line">|  6 | test6 |</span><br><span class="line">+----+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into <span class="built_in">test</span>(name) values(<span class="string">&quot;tset7&quot;</span>),(<span class="string">&quot;test8&quot;</span>),(<span class="string">&quot;test9&quot;</span>),(<span class="string">&quot;test10&quot;</span>);</span><br><span class="line">Query OK, 4 rows affected (0.01 sec)</span><br><span class="line">Records: 4  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | name   |</span><br><span class="line">+----+--------+</span><br><span class="line">......</span><br><span class="line">|  7 | test7  |</span><br><span class="line">|  8 | test8  |</span><br><span class="line">|  9 | test9  |</span><br><span class="line">| 10 | test10 |</span><br><span class="line">+----+--------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>在远程备份服务器中使用mysqldump远程备份数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mkdir /data/backup/mysql/mysqldump -p</span></span><br><span class="line">[root@db02 ~]<span class="comment"># cd /data/backup/mysql/mysqldump/</span></span><br><span class="line">[root@db02 mysqldump]<span class="comment"># mysqldump -h 172.16.1.51 -uroot -p123 --single-transaction \</span></span><br><span class="line">--master-data=2 --triggers --events -R -A &gt; backup_`data +%F_%H_%M_%S`.sql</span><br><span class="line">[root@db02 mysqldump]<span class="comment"># ls -lh</span></span><br><span class="line">total 347M</span><br><span class="line">-rw-r--r-- 1 root root 347M Jun 19 23:37 backup_2020-06-19_23_37_03.sql</span><br></pre></td></tr></table></figure><p>查看备份文件中的binlog pos位置、binlog文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db02 mysqldump]<span class="comment"># head -100 backup_2020-06-19_23_37_03.sql | grep -i CHANGE</span></span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000004&#x27;</span>, MASTER_LOG_POS=911;</span><br></pre></td></tr></table></figure><p>把备份文件导入恢复服务器的数据库实例中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 mysqldump]<span class="comment"># mysql -uroot -p123 -e &quot;reset master;&quot;</span></span><br><span class="line">[root@db01 mysqldump]<span class="comment"># mysql -uroot -p123 &lt; backup_2020-06-19_23_37_03.sql</span></span><br></pre></td></tr></table></figure><p>登录恢复服务器中的数据库，校验数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | name   |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | tset1  |</span><br><span class="line">|  2 | test2  |</span><br><span class="line">|  3 | test3  |</span><br><span class="line">|  4 | test4  |</span><br><span class="line">|  5 | test5  |</span><br><span class="line">|  6 | test6  |</span><br><span class="line">|  7 | tset7  |</span><br><span class="line">|  8 | test8  |</span><br><span class="line">|  9 | test9  |</span><br><span class="line">| 10 | test10 |</span><br><span class="line">+----+--------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="四、MySQL主流备份工具之XtraBackup"><a href="#四、MySQL主流备份工具之XtraBackup" class="headerlink" title="四、MySQL主流备份工具之XtraBackup"></a>四、MySQL主流备份工具之XtraBackup</h2><p>XtraBackup是一款开源的热备份软件（<strong>物理备份</strong>），它可以非阻塞地对InnoDB和XtraDB数据库进行备份。</p><p>XtraBackup的出现，解决了mysqldump在备份数据量大的数据库时，备份和恢复的时间高开销的问题。</p><h3 id="4-1-XtraBackup的都优点"><a href="#4-1-XtraBackup的都优点" class="headerlink" title="4.1 XtraBackup的都优点"></a>4.1 XtraBackup的都优点</h3><ul><li>快速可靠地完成备份。</li><li>在备份期间不间断地处理事务。 </li><li>节省磁盘空间和网络带宽。 </li><li>自动备份验证。 </li><li>更快地恢复，以保障业务有更长的在线时间。</li></ul><h3 id="4-2-备份方式（物理备份）"><a href="#4-2-备份方式（物理备份）" class="headerlink" title="4.2 备份方式（物理备份）"></a>4.2 备份方式（物理备份）</h3><ul><li>对于非innodb表（比如myisam）是直接锁表，cp数据文件，属于一种温备。</li><li>对于innodb的表（支持事务），不锁表，cp数据页最终以数据文件方式保存下来，并且把redo和undo一并备走，属于热备方式。</li><li>备份时读取配置文件/etc/my.cnf</li></ul><h3 id="4-3-下载安装XtraBackup软件"><a href="#4-3-下载安装XtraBackup软件" class="headerlink" title="4.3 下载安装XtraBackup软件"></a>4.3 下载安装XtraBackup软件</h3><p>XtraBackup 的 RPM 包可去 <a href="https://www.percona.com/downloads/Percona-XtraBackup-2.4/LATEST/">Percona</a> 官网下载相应的版本。</p><ul><li>安装依赖</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL</span><br></pre></td></tr></table></figure><ul><li>安装XtraBackup</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y https://downloads.percona.com/downloads/Percona-XtraBackup-2.4/Percona-XtraBackup-2.4.22/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.22-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h3 id="4-4-innobackupex命令常用选项"><a href="#4-4-innobackupex命令常用选项" class="headerlink" title="4.4 innobackupex命令常用选项"></a>4.4 innobackupex命令常用选项</h3><ul><li>–user=USER：备份服务器数据库用户名</li><li>–password=PASSWORD：备份服务器数据库密码</li><li>–host=HOST：备份服务器的IP</li><li>–port=PORT：备份服务器的端口号</li><li>–no-timestamp：不在指定备份目录下创建以时间戳命名的目录</li><li>–defaults-file：指定默认的my.cnf配置文件</li><li>–apply-log：在指定备份目录下执行应用xtrabackup_logfile文件中的事务日志操作，同时根据配置文件中的innodb_log_file_size系统参数生成新的事务日志</li><li>–redo-only：针对未提交的事务不执行回滚操作，结合–apply-log一起使用</li><li> –copy-back：会从指定目录中读取数据文件，并复制到目标数据库的数据目录中</li><li> –incremental：告诉xtrabackup创建一个增量备份，而不是一个完整的备份</li><li> –incremental-basedir=DIRECTORY：与–incremental一同使用，指定完全备份或上一次增量备份的路径</li><li> –incremental-dir=DIRECTORY：项用于在应用redo日志时指定一个增量备份目录</li></ul><h3 id="4-5-实战：模拟完全备份与恢复"><a href="#4-5-实战：模拟完全备份与恢复" class="headerlink" title="4.5 实战：模拟完全备份与恢复"></a>4.5 实战：模拟完全备份与恢复</h3><p>使用innobackupex命令完全备份数据库文件，并将备份文件放在<code>/data/backup/mysql/test_backup</code>目录下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># mkdir -p /data/backup/mysql/test_backup</span></span><br><span class="line">[root@db01 ~]<span class="comment"># innobackupex --defaults-file=/etc/my.cnf  --user=root --password=123 \</span></span><br><span class="line">--no-timestamp /data/backup/mysql/test_backup/</span><br><span class="line">......</span><br><span class="line">200621 21:18:48 completed OK!     <span class="comment">#看到类似的输出信息，则表示备份成功！</span></span><br></pre></td></tr></table></figure><p>对备份目录执行–apply-log操作：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># innobackupex --user=root --password=123 --apply-log /data/backup/mysql/test_backup/</span></span><br><span class="line">......</span><br><span class="line">200621 21:22:06 completed OK!     <span class="comment">#看到类似的输出信息，则表示--apply-log操作执行成功！</span></span><br></pre></td></tr></table></figure><p>现在模拟数据库数据丢失情况。即先停止数据库，清空数据目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># /etc/init.d/mysqld stop</span></span><br><span class="line">[root@db01 ~]<span class="comment"># rm -rf /usr/local/mysql/data/*</span></span><br></pre></td></tr></table></figure><p>恢复数据，对备份目录执行–copy-back操作，把备份文件复制到之前清空的数据目录下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># innobackupex --defaults-file=/etc/my.cnf --copy-back /data/backup/mysql/test_backup/</span></span><br><span class="line">......</span><br><span class="line">200621 21:51:42 completed OK!     <span class="comment">#看到类似的输出信息，表示--copy-back操作执行成功！  </span></span><br></pre></td></tr></table></figure><p>修改数据目录的属主、属组，启动数据库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># chown -R mysql:mysql /usr/local/mysql/data</span></span><br><span class="line">[root@db01 ~]<span class="comment"># /etc/init.d/mysqld start</span></span><br></pre></td></tr></table></figure><p>登录数据库，校验数据是否正确：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># mysql -uroot -p123 -e &quot;show databases;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-实战：模拟增量备份与恢复"><a href="#4-6-实战：模拟增量备份与恢复" class="headerlink" title="4.6 实战：模拟增量备份与恢复"></a>4.6 实战：模拟增量备份与恢复</h3><p><strong>增量备份特性</strong>：</p><ul><li>基于上一次备份进行增量</li><li>增量备份无法单独恢复，必须基于全备进行恢复</li><li>所有增量必须要按顺序合并到全备当中</li></ul><h4 id="4-6-1-完全备份和增量备份"><a href="#4-6-1-完全备份和增量备份" class="headerlink" title="4.6.1 完全备份和增量备份"></a>4.6.1 完全备份和增量备份</h4><p>使用innobackupex命令给数据库进行一次<strong>完全备份</strong>，备份目录到<code>backup-$(date +%F)</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># innobackupex --user=root --password=123 --no-timestamp /data/backup/mysql/backup-$(date +%F)</span></span><br><span class="line">......</span><br><span class="line">200622 18:38:04 completed OK!</span><br></pre></td></tr></table></figure><p>完全备份成功后，进入数据库新建库、表并插入一些数据（制造增量数据）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database test1;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use test1;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table tb1(id int);</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into tb1(id) values(1),(2),(3);</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tb1;</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>进行<strong>第一次增备备份</strong>。第一次增量备份的basedir是完全备份，因为在第一 次增量备份之前的最近一次备份只有完全备份。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># innobackupex --user=root --password=123 --no-timestamp --incremental-basedir=/data/backup/mysql/backup-2020-06-22/ --incremental /data/backup/mysql/incremental_one</span></span><br><span class="line">......</span><br><span class="line">200622 18:54:29 completed OK!</span><br></pre></td></tr></table></figure><p>继续制造测试数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table tb2(id int,name varchar(10));</span><br><span class="line">Query OK, 0 rows affected (0.37 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into tb2(id,name) values(1,<span class="string">&#x27;name1&#x27;</span>),(2,<span class="string">&#x27;name2&#x27;</span>),(3,<span class="string">&#x27;name3&#x27;</span>);</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tb2;</span><br><span class="line">+------+-------+</span><br><span class="line">| id   | name  |</span><br><span class="line">+------+-------+</span><br><span class="line">|    1 | name1 |</span><br><span class="line">|    2 | name2 |</span><br><span class="line">|    3 | name3 |</span><br><span class="line">+------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>进行<strong>第二次增量备份</strong>。第二次增量备份就不需要再基于完全备份了，因为最近一次备份是第一次增量备份，这里第二次增量备份的<code>basedir</code>是基于第一次增量备份的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># innobackupex --user=root --password=123 --no-timestamp --incremental-basedir=/data/backup/mysql/incremental_one/ --incremental /data/backup/mysql/incremental_two</span></span><br><span class="line">......</span><br><span class="line">200622 19:06:28 completed OK!</span><br></pre></td></tr></table></figure><h4 id="4-6-2-增量备份恢复"><a href="#4-6-2-增量备份恢复" class="headerlink" title="4.6.2 增量备份恢复"></a>4.6.2 增量备份恢复</h4><p>在恢复数据前，先停止数据库并清空相关数据目录（建议先备份在情况）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># /etc/init.d/mysqld stop</span></span><br><span class="line">[root@db01 ~]<span class="comment"># rm -rf /usr/local/mysql/data/*</span></span><br></pre></td></tr></table></figure><p>进入完全备份目录，执行–apply-log操作需要带上–redo-only选项，只应用完成redo日志，不对未提交的事务执行回滚操作。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># cd /data/backup/mysql/backup-2020-06-22</span></span><br><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># innobackupex --apply-log --redo-only ./</span></span><br><span class="line">......</span><br><span class="line">200622 19:54:00 completed OK!</span><br></pre></td></tr></table></figure><p>在完全备份的基础上执行第一次增量备份–apply-log操作（带上–redo-only）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># innobackupex --apply-log --redo-only /data/backup/mysql/backup-2020-06-22/ --incremental-dir=/data/backup/mysql/incremental_one/</span></span><br><span class="line">......</span><br><span class="line">200622 19:58:29 completed OK!</span><br></pre></td></tr></table></figure><p>在执行–apply-log操作的第一次增量备份的完全备份目录中，再对第二次增量备份执行–apply-log操作，因为这是最后一次增量备份，所以不需要加–redo-only选项。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># innobackupex --apply-log /data/backup/mysql/backup-2020-06-22/ --incremental-dir=/data/backup/mysql/incremental_two/</span></span><br><span class="line">......</span><br><span class="line">200622 20:02:57 completed OK!</span><br></pre></td></tr></table></figure><p>最后，在对完全备份目录执行一次–apply-log操作，生成redo log文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># innobackupex --apply-log --redo-only /data/backup/mysql/backup-2020-06-22/</span></span><br><span class="line">......</span><br><span class="line">200622 20:38:34 completed OK!</span><br><span class="line"></span><br><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># ll -h</span></span><br><span class="line">total 243M</span><br><span class="line">-rw-r----- 1 root root  430 Jun 22 20:33 backup-my.cnf</span><br><span class="line">drwxr-x--- 2 root root   70 Jun 22 20:37 binlog</span><br><span class="line">drwxr-x--- 2 root root 4.0K Jun 22 20:37 db_test1</span><br><span class="line">drwxr-x--- 2 root root   20 Jun 22 20:37 db_test3</span><br><span class="line">-rw-r----- 1 root root  76M Jun 22 20:38 ibdata1</span><br><span class="line">-rw-r----- 1 root root  50M Jun 22 20:33 ibdata2</span><br><span class="line">-rw-r----- 1 root root  48M Jun 22 20:38 ib_logfile0</span><br><span class="line">-rw-r----- 1 root root  48M Jun 22 20:38 ib_logfile1</span><br><span class="line">-rw-r----- 1 root root  12M Jun 22 20:37 ibtmp1</span><br><span class="line">drwxr-x--- 2 root root 4.0K Jun 22 20:37 mysql</span><br><span class="line">drwxr-x--- 2 root root 4.0K Jun 22 20:37 performance_schema</span><br><span class="line">drwxr-x--- 2 root root   60 Jun 22 20:37 <span class="built_in">test</span></span><br><span class="line">drwxr-x--- 2 root root   80 Jun 22 20:37 test1</span><br><span class="line">drwxr-x--- 2 root root  176 Jun 22 20:37 world</span><br><span class="line">-rw-r----- 1 root root   27 Jun 22 20:37 xtrabackup_binlog_info</span><br><span class="line">-rw-r--r-- 1 root root   27 Jun 22 20:38 xtrabackup_binlog_pos_innodb</span><br><span class="line">-rw-r----- 1 root root  117 Jun 22 20:38 xtrabackup_checkpoints</span><br><span class="line">-rw-r----- 1 root root  595 Jun 22 20:37 xtrabackup_info</span><br><span class="line">-rw-r----- 1 root root 8.0M Jun 22 20:35 xtrabackup_logfile</span><br></pre></td></tr></table></figure><p>将完全备份目录下的数据文件复制到相关目录下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># innobackupex --copy-back ./</span></span><br><span class="line">......</span><br><span class="line">200622 20:40:22 completed OK!</span><br></pre></td></tr></table></figure><p>修改数据目录属主并启动MySQL：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># chown -R mysql.mysql /usr/local/mysql/data/</span></span><br><span class="line">[root@db01 ~]<span class="comment"># /etc/init.d/mysqld start</span></span><br></pre></td></tr></table></figure><p>登录数据库，效验数据。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># mysql -uroot -p123 -e &quot;use test1;select * from tb1,tb2;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> XtraBackup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 日志管理</title>
      <link href="posts/mysql-log-management/"/>
      <url>posts/mysql-log-management/</url>
      
        <content type="html"><![CDATA[<h2 id="一、日志简介"><a href="#一、日志简介" class="headerlink" title="一、日志简介"></a>一、日志简介</h2><p>MySQL数据库中支持多种日志类型，通过分析日志，我们可以优化数据库性能，排除故障，甚至能够还原数据，本节内容将带你了解MySQL数据库中的日志管理</p><p>&nbsp;</p><h2 id="二、日志分类"><a href="#二、日志分类" class="headerlink" title="二、日志分类"></a>二、日志分类</h2><ul><li>错误日志</li><li>查询日志</li><li>慢查询日志</li><li>二进制日志</li><li>中继日志</li><li>事务日志</li><li>滚动日志</li></ul><p>&nbsp;</p><h2 id="三、日志详解"><a href="#三、日志详解" class="headerlink" title="三、日志详解"></a>三、日志详解</h2><h3 id="1-错误日志"><a href="#1-错误日志" class="headerlink" title="1.错误日志"></a>1.错误日志</h3><h4 id="1-1-错误日志作用"><a href="#1-1-错误日志作用" class="headerlink" title="1.1 错误日志作用"></a>1.1 错误日志作用</h4><ul><li><p>记录服务器运行中产生的错误信息</p></li><li><p>记录服务器启动、停止时产生的信息</p></li><li><p>如果服务器启动了复制进程，复制进程的信息也会被记录</p></li><li><p>记录event错误日志</p></li></ul><h4 id="1-2-查看错误日志"><a href="#1-2-查看错误日志" class="headerlink" title="1.2 查看错误日志"></a>1.2 查看错误日志</h4><p>查看mysql中错误日志的位置</p><ul><li>在mysql命令行中查看</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&quot;log_error&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>在bash命令行中使用mysqladmin查看</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># mysqladmin -uroot -p123 variables | grep -w &quot;log_error&quot;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-设置错误日志"><a href="#1-3-设置错误日志" class="headerlink" title="1.3 设置错误日志"></a>1.3 设置错误日志</h4><p>修改mysql的主配置文件<code>/etc/my.cnf</code>，在服务端中添加如下配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">log_error=/var/<span class="built_in">log</span>/mysql/mysql.err</span><br><span class="line"><span class="comment">#log_error=mysql.err   #默认在数据目录下</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><ul><li>错误日志默认是开启的</li><li>当没有指定错误日志时，错误日志保存在 数据目录<code>$datadir</code>下，以<code>主机名.err</code>命名</li></ul></blockquote><h3 id="2-查询日志"><a href="#2-查询日志" class="headerlink" title="2.查询日志"></a>2.查询日志</h3><p>记录mysql中所有执行成功的SQL语句信息（除了慢查询日志中记录的查询信息），会增大服务器的压力。所以一般不开启查询日志。</p><h4 id="2-1-查看方式"><a href="#2-1-查看方式" class="headerlink" title="2.1 查看方式"></a>2.1 查看方式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&quot;%general_log%&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="2-2-开启方式（默认关闭）"><a href="#2-2-开启方式（默认关闭）" class="headerlink" title="2.2 开启方式（默认关闭）"></a>2.2 开启方式（默认关闭）</h4><ul><li>临时开启</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global general_log=on;</span><br></pre></td></tr></table></figure><ul><li>永久开启</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">general_log=ON</span><br><span class="line">general_log_file=/var/<span class="built_in">log</span>/mysql/mysql.log</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><ul><li>查询日志默认关闭</li><li>默认的位置：在mysql数据目录<code>$datadir</code>下</li></ul></blockquote><h3 id="3-慢查询日志"><a href="#3-慢查询日志" class="headerlink" title="3.慢查询日志"></a>3.慢查询日志</h3><h4 id="3-1-慢查询日志的作用"><a href="#3-1-慢查询日志的作用" class="headerlink" title="3.1 慢查询日志的作用"></a>3.1 慢查询日志的作用</h4><ul><li>将mysql服务器中影响数据库性能的相关SQL语句记录到日志文件</li><li>通过对这些特殊的SQL语句分析，改进以达到提高数据库性能的目的</li></ul><h4 id="3-2-查看方式"><a href="#3-2-查看方式" class="headerlink" title="3.2 查看方式"></a>3.2 查看方式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&quot;%slow_query_log%&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="3-3-开启方式（默认关闭）"><a href="#3-3-开启方式（默认关闭）" class="headerlink" title="3.3 开启方式（默认关闭）"></a>3.3 开启方式（默认关闭）</h4><p>修改mysql的主配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#指定是否开启慢查询日志</span></span><br><span class="line">slow_query_log=ON</span><br><span class="line"><span class="comment">#指定慢日志文件存放位置（默认在data）</span></span><br><span class="line">slow_query_log_file=/var/<span class="built_in">log</span>/mysql/slow.log</span><br><span class="line"><span class="comment">#设定慢查询的阀值(默认10s)</span></span><br><span class="line">long_query_time=5</span><br><span class="line"><span class="comment">#不使用索引的慢查询日志是否记录到索引</span></span><br><span class="line">log_queries_not_using_indexes</span><br><span class="line"><span class="comment">#查询检查返回少于该参数指定行的SQL不被记录到慢查询日志</span></span><br><span class="line">min_examined_row_limit=100 </span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><ul><li>慢查询日志默认关闭</li><li>开启后默认以<code>主机名-slow.log</code>命名</li><li>默认的存放在数据目录<code>$datadir</code>下</li></ul></blockquote><h4 id="3-4-模拟慢查询"><a href="#3-4-模拟慢查询" class="headerlink" title="3.4 模拟慢查询"></a>3.4 模拟慢查询</h4><ul><li>进入到一个库并创建一个新表</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use world</span><br><span class="line">mysql&gt; create table tb01 select * from city;</span><br></pre></td></tr></table></figure><ul><li>将tb01表中的数据插入到tb01中</li></ul><p>多执行几次这个insert语句，直到看见查询时间超过我们设置5s即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into tb01 select * from tb01;</span><br></pre></td></tr></table></figure><ul><li>使用<code>mysqldumpslow</code>命令分析慢查询日志</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># mysqldumpslow -s -c -t 10 /var/log/mysql/slow.log</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>参数说明：</strong></p></blockquote><p>-s    是表示按照何种方式排序，c、t、l、r分别是按照记录次数、时间、查询时间、返回的记录数来排序，ac、at、al、ar，表示相应的倒叙；<br>-t    是top n的意思，即为返回前面多少条的数据；</p><p>-g    后边可以写一个正则匹配模式，大小写不敏感的</p><h3 id="4-二进制日志"><a href="#4-二进制日志" class="headerlink" title="4.二进制日志"></a>4.二进制日志</h3><h4 id="4-1-二进制日志作用"><a href="#4-1-二进制日志作用" class="headerlink" title="4.1 二进制日志作用"></a>4.1 二进制日志作用</h4><ul><li>记录已提交的DML事务语句，并拆分为多个事件（event）来进行记录</li><li>记录所有的SQL语句</li><li>记录对数据库数据进行修改的操作（增、删、改）</li><li>可以恢复数据</li></ul><h4 id="4-2-二进制日志工作模式"><a href="#4-2-二进制日志工作模式" class="headerlink" title="4.2 二进制日志工作模式"></a>4.2 二进制日志工作模式</h4><ul><li><p><strong>STATEMENT</strong></p><p>语句模式，是MySQL5.6默认的模式。用来记录数据库的<strong>增、删、改</strong>等SQL语句。</p><ul><li>查看statement模式的binlog文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 data]<span class="comment"># mysqlbinlog mysql-bin.000002</span></span><br></pre></td></tr></table></figure><ul><li>优缺点</li></ul><p>优点：易读、占用磁盘空间小。</p><p>缺点：记录不太严谨。</p></li><li><p><strong>ROW</strong>：行模式，是MySQL5.7默认模式。</p><ul><li>修改binlog为ROW模式</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 data]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">binlog_format=row</span><br></pre></td></tr></table></figure><ul><li>查看ROW模式下的binlog</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 data]<span class="comment"># mysqlbinlog --base64-output=decode-rows -vvv mysql-bin.000002</span></span><br></pre></td></tr></table></figure><ul><li>优缺点</li></ul><p>优点：记录更加严谨。</p><p>缺点：不易读、占用磁盘空间较大。</p></li><li><p><strong>MIXED</strong>：混合模式（STATEMENT、ROW模式混合）</p></li></ul><h4 id="4-3-二进制日志的管理"><a href="#4-3-二进制日志的管理" class="headerlink" title="4.3 二进制日志的管理"></a>4.3 二进制日志的管理</h4><ul><li><strong>开启二进制日志</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id=1</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>:</p><p> 在MySQL5.7中开启binlog必须要加上server_id。</p></blockquote><ul><li><p><strong>查看二进制日志</strong></p><ul><li>物理查看</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># ll  /usr/local/mysql/data/mysql-bin.*</span></span><br></pre></td></tr></table></figure><ul><li>命令行查看</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show binary logs;</span><br></pre></td></tr></table></figure></li><li><p><strong>刷新binlog</strong></p><ul><li>刷新binlog，会生成一个新的binlog日志文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush logs;</span><br></pre></td></tr></table></figure><ul><li>查看binlog文件最大限制。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&quot;%max_binlog_size%&quot;</span>;</span><br><span class="line">+-----------------+------------+</span><br><span class="line">| Variable_name   | Value      |</span><br><span class="line">+-----------------+------------+</span><br><span class="line">| max_binlog_size | 1073741824 |</span><br><span class="line">+-----------------+------------+</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><p>binlog文件达到1G时，会自动刷新生成一个新的binlog文件</p></blockquote></li><li><p><strong>删除binlog</strong></p><ul><li>删除指定天数前的binlog</li></ul><p>需要在mysql配置文件中加入如下参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">expire_logs_days=7</span><br></pre></td></tr></table></figure><ul><li>保留几天的binlog</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; PURGE BINARY LOGS BEFORE NOW() - INTERVAL 3 day;</span><br></pre></td></tr></table></figure><ul><li>删除指定binlog文件之前的所有binlog文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; PURGE BINARY LOGS TO <span class="string">&#x27;mysql-bin.000005&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>重置binlog</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; reset master;</span><br></pre></td></tr></table></figure><p><strong>二进制日志删除原则</strong>：在存储能力范围内，能多保留则多保留；基于上一次全备前的可以选择删除。</p></li></ul><h4 id="4-4-事件"><a href="#4-4-事件" class="headerlink" title="4.4 事件"></a>4.4 事件</h4><ul><li><p><strong>事件介绍</strong></p><ul><li>在binlog中最小的记录单元为event</li><li>一个事务会被查分成多个事件（event）</li></ul></li><li><p><strong>事件（event）特性</strong></p><ul><li>每个event都有一个开始位置（start position）和结束位置（stop position）。</li><li>所谓的位置就是event对整个二进制的文件的相对位置。</li><li>对于一个二进制日志中，前120个position是文件格式信息预留空间。</li><li>MySQL第一个记录的事件，都是从120开始的。</li></ul></li><li><p><strong>查看binlog事件</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show binlog events <span class="keyword">in</span> <span class="string">&#x27;mysql-bin.000001&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="4-5-模拟二进制日志恢复数据"><a href="#4-5-模拟二进制日志恢复数据" class="headerlink" title="4.5 模拟二进制日志恢复数据"></a>4.5 模拟二进制日志恢复数据</h4><p>ROW模式下的二进制日志分析及数据恢复</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前所在binlog位置点</span></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个binlog库</span></span><br><span class="line">mysql&gt; create database binlog;</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用binlog库</span></span><br><span class="line">mysql&gt; use binlog</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建binglog_table表</span></span><br><span class="line">mysql&gt; create table binlog_table1(id int);</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入几条数据</span></span><br><span class="line">mysql&gt; insert into binlog_table1 values(1);</span><br><span class="line">mysql&gt; insert into binlog_table1 values(2);</span><br><span class="line">mysql&gt; insert into binlog_table1 values(3);</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除id为1的行</span></span><br><span class="line">mysql&gt; delete from binlog_table1 <span class="built_in">where</span> id=1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改id=1为id=22</span></span><br><span class="line">mysql&gt; update binlog_table1 <span class="built_in">set</span> id=22 <span class="built_in">where</span> id=2;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看数据</span></span><br><span class="line">mysql&gt; select * from binlog_table1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#删表</span></span><br><span class="line">mysql&gt; drop table binlog_table1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#删库</span></span><br><span class="line">mysql&gt; drop database binlog;</span><br></pre></td></tr></table></figure><p>恢复数据到delete之前</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看binlog事件</span></span><br><span class="line">mysql&gt; show binlog events <span class="keyword">in</span> <span class="string">&#x27;mysql-bin.00001&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用mysqlbinlog来查看</span></span><br><span class="line">[root@db01 data]<span class="comment"># mysqlbinlog /usr/local/mysql/data/mysql-bin.000001</span></span><br><span class="line">[root@db01 data]<span class="comment"># mysqlbinlog /usr/local/mysql/data/mysql-bin.000001 | grep -v SET</span></span><br><span class="line">[root@db01 data]<span class="comment"># mysqlbinlog --base64-output=decode-rows -vvv mysql-bin.000001</span></span><br><span class="line"><span class="comment">### UPDATE `binlog`.`binlog_table`</span></span><br><span class="line"><span class="comment">### WHERE</span></span><br><span class="line"><span class="comment">###   @1=2 /* INT meta=0 nullable=1 is_null=0 */</span></span><br><span class="line"><span class="comment">### SET</span></span><br><span class="line"><span class="comment">###   @1=22 /* INT meta=0 nullable=1 is_null=0 */</span></span><br><span class="line"><span class="comment">#分析</span></span><br><span class="line">update binlog.binlog_table</span><br><span class="line"><span class="built_in">set</span></span><br><span class="line">@1=22 ---------&gt;@1表示binlog_table中的第一列,集合表结构就是id=22</span><br><span class="line"><span class="built_in">where</span></span><br><span class="line">@1=2  ---------&gt;@1表示binlog_table中的第一列,集合表结构就是id=2</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">update binlog.binlog_table <span class="built_in">set</span> id=22 <span class="built_in">where</span> id=2;</span><br><span class="line"></span><br><span class="line"><span class="comment">#截取二进制日志</span></span><br><span class="line">查看二进制日志后，发现delete语句开始位置是941</span><br><span class="line">[root@db01 ~]<span class="comment"># mysqlbinlog --start-position=120 --stop-position=941 /usr/local/mysql/data/mysql-bin.000001 &gt; /tmp/binlog.sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#临时关闭binlog</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> sql_log_bin=0;</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行sql文件</span></span><br><span class="line">mysql&gt; <span class="built_in">source</span> /tmp/binlog.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看删除的库</span></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">#进binlog库</span></span><br><span class="line">mysql&gt; use binlog</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看删除的表</span></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看表中内容</span></span><br><span class="line">mysql&gt; select * from binlog_table;</span><br></pre></td></tr></table></figure><h3 id="5-事务日志"><a href="#5-事务日志" class="headerlink" title="5.事务日志"></a>5.事务日志</h3><p>InnoDB事务日志主要分为 redo log（重做日志，提供前滚操作） 和 undo log（回滚日志，提供回滚操作）。</p><p>为了最大程度上减少数据写入时io问题，在存储引擎修改表的数据时，会将数据从磁盘拷贝到内存中，然后修改内存中的数据拷贝，再将修改行为持久化到磁盘中（先写redo log buffer(日志缓冲区)(PS:这块我会在下文详细说明),再定期批量写入），而不用每次将修改的数据本身持久化到硬盘中。</p><hr><p>Log Buffer（Redo Log Buffer）：重做日志缓冲区是用于保存将要写入重做日志磁 盘文件中的数据的内存缓冲区域。重做日志缓冲区的大小由innodb_log_buffer_size配置参 数定义。重做日志缓冲区中的内容会定期刷新到磁盘上的日志文件中。更大的重做日志缓 冲区允许运行更大的事务，这在一定程度上避免提交大事务之前需要将重做日志写入磁盘 中。因此，如果在应用场景中经常有大事务，则可以考虑增大重做日志缓冲区以减少磁盘 I/O操作。innodb_flush_log_at_trx_commit参数控制如何将重做日志缓冲区的内容写入日志 文件中（例如，设置为1时，每个事务提交时都需要执行一次将重做日志缓冲区的内容写 入日志文件中）。innodb_flush_log_at_timeout参数控制重做日志的刷新频率。</p><hr><p>Undo Logs：用于存放事务修改之前的旧数据（undo log记录了有关如何撤销事务 对聚集索引记录的最新更改的信息），基于undo实现了MVCC和一致性非锁定读。 InnoDB总共支持128个回滚段，每个回滚段有1023个事务槽位，在并行事务场景中一个事 务槽位对应一个事务。其中32个回滚段位于临时表空间（Temporary Tablespace），也就 是说，对临时表操作的最大并行事务数大约为32×1023个；96个回滚段位于非临时表空间 （系统表空间至少一个，因为MySQL 5.7新增的在线undo truncate功能需要，Undo Tablespace最多95个），也就是说，对非临时表操作的最大并行事务数大约为96×1023 个。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 事务详解</title>
      <link href="posts/mysql-transaction-description/"/>
      <url>posts/mysql-transaction-description/</url>
      
        <content type="html"><![CDATA[<h3 id="1-事务介绍"><a href="#1-事务介绍" class="headerlink" title="1.事务介绍"></a>1.事务介绍</h3><ul><li><p>在 MySQL 中只有使用了 InnoDB 存储引擎的数据库或表才支持事务</p></li><li><p>事务主要针对DML语句（UPDATE、INSERT、DELETE）</p></li><li><p>一组数据操作执行步骤，这些步骤被视为一个工作单元</p><ol><li>用于对多个语句进行分组</li><li>可以在多个客户机并发访问同一个表中的数据时使用</li></ol></li><li><p>在事务中，所有步骤都执行成功或都执行失败</p><ol><li>如果所有步骤正常，则执行</li><li>如果步骤出现错误或不完整，则取消</li></ol></li></ul><h3 id="2-事务ACID特性"><a href="#2-事务ACID特性" class="headerlink" title="2.事务ACID特性"></a>2.事务ACID特性</h3><ul><li><strong>原子性（Atomicity，或称不可分割性）</strong></li></ul><p>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p><ul><li><strong>一致性（Consistency）</strong></li></ul><p>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。例如，完整性约束了a+b=10，一个事务改变了a，那么b也应该随之改变。</p><ul><li><strong>隔离性（Isolation，又称独立性）</strong></li></ul><p>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。更加具体的来讲，就是事务之间的操作是独立的。</p><ul><li><strong>持久性（</strong>D<strong>urability）</strong></li></ul><p>事务执行成功以后，该事务对数据库所作的更改便是持久的保存在数据库之中，不会无缘无故的<a href="https://baike.baidu.com/item/%E5%9B%9E%E6%BB%9A">回滚</a>。</p><h3 id="3-事务的生命周期"><a href="#3-事务的生命周期" class="headerlink" title="3.事务的生命周期"></a>3.事务的生命周期</h3><ul><li><strong>一个成功的事务周期</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BEGIN;<span class="comment">#事务开始</span></span><br><span class="line">...</span><br><span class="line">DML语句</span><br><span class="line">...</span><br><span class="line">ROLLBACK;<span class="comment">#提交事务</span></span><br></pre></td></tr></table></figure><ul><li><strong>一个失败的事务周期</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BEGIN;<span class="comment">#事务开始</span></span><br><span class="line">...</span><br><span class="line">DML语句</span><br><span class="line">...</span><br><span class="line">ROLLBACK;<span class="comment">#回滚事务</span></span><br></pre></td></tr></table></figure><h3 id="4-事务的控制语句"><a href="#4-事务的控制语句" class="headerlink" title="4.事务的控制语句"></a>4.事务的控制语句</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">START TRANSACTION（或 BEGIN）：显式开始一个新事务</span><br><span class="line">SAVEPOINT：分配事务过程中的一个位置，以供将来引用</span><br><span class="line">COMMIT：永久记录当前事务所做的更改</span><br><span class="line">ROLLBACK：取消当前事务所做的更改</span><br><span class="line">ROLLBACK TO SAVEPOINT：取消在 savepoint 之后执行的更改</span><br><span class="line">RELEASE SAVEPOINT：删除 savepoint 标识符</span><br><span class="line">SET AUTOCOMMIT：为当前连接禁用或启用默认 autocommit 模式</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><p>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行DML语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</p></blockquote><h4 id="4-1-自动提交"><a href="#4-1-自动提交" class="headerlink" title="4.1 自动提交"></a>4.1 自动提交</h4><ul><li>查看自动提交</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">&quot;autocommit&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>临时关闭自动提交</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET autocommit=0;</span><br></pre></td></tr></table></figure><ul><li>永久关闭自动提交（修改配置文件）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">autocommit=0</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><p>关闭自动提交以后，手动提交，其他窗口仍看不到数据变化，需要退出！！</p></blockquote><h4 id="4-2-事务演示"><a href="#4-2-事务演示" class="headerlink" title="4.2 事务演示"></a>4.2 事务演示</h4><p>准备下环境，先建个<code>counts</code>表，插入一些初始数据。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE counts(id int, name varchar(10), money int);</span><br><span class="line">mysql&gt; INSERT INTO counts(id,name,money) VALUES(1,<span class="string">&#x27;zhangsan&#x27;</span>,900),(2,<span class="string">&#x27;lisi&#x27;</span>,1100);</span><br></pre></td></tr></table></figure><ul><li><strong>成功事务</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; BEGIN;</span><br><span class="line">mysql&gt; UPDATE counts SET money=1000 WHERE name=<span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">mysql&gt; UPDATE counts SET money=1000 WHERE name=<span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">mysql&gt; COMMIT;</span><br></pre></td></tr></table></figure><ul><li><strong>事务回滚</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; BEGIN;</span><br><span class="line">mysql&gt; UPDATE counts SET money=1500 WHERE name=<span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">mysql&gt; UPDATE counts SET money=500 WHERE name=<span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">mysql&gt; ROLLBACK;</span><br></pre></td></tr></table></figure><h4 id="4-3-事务隐式提交情况"><a href="#4-3-事务隐式提交情况" class="headerlink" title="4.3 事务隐式提交情况"></a>4.3 事务隐式提交情况</h4><ul><li><p>在执行事务期间，如果执行DDL或者DCL会自动提交事务</p></li><li><p>在执行事务期间，如果开启一个新事务，会自动提交上一个事务（在同一客户端）</p></li><li><p>在事务运行期间，执行锁定语句（lock tables、unlock tables），也会自动提交</p></li><li><p>LOAD DATA INFILE</p></li><li><p>SELECT … FOR UPDATE</p></li><li><p>在autocommit=1的时候</p></li></ul><h3 id="5-事务中的锁"><a href="#5-事务中的锁" class="headerlink" title="5.事务中的锁"></a>5.事务中的锁</h3><h4 id="5-1-事务中锁的类型"><a href="#5-1-事务中锁的类型" class="headerlink" title="5.1 事务中锁的类型"></a>5.1 事务中锁的类型</h4><ul><li><p><strong>共享锁（S锁、读锁）</strong>：又称为读锁，允许多个连接同一时刻并发的读取同一资源，互不干扰；</p></li><li><p><strong>排他锁（X锁、写锁）</strong>：又称为写锁，一个写锁会阻塞其他的写锁或读锁，保证同一时刻只有一个连接可以写入数据，同时防止其他用户对这个数据的读写。</p></li><li><p><strong>乐观锁</strong>：多事务操作，数据可以同时被修改，谁先提交以谁为准。</p></li><li><p><strong>悲观锁</strong>：多事务操作，数据只能被一个人操作。</p></li><li><p><strong>意向锁</strong>：意向锁分为意向共享锁和意向排他锁</p><ul><li><p>意向共享锁（IS）：表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须先取得该表的IS锁</p></li><li><p>意向排他锁（IX）：类似上面，表示事务准备给数据行加入排他锁，说明事务在一个数据行加排他锁前必须先取得该表的IX锁。</p><p><strong>注意</strong>：意向锁是表级锁，其设计目的主要是为了在一个事务中揭示下一行将要被请求锁的类型。</p></li></ul></li></ul><h4 id="5-2-锁的粒度"><a href="#5-2-锁的粒度" class="headerlink" title="5.2 锁的粒度"></a>5.2 锁的粒度</h4><ul><li><p>MyISAM：表级锁（低并发锁）</p></li><li><p>InnoDB：行级锁（高并发锁）</p></li></ul><h3 id="6-多版本并发控制（MVCC）"><a href="#6-多版本并发控制（MVCC）" class="headerlink" title="6.多版本并发控制（MVCC）"></a>6.多版本并发控制（MVCC）</h3><ul><li>只阻塞修改类操作，不阻塞查询类操作</li><li>乐观锁的机制（谁先提交谁为准）</li></ul><h3 id="7-事务的隔离级别"><a href="#7-事务的隔离级别" class="headerlink" title="7.事务的隔离级别"></a>7.事务的隔离级别</h3><h4 id="7-1-脏读、不可重复读、幻读"><a href="#7-1-脏读、不可重复读、幻读" class="headerlink" title="7.1 脏读、不可重复读、幻读"></a>7.1 脏读、不可重复读、幻读</h4><ul><li><strong>脏读</strong>：一个事务可以读取另一个尚未提交事务的修改数据。</li><li><strong>不可重复读</strong>：在同一个事务中，如果数据被其他事务修改,不能重复读取该记录原始值。</li><li><strong>幻读</strong>：在同一事务中，同一查询多次进行时候，由于其他插入操作（insert）的事务提交，导致每次返回不同的结果集。</li></ul><h4 id="7-2四种隔离级别"><a href="#7-2四种隔离级别" class="headerlink" title="7.2四种隔离级别"></a>7.2四种隔离级别</h4><table><thead><tr><th align="left">隔离级别</th><th align="left">脏读</th><th align="left">不可重复读</th><th align="left">幻读</th></tr></thead><tbody><tr><td align="left">读未提交（READ UNCOMMITTED）</td><td align="left">可能</td><td align="left">可能</td><td align="left">可能</td></tr><tr><td align="left">读已提交（READ COMMITTED）</td><td align="left">不可能</td><td align="left">可能</td><td align="left">可能</td></tr><tr><td align="left">可重复读（REPEATABLE READ）</td><td align="left">不可能</td><td align="left">不可能</td><td align="left">可能</td></tr><tr><td align="left">可串行化（SERIALIZABLE ）</td><td align="left">不可能</td><td align="left">不可能</td><td align="left">不可能</td></tr></tbody></table><ul><li>读未提交（READ UNCOMMITTED）  </li></ul><p>一个事务可以读取到另一个事务未提交的修改。这会带来脏读，幻读，不可重复读问题</p><ul><li>读已提交（READ COMMITTED）  </li></ul><p>一个事务只能读取另一个事务已经提交的修改。其避免了脏读，仍然存在不可以重复读和幻读问题</p><ul><li>可重复读（REPEATABLE READ）  </li></ul><p>同一个事务中多次读取相同的数据返回的结果是一样的。其避免了脏读和不可重复读问题，但是幻读依然存在</p><ul><li>可串行化（SERIALIZABLE ）  </li></ul><p>事务串行化，最高的事务隔离级别。在每个读取的数据行上加上共享锁实现，这样就避免了脏读、不可重复读和幻读等问题。但是该事务隔离级别执行效率低下，且性能开销也最大，所以一般情况下不推荐使用。</p><h4 id="7-3-查看隔离级别"><a href="#7-3-查看隔离级别" class="headerlink" title="7.3 查看隔离级别"></a>7.3 查看隔离级别</h4><ul><li>查看数据库的隔离级别</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">&quot;%iso%&quot;</span>;</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| Variable_name | Value           |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| tx_isolation  | REPEATABLE-READ |</span><br><span class="line">+---------------+-----------------+</span><br></pre></td></tr></table></figure><ul><li>修改隔离级别为RC（配置文件）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">transaction_isolation=read-commit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 表空间管理</title>
      <link href="posts/mysql-tablespace-management/"/>
      <url>posts/mysql-tablespace-management/</url>
      
        <content type="html"><![CDATA[<h3 id="1-表空间概念"><a href="#1-表空间概念" class="headerlink" title="1.表空间概念"></a>1.表空间概念</h3><p>InnoDB 存储引擎可将所有数据存放于 <code>ibdata*</code> 的共享表空间，也可将每张表存放于独立的 <code>.ibd</code> 文件的独立表空间.<br>共享表空间以及独立表空间都是针对数据的存储方式而言的。</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/29/381a845ae7ba5.png" alt="MySQL_Table_Space.jpg"></p><p><strong>MySQL从5.5</strong>版本以后出现<strong>共享表空间</strong>概念，在<strong>MySQL5.6</strong>版本中默认使用的是<strong>独立表空间</strong>。</p><p>表空间的管理模式的出现是为了数据库的存储更容易扩展。</p><ul><li><p><strong>共享表空间</strong></p><p>某一个数据库的所有的表数据，索引文件全部放在一个文件中，默认这个共享表空间的文件路径在data目录下。 默认的文件名为:ibdata1 初始化为10M。</p></li><li><p><strong>独立表空间</strong></p><p>每一个表都将会生成以独立的文件方式来进行存储，每一个表都有一个.frm表描述文件，还有一个.ibd文件。 其中这个文件包括了单独一个表的数据内容以及索引内容，默认情况下它的存储位置也是在表的位置之中。</p></li></ul><p>&nbsp;</p><h3 id="2-共享表空间"><a href="#2-共享表空间" class="headerlink" title="2.共享表空间"></a>2.共享表空间</h3><h4 id="2-1-查看共享表空间"><a href="#2-1-查看共享表空间" class="headerlink" title="2.1 查看共享表空间"></a>2.1 查看共享表空间</h4><ul><li><p><strong>物理文件查看</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line">$ ll ibdata*</span><br><span class="line">-rw-rw---- 1 mysql mysql 79691776 Jun 17 16:26 ibdata1</span><br></pre></td></tr></table></figure></li><li><p><strong>在数据库命令行中查看</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">&quot;%file_path%&quot;</span>;</span><br><span class="line">+-----------------------+------------------------+</span><br><span class="line">| Variable_name         | Value                  |</span><br><span class="line">+-----------------------+------------------------+</span><br><span class="line">| innodb_data_file_path | ibdata1:12M:autoextend |</span><br><span class="line">+-----------------------+------------------------+</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-共享表中存储的内容"><a href="#2-2-共享表中存储的内容" class="headerlink" title="2.2 共享表中存储的内容"></a>2.2 共享表中存储的内容</h4><p>InnoDB 共享表空间文件 <code>ibdata1</code> 中存储了以下几部分信息:</p><ul><li>Data dictionary</li><li>Double write buffer</li><li>Insert buffer</li><li>Rollback segments</li><li>UNDO space</li><li>Foreign key constraint system tables</li></ul><p>因此，我们在初始化 ibdata1 时，最好设置大一些，这样就可以避免因为在高并发情景下导致 ibdata1 急剧增大，大大影响性能。</p><h4 id="2-3-设置共享表空间"><a href="#2-3-设置共享表空间" class="headerlink" title="2.3 设置共享表空间"></a>2.3 设置共享表空间</h4><p>MySQL 5.7 版本中默认会将 undo 和临时表独立出来，5.6版本也可以独立，只不过需要在初始化的时候进行配置</p><ul><li><p><strong>编辑配置文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">innodb_data_file_path=ibdata1:12M;ibdata2:50M:autoextend</span><br></pre></td></tr></table></figure><p>修改完启动可能会报错，一般是由于<code>ibdata1</code>的大小设置与当前表空间大小不一致造成的。</p><p>解决办法：把<code>ibdata1</code>的大小设置成与当前表空间一致，就可以正常启动。</p></li></ul><p>&nbsp;</p><h3 id="3-独立表空间"><a href="#3-独立表空间" class="headerlink" title="3.独立表空间"></a>3.独立表空间</h3><p>对于用户自主创建的表，会采用此种模式，每个表由一个独立的表空间进行管理。</p><h4 id="3-1-查看独立表空间"><a href="#3-1-查看独立表空间" class="headerlink" title="3.1 查看独立表空间"></a>3.1 查看独立表空间</h4><ul><li><p><strong>物理查看</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql/data/world</span><br><span class="line">$ ll city.*</span><br><span class="line">-rw-rw---- 1 mysql mysql   8710 Jun 15 21:37 city.frm</span><br><span class="line">-rw-rw---- 1 mysql mysql 835584 Jun 15 21:41 city.ibd</span><br></pre></td></tr></table></figure></li><li><p><strong>命令行查看</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">&quot;%per_table%&quot;</span>;</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| innodb_file_per_table | ON    |</span><br><span class="line">+-----------------------+-------+</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2-设置独立空间表"><a href="#3-2-设置独立空间表" class="headerlink" title="3.2 设置独立空间表"></a>3.2 设置独立空间表</h4><ul><li><p><strong>临时设置（命令行设置）</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET GLOBAL innodb_file_per_table=ON;</span><br></pre></td></tr></table></figure></li><li><p><strong>永久设置（修改配置文件）</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">innodb_file_per_table=ON</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;</p><h3 id="4-两种表空间的优缺点"><a href="#4-两种表空间的优缺点" class="headerlink" title="4.两种表空间的优缺点"></a>4.两种表空间的优缺点</h3><h4 id="4-1-共享表空间"><a href="#4-1-共享表空间" class="headerlink" title="4.1 共享表空间"></a>4.1 共享表空间</h4><p><strong>优点：</strong>可以将表空间分成多个文件存放到各个磁盘上（表空间文件大小不受表大小的限制，如一个表可以分布在不同的文件上）。数据和文件放在一起方便管理。</p><p><strong>缺点：</strong>所有的数据和索引存放到一个文件中，虽然可以把一个大文件分成多个小文件，但是多个表及索引在表空间中混合存储，这样对于一个表做了大量删除操作后表空间中将会有大量的空隙，特别是对于统计分析，日值系统这类应用最不适合用共享表空间。</p><h4 id="4-2-独立表空间"><a href="#4-2-独立表空间" class="headerlink" title="4.2 独立表空间"></a>4.2 独立表空间</h4><p><strong>优点：</strong></p><ol><li>每个表都有自已独立的表空间。</li><li>每个表的数据和索引都会存在自已的表空间中。</li><li>可以实现单表在不同的数据库中移动。</li><li>空间可以回收（除drop table操作处，表空不能自已回收）<ul><li>Drop table操作自动回收表空间，如果对于统计分析或是日值表，删除大量数据后可以通过: <code>alter table TableName engine=innodb;</code> 回缩不用的空间。</li><li>对于使innodb-plugin的Innodb使用turncate table也会使空间收缩。</li><li>对于使用独立表空间的表，不管怎么删除，表空间的碎片不会太严重的影响性能，而且还有机会处理。</li></ul></li></ol><p><strong>缺点：</strong></p><ol><li>单表增加过大，如超过100个G。</li><li>相比较之下，使用独占表空间的效率以及性能会更高一点。</li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 多种结构介绍</title>
      <link href="posts/introduction-to-mysql-multiple-structures/"/>
      <url>posts/introduction-to-mysql-multiple-structures/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-体系结构"><a href="#MySQL-体系结构" class="headerlink" title="MySQL 体系结构"></a>MySQL 体系结构</h2><p><img src="https://pic-cdn.wanhebin.com/2021/05/29/e0a4276745017.png" alt="mysql_architecture.png"></p><h3 id="连接层"><a href="#连接层" class="headerlink" title="连接层"></a>连接层</h3><ol><li>验证用户身份</li><li>提供了两种连接方式（TCP/IP连接、socket连接）</li><li>建立与SQL层交互的线程</li></ol><h3 id="SQL-层"><a href="#SQL-层" class="headerlink" title="SQL 层"></a>SQL 层</h3><ol><li>接收连接层传过来的SQL语句，如DDL、DML和存储过程等。并把结果返回给连接层。</li><li>验证SQL语句的语法、语义。</li><li>解析器：解析SQL语句，最终生成执行计划。</li><li>优化器：从多个执行计划中选出最优的一条。</li><li>执行器：执行选出来的最优计划。<ul><li>建立一个与存储引擎层交互的线程。</li><li>执行SQL获取存储引擎层传来的数据，结构化成表格。</li></ul></li><li>如果有缓存的化，会把数据写入到缓存。</li><li>记录执行日志（binlog)</li></ol><h3 id="存储引擎层"><a href="#存储引擎层" class="headerlink" title="存储引擎层"></a>存储引擎层</h3><ol><li>接收SQL层传过来的执行语句</li><li>与磁盘交互，进行数据的读取、存储，将数据返回给SQL层</li></ol><p>&nbsp;</p><h2 id="MySQL-逻辑结构"><a href="#MySQL-逻辑结构" class="headerlink" title="MySQL 逻辑结构"></a>MySQL 逻辑结构</h2><ol><li>库</li><li>表：元数据 + 真实数据行</li><li>元数据：列 + 其他属性</li><li>列：列名 + 数据类型 + 约束（非空、主键、默认值）</li></ol><p>&nbsp;</p><h2 id="MySQL-物理结构"><a href="#MySQL-物理结构" class="headerlink" title="MySQL 物理结构"></a>MySQL 物理结构</h2><h3 id="数据物理结构"><a href="#数据物理结构" class="headerlink" title="数据物理结构"></a>数据物理结构</h3><p>mysql最底层就是数据文件，可以手动在data目录下创建目录，数据库中就能看到这个库。</p><ol><li>MySQL的最底层的物理结构是数据文件，也就是说与存储引擎层打交道的文件，是数据文件。</li><li>存储引擎分为很多种类（Linux中的FS）。</li><li>不同存储引擎的区别：存储方式、安全性、性能。</li></ol><p>数据库创建时：库和表的名字一定要小写。</p><h3 id="数据库物理结构大小单位"><a href="#数据库物理结构大小单位" class="headerlink" title="数据库物理结构大小单位"></a>数据库物理结构大小单位</h3><ol><li>段：由多个区构成，理论上一个表就是一个段。</li><li>区：由连续的多个页组成，理论上一条数据就是一个区，默认为1M。</li><li>页：数据库中的最小存储单元，默认是16K。</li><li>分区表：一个区构成一个段就是一个表。</li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 用户及权限管理</title>
      <link href="posts/mysql-user-permission-management/"/>
      <url>posts/mysql-user-permission-management/</url>
      
        <content type="html"><![CDATA[<h3 id="1-mysql用户的定义"><a href="#1-mysql用户的定义" class="headerlink" title="1.mysql用户的定义"></a>1.mysql用户的定义</h3><p>在mysql中，用户由<strong>用户名</strong>和<strong>主机域</strong>组成的。</p><p><strong>1.1 用户名的写法</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user test1@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>用户名不要以数字、符号开头，如若一定要这么写，给用户名加上引号才能创建用户。</p><p><strong>1.2 用户中的主机域的写法</strong></p><ul><li>单个主机地址写法</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1</span><br><span class="line">::1</span><br><span class="line">localhost</span><br><span class="line">db01</span><br></pre></td></tr></table></figure><ul><li>范围型主机地址写法</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">172.16.1.%</span><br><span class="line">172.16.%.%</span><br><span class="line">172.%.%.%</span><br><span class="line">%</span><br><span class="line">172.16.1.5%</span><br><span class="line">172.16.1.0/255.255.255.0</span><br></pre></td></tr></table></figure><p>其中<code>%</code>代表所有，如<code>172.16.1.%</code>即代表172.16.1.0~172.16.1.255这个范围内的所有地址</p><h3 id="2-用户管理"><a href="#2-用户管理" class="headerlink" title="2.用户管理"></a>2.用户管理</h3><p><strong>2.1 创建用户</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE USER test2@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>2.2 查看数据库中得所有用户</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT User,Host,Password FROM mysql.user;</span><br></pre></td></tr></table></figure><p><strong>2.3 删除创建的用户</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DROP USER test2@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>2.4 修改用户密码</strong></p><ul><li>使用update命令修改密码</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE mysql.user SET Password=PASSWORD(<span class="string">&#x27;123&#x27;</span>) WHERE User=<span class="string">&#x27;root&#x27;</span> AND Host=<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>使用grant授权修改密码</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO root@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>使用mysqladmin修改密码</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#密码明文修改</span></span><br><span class="line">mysqladmin -uroot -p123 password <span class="string">&#x27;456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不让密码显示出来</span></span><br><span class="line">mysqladmin -uroot -p password</span><br></pre></td></tr></table></figure><ul><li>修改当前登录数据的用户密码</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET Password=PASSWORD(<span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-用户权限管理"><a href="#3-用户权限管理" class="headerlink" title="3.用户权限管理"></a>3.用户权限管理</h3><p>在mysql数据库中，给用户授权都是通过<code>grant</code>命令来操作的</p><ul><li>授权所有库、所有表</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO test03@<span class="string">&#x27;172.16.1.%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123&#x27;</span>; </span><br></pre></td></tr></table></figure><ul><li>单库授权</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON mysql.* TO test03@<span class="string">&#x27;172.16.1.%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123&#x27;</span>; </span><br></pre></td></tr></table></figure><ul><li>单表授权</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON mysql.user TO test03@<span class="string">&#x27;172.16.1.%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123&#x27;</span>; </span><br></pre></td></tr></table></figure><ul><li>单列授权，在企业中也称为脱敏（脱离敏感信息）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT SELECT(User,Host) ON mysql.user TO test03@<span class="string">&#x27;172.16.1.%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123&#x27;</span>; </span><br></pre></td></tr></table></figure><h3 id="4-解决忘记数据库root密码问题"><a href="#4-解决忘记数据库root密码问题" class="headerlink" title="4.解决忘记数据库root密码问题"></a>4.解决忘记数据库root密码问题</h3><p>此方法不适用于生产环境，因为要先停止数据库。记住在生产环境中停止数据库是个大忌。</p><ul><li>停止数据库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld</span><br></pre></td></tr></table></figure><ul><li>跳过授权表和网络启动数据库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup mysqld_safe --skip-grant-tables --skip-networking &amp;</span><br></pre></td></tr></table></figure><ul><li>进入数据库，修改密码</li></ul><p>直接使用<code>mysql</code>命令，就可以登进数据库了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update mysql.user <span class="built_in">set</span> password=password(<span class="string">&#x27;123&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> and host=<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ul><li>关闭安全模式启动的数据库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p123 shutdown</span><br></pre></td></tr></table></figure><ul><li>使用systemd启动数据库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><ul><li>连接数据库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 无法连接 MySQL 问题</title>
      <link href="posts/php-cannot-connect-to-mysql-problem/"/>
      <url>posts/php-cannot-connect-to-mysql-problem/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>今天在一台新的服务器中安装了php7.2，mysql-5.6后。测试用php连接mysql时发现无论如何php都连接不上mysql数据库，排除了数据库账号错误，并且php已经安装了连接数据库的mysqlnd扩展。</p><p>&nbsp;</p><h3 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h3><p>使用php连接测试脚本，查看到底是什么错误导致php连接不上mysql的。</p><p>以下是php连接mysql的php测试脚本<code>db-connect-test.php</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"><span class="variable">$dbhost</span> = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="variable">$connect</span>=mysqli_connect(<span class="variable">$dbhost</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line">// 检查连接</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connect</span>)</span><br><span class="line">&#123;</span><br><span class="line">die(<span class="string">&quot;连接错误: &quot;</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">die(<span class="string">&quot;连接成功...\n&quot;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>注意观察php脚本中，$dbhost的值我给的是localhost，也就是使用socket进行连接数据库。</p><p><img src="https://i.loli.net/2020/07/03/GjqXDmUi4F56xtC.png" alt="php_connect_mysql-1.png"></p><p>经过测试，发现PHP报错：No such file or directory in /root/mysql_connect_test.php on line 6</p><p>报错说db-connect-test.php中的第6行有问题，下面看下第8行的代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$connect</span>=mysqli_connect(<span class="variable">$dbhost</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br></pre></td></tr></table></figure><p><code>mysqli_connect()</code>这是php连接数据库的一个函数，根据报错提示这里面缺少文件或目录。</p><p><code>mysqli_connect()</code>函数的参数有：host，username，password，dbname，port，socket。</p><p>在mysqli_connect()函数中，我已经加入了host，username，password，dbname这4个参数了。</p><p>经过调试，发现当我加入socket和port参数时，php就可以正常连接数据库了。</p><p>下面是加入了socket参数后的php脚本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"><span class="variable">$dbhost</span> = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="variable">$dbport</span> = <span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line"><span class="variable">$dbsocket</span> = <span class="string">&#x27;/tmp/mysql.sock&#x27;</span>;</span><br><span class="line"><span class="variable">$connect</span>=mysqli_connect(<span class="variable">$dbhost</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>, <span class="variable">$dbport</span>, <span class="variable">$dbsocket</span>);</span><br><span class="line">// 检查连接</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connect</span>)</span><br><span class="line">&#123;</span><br><span class="line">die(<span class="string">&quot;连接错误: &quot;</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">die(<span class="string">&quot;连接成功...\n&quot;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>到这里可以分析出，php连接数据库的失败的原因很可能是数据库socket连接造成的。</p><p>为了证明这个结论，让PHP使用TCP/IP连接数据进行测试：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"><span class="variable">$dbhost</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$connect</span>=mysqli_connect(<span class="variable">$dbhost</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line">// 检查连接</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connect</span>)</span><br><span class="line">&#123;</span><br><span class="line">die(<span class="string">&quot;连接错误: &quot;</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">die(<span class="string">&quot;连接成功...\n&quot;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>测试结果如下，可以看到使用TCP方式连接是可以成功的。</p><p><img src="https://i.loli.net/2020/07/03/Nvob9Tz8YLsxKde.png" alt="php_connect_mysql-2.png"></p><p>&nbsp;</p><h3 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h3><ul><li>查看mysql的socket文件</li></ul><p>可以看到mysql使用的socket是/tmp/mysql.sock</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;socket&quot;;</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| Variable_name | Value           |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| socket        | /tmp/mysql.sock |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>查看php默认使用的mysql socket</li></ul><p>发现php默认使用的mysql socket是 /var/mysql/mysql.sock</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ php -r <span class="string">&#x27;echo phpinfo();&#x27;</span> | grep mysql.sock</span><br><span class="line">mysqli.default_socket =&gt; /var/lib/mysql/mysql.sock =&gt; /var/lib/mysql/mysql.sock</span><br><span class="line">pdo_mysql.default_socket =&gt; /var/lib/mysql/mysql.sock =&gt; /var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure><p>经过对比，发现php和mysql指定的数据库socket文件路径不一样，这可能也就是导致php在使用socket连接数据库时出错的原因。</p><p>这里先给出2个解决办法：</p><ul><li>方法一：修改mysql的配置文件，配置socket与php的一致</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /var/lib/mysql</span><br><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure><ul><li>方法二：修改php的配置文件，配置socket与mysql的一致</li></ul><p>更改php.ini中的 <code>mysql.default_socket</code>、<code>mysqli.default_socket</code>、<code>pdo_mysql.default_socket</code>。但在PHP72版本中，php.ini配置文件中没有<code>mysql.default_socket</code>，可以不进行设置此条配置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/php.ini</span><br><span class="line">mysqli.default_socket = /tmp/mysql.sock</span><br><span class="line">pdo_mysql.default_socket = /tmp/mysql.sock</span><br></pre></td></tr></table></figure><p>PHP72安装完后，会在bin目录下生成php-config、zts-php-config两个脚本文件，这连个脚本用于获取所安装的php配置的信息。这2个脚本中的socket路径也只默认为/var/lib/mysql/mysql.sock</p><p>修改脚这两个文件来制定mysql socket（可选，非必须修改）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -i <span class="string">&#x27;s@--with-mysql-sock=/var/lib/mysql/mysql.sock@--with-mysql-sock=/tmp/mysql.sock@g&#x27;</span> /bin/php-config</span><br><span class="line">$ sed -i <span class="string">&#x27;s@--with-mysql-sock=/var/lib/mysql/mysql.sock@--with-mysql-sock=/tmp/mysql.sock@g&#x27;</span> /bin/zts-php-config</span><br></pre></td></tr></table></figure><p>修改完配置再重启php-fpm后，php就可以使用socket的连接方式连接数据库了。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 误删登录用户故障解决</title>
      <link href="posts/mysql-mistakenlydelete-loginuser-solution/"/>
      <url>posts/mysql-mistakenlydelete-loginuser-solution/</url>
      
        <content type="html"><![CDATA[<h3 id="1-模拟误删用户表的用户"><a href="#1-模拟误删用户表的用户" class="headerlink" title="1.模拟误删用户表的用户"></a>1.模拟误删用户表的用户</h3><h5 id="1-1-查看下当前用户表的用户"><a href="#1-1-查看下当前用户表的用户" class="headerlink" title="1.1 查看下当前用户表的用户"></a>1.1 查看下当前用户表的用户</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT User,Host FROM mysql.user;</span><br><span class="line">+------+-----------+</span><br><span class="line">| User | Host      |</span><br><span class="line">+------+-----------+</span><br><span class="line">| root | 127.0.0.1 |</span><br><span class="line">| root | db02      |</span><br><span class="line">| root | localhost |</span><br><span class="line">+------+-----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="1-2-误删所有用户"><a href="#1-2-误删所有用户" class="headerlink" title="1.2 误删所有用户"></a>1.2 误删所有用户</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELETE FROM mysql.user WHERE 1=1;</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>查看误删后的用户表，所有用户都被删除了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT User,Host FROM mysql.user;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="1-3-重新登录数据库"><a href="#1-3-重新登录数据库" class="headerlink" title="1.3 重新登录数据库"></a>1.3 重新登录数据库</h5><p>虽然数据库中用户表的所有用户都被删除了，但是现在还可以继续使用root用户登录数据库（注意不能重启数据库）。一旦重启数据库就无法登录数据库了。</p><p>重启后登录数据库，可以发现已经无法登录数据库了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p123</span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class="line"></span><br><span class="line">$ mysql</span><br><span class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (using password: NO)</span><br></pre></td></tr></table></figure><h3 id="2-解决无法登录数据的问题"><a href="#2-解决无法登录数据的问题" class="headerlink" title="2. 解决无法登录数据的问题"></a>2. 解决无法登录数据的问题</h3><h5 id="2-1-停止数据库"><a href="#2-1-停止数据库" class="headerlink" title="2.1 停止数据库"></a>2.1 停止数据库</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld</span><br></pre></td></tr></table></figure><h5 id="2-2-启动数据库"><a href="#2-2-启动数据库" class="headerlink" title="2.2 启动数据库"></a>2.2 启动数据库</h5><ul><li>跳过授权表启动数据库</li></ul><p>只跳过授权表启动数据库后，任何一台服务器都可以连接此数据库，安全性极低。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld_safe --skip-grant-tables &amp;                       </span><br></pre></td></tr></table></figure><ul><li>跳过授权表和网络启动数据库</li></ul><p>跳过网络启动，只能这台服务器连接数据库了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld_safe --skip-grant-tables --skip-networking &amp;</span><br></pre></td></tr></table></figure><h5 id="2-3-登录数据库"><a href="#2-3-登录数据库" class="headerlink" title="2.3 登录数据库"></a>2.3 登录数据库</h5><p>启动成功后，使用<code>mysql</code>命令直接登录，不需要指定用户和密码。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql</span><br></pre></td></tr></table></figure><h3 id="3-恢复用户表中的用户"><a href="#3-恢复用户表中的用户" class="headerlink" title="3.恢复用户表中的用户"></a>3.恢复用户表中的用户</h3><h5 id="3-1-登录数据库给root用户授权"><a href="#3-1-登录数据库给root用户授权" class="headerlink" title="3.1 登录数据库给root用户授权"></a>3.1 登录数据库给root用户授权</h5><p>通过跳过网络和授权表的方式启动数据库后，给root用户授权</p><ul><li>刷新数据库权限和缓存</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><ul><li>授权root用户</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h5 id="3-2-重启数据库"><a href="#3-2-重启数据库" class="headerlink" title="3.2 重启数据库"></a>3.2 重启数据库</h5><ul><li>关闭<code>mysqld_safe</code>方式启动的数据库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p123 shutdown</span><br></pre></td></tr></table></figure><ul><li>使用systemd来启动数据库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><h5 id="3-3-登录数据库"><a href="#3-3-登录数据库" class="headerlink" title="3.3 登录数据库"></a>3.3 登录数据库</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123</span><br></pre></td></tr></table></figure><p>登录数据库后，查看用户表：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT User,Host FROM mysql.user;</span><br><span class="line">+------+-----------+</span><br><span class="line">| User | Host      |</span><br><span class="line">+------+-----------+</span><br><span class="line">| root | localhost |</span><br><span class="line">+------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>查看其权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM mysql.user WHERE User=<span class="string">&#x27;root&#x27;</span> AND Host=<span class="string">&#x27;localhost&#x27;</span>\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">                  Host: localhost</span><br><span class="line">                  User: root</span><br><span class="line">              Password: *23AE809DDACAF96AF0FD78ED04B6A265E05AA257</span><br><span class="line">           Select_priv: Y</span><br><span class="line">           Insert_priv: Y</span><br><span class="line">           Update_priv: Y</span><br><span class="line">           Delete_priv: Y</span><br><span class="line">           Create_priv: Y</span><br><span class="line">             Drop_priv: Y</span><br><span class="line">           Reload_priv: Y</span><br><span class="line">         Shutdown_priv: Y</span><br><span class="line">          Process_priv: Y</span><br><span class="line">             File_priv: Y</span><br><span class="line">            Grant_priv: Y</span><br><span class="line">       References_priv: Y</span><br><span class="line">            Index_priv: Y</span><br><span class="line">            Alter_priv: Y</span><br><span class="line">          Show_db_priv: Y</span><br><span class="line">            Super_priv: Y</span><br><span class="line"> Create_tmp_table_priv: Y</span><br><span class="line">      Lock_tables_priv: Y</span><br><span class="line">          Execute_priv: Y</span><br><span class="line">       Repl_slave_priv: Y</span><br><span class="line">      Repl_client_priv: Y</span><br><span class="line">      Create_view_priv: Y</span><br><span class="line">        Show_view_priv: Y</span><br><span class="line">   Create_routine_priv: Y</span><br><span class="line">    Alter_routine_priv: Y</span><br><span class="line">      Create_user_priv: Y</span><br><span class="line">            Event_priv: Y</span><br><span class="line">          Trigger_priv: Y</span><br><span class="line">Create_tablespace_priv: Y</span><br><span class="line">              ssl_type: </span><br><span class="line">            ssl_cipher: </span><br><span class="line">           x509_issuer: </span><br><span class="line">          x509_subject: </span><br><span class="line">         max_questions: 0</span><br><span class="line">           max_updates: 0</span><br><span class="line">       max_connections: 0</span><br><span class="line">  max_user_connections: 0</span><br><span class="line">                plugin: mysql_native_password</span><br><span class="line"> authentication_string: </span><br><span class="line">      password_expired: N</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>可以看到root用户已经恢复，并且拥有了所有权限。</p><h5 id="3-4-恢复其他用户"><a href="#3-4-恢复其他用户" class="headerlink" title="3.4 恢复其他用户"></a>3.4 恢复其他用户</h5><p>root用户恢复完成后，就可以再继续开始恢复其他用户。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KVM 虚拟化管理平台 WebVirtMgr 部署实战</title>
      <link href="posts/kvm-virtual-platform-webvirtmgr/"/>
      <url>posts/kvm-virtual-platform-webvirtmgr/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>​        当Kvm宿主机越来越多，需要对宿主机的状态进行调控，决定采用WebVirtMgr作为Kvm虚拟化的web管理工具，图形化的WEB，让人能更方便的查看Kvm宿主机的情况和操作。</p><p>​        WebVirtMgr是近两年来发展较快，比较活跃，非常清新的一个Kvm管理平台，提供对宿主机和虚机的统一管理，它有别于Kvm自带的图形管理工具（virtual machine manager），让Kvm管理变得更为可视化，对中小型Kvm应用场景带来了更多方便。</p><p>​        WebVirtMgr采用几乎纯Python开发，其前端是基于Python的Django，后端是基于Libvirt的Python接口，将日常Kvm的管理操作变的更加的可视化。</p><p>&nbsp;</p><h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h2><ul><li>操作简单，易于使用</li><li>通过 <code>libvirt</code> 的API接口对Kvm进行管理</li><li>提供对虚拟机生命周期管理</li></ul><p>&nbsp;</p><h2 id="3-功能"><a href="#3-功能" class="headerlink" title="3. 功能"></a>3. 功能</h2><ul><li>宿主机管理支持以下功能</li></ul><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">CPU利用率</span><br><span class="line">内存利用率</span><br><span class="line">网络资源池管理</span><br><span class="line">存储资源池管理</span><br><span class="line">虚拟机镜像</span><br><span class="line">虚拟机克隆</span><br><span class="line">快照管理</span><br><span class="line">日志管理</span><br><span class="line">虚机迁移</span><br></pre></td></tr></table></figure><ul><li>虚拟机管理支持以下功能</li></ul><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">CPU利用率</span><br><span class="line">内存利用率</span><br><span class="line">光盘管理</span><br><span class="line">关/开/暂停虚拟机</span><br><span class="line">安装虚拟机</span><br><span class="line">VNC console连接</span><br><span class="line">创建快照</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="4-安装部署"><a href="#4-安装部署" class="headerlink" title="4. 安装部署"></a>4. 安装部署</h2><p>WebVirtMgr官网: <a href="https://github.com/retspen/webvirtmgr/wiki/Install-WebVirtMgr">https://github.com/retspen/webvirtmgr/wiki/Install-WebVirtMgr</a></p><blockquote><p><strong>注意</strong>：</p><p>WebVirtMgr只提供对Kvm的管理功能，所以需要提前安装部署好KVM虚拟化的环境，才能保证可以正常使用WebVirtMgr这款工具。</p></blockquote><h3 id="4-1-安装WebVirtMgr相关依赖"><a href="#4-1-安装WebVirtMgr相关依赖" class="headerlink" title="4.1 安装WebVirtMgr相关依赖"></a>4.1 安装WebVirtMgr相关依赖</h3><p>首先要安装Kvm虚拟化环境，这里我将WebVirtMgr服务器和Kvm服务器放在同一台机器上部署的，即单机部署。</p><h4 id="4-1-1-安装epel源"><a href="#4-1-1-安装epel源" class="headerlink" title="4.1.1 安装epel源"></a>4.1.1 安装epel源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure><h4 id="4-1-2-安装依赖及环境"><a href="#4-1-2-安装依赖及环境" class="headerlink" title="4.1.2 安装依赖及环境"></a>4.1.2 安装依赖及环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx</span><br></pre></td></tr></table></figure><h4 id="4-1-3-安装编译软件"><a href="#4-1-3-安装编译软件" class="headerlink" title="4.1.3 安装编译软件"></a>4.1.3 安装编译软件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc python-devel</span><br></pre></td></tr></table></figure><h4 id="4-1-4-安装numpy"><a href="#4-1-4-安装numpy" class="headerlink" title="4.1.4 安装numpy"></a>4.1.4 安装numpy</h4><p>numpy 是 Python 进行科学计算的基础软件包。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装可能报错，执行以下命令升级pip后，进行下载安装</span></span><br><span class="line">python -m pip install --upgrade --force pip</span><br></pre></td></tr></table></figure><h3 id="4-2-安装Python需求"><a href="#4-2-安装Python需求" class="headerlink" title="4.2 安装Python需求"></a>4.2 安装Python需求</h3><h4 id="4-2-1-下载WebVirtMgr包"><a href="#4-2-1-下载WebVirtMgr包" class="headerlink" title="4.2.1 下载WebVirtMgr包"></a>4.2.1 下载<code>WebVirtMgr</code>包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># git clone git://github.com/retspen/webvirtmgr.git</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-安装-WebVirtMgr-的python依赖"><a href="#4-2-2-安装-WebVirtMgr-的python依赖" class="headerlink" title="4.2.2 安装  WebVirtMgr 的python依赖"></a>4.2.2 安装  WebVirtMgr 的python依赖</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># cd webvirtmgr/</span></span><br><span class="line">[root@kvm-server-01 webvirtmgr]<span class="comment"># pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-检查-sqlite3"><a href="#4-2-3-检查-sqlite3" class="headerlink" title="4.2.3  检查 sqlite3"></a>4.2.3  检查 sqlite3</h4><p>自带不需要安装，导入模块检查一下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 webvirtmgr]<span class="comment"># python</span></span><br><span class="line">Python 2.7.5 (default, Apr  2 2020, 13:16:51) </span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import sqlite3</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exit</span>()</span><br></pre></td></tr></table></figure><h4 id="4-2-4-初始化账号"><a href="#4-2-4-初始化账号" class="headerlink" title="4.2.4 初始化账号"></a>4.2.4 初始化账号</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给脚本添加执行权限</span></span><br><span class="line">[root@kvm-server-01 webvirtmgr]<span class="comment"># chmod +x manage.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本</span></span><br><span class="line">[root@kvm-server-01 webvirtmgr]<span class="comment"># ./manage.py syncdb</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-1.png"></p><h4 id="4-2-5-生成配置文件"><a href="#4-2-5-生成配置文件" class="headerlink" title="4.2.5 生成配置文件"></a>4.2.5 生成配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 webvirtmgr]<span class="comment"># ./manage.py collectstatic</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-2.png"></p><h4 id="4-2-6-添加其他超级用户"><a href="#4-2-6-添加其他超级用户" class="headerlink" title="4.2.6 添加其他超级用户"></a>4.2.6 添加其他超级用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这个是管理员账号，用上面的admin和这个账号都可以登录</span></span><br><span class="line">[root@kvm-server-01 webvirtmgr]<span class="comment"># ./manage.py createsuperuser</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-2.png"></p><h3 id="4-3-配置Nginx"><a href="#4-3-配置Nginx" class="headerlink" title="4.3 配置Nginx"></a>4.3 配置Nginx</h3><blockquote><p>警告：通常，WebVirtMgr仅可从端口8000上的本地主机访问。通过配置nginx使用反向代理，可以使用80端口直接访问，这样访问不怎么安全。</p><p>设置加密连接的方式，使用8000端口访问。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># ssh 10.0.0.11 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="4-3-1-修改Nginx配置文件"><a href="#4-3-1-修改Nginx配置文件" class="headerlink" title="4.3.1 修改Nginx配置文件"></a>4.3.1 修改Nginx配置文件</h4><ul><li>配置WebVirtMgr的Nginx配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 webvirtmgr]<span class="comment"># vim /etc/nginx/conf.d/webvirtmgr.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line"></span><br><span class="line">    server_name <span class="variable">$hostname</span>;</span><br><span class="line">    <span class="comment">#access_log /var/log/nginx/webvirtmgr_access_log; </span></span><br><span class="line"></span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        root /var/www/webvirtmgr/webvirtmgr; <span class="comment"># or /srv instead of /var</span></span><br><span class="line">        expires max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(js|css)$ &#123;</span><br><span class="line">           proxy_pass http://127.0.0.1:8000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8000;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-for <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        proxy_connect_timeout 600;</span><br><span class="line">        proxy_read_timeout 600;</span><br><span class="line">        proxy_send_timeout 600;</span><br><span class="line">        client_max_body_size 1024M; <span class="comment"># Set higher depending on your needs </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改<code>/etc/nginx/nginx.conf</code>文件，注释server部分</li><li>重启nginx服务，设置开机自启动</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># systemctl restart nginx.service</span></span><br><span class="line">[root@kvm-server-01 ~]<span class="comment"># systemctl enable nginx.service</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-移动-webvirtmgr-软件包目录"><a href="#4-3-2-移动-webvirtmgr-软件包目录" class="headerlink" title="4.3.2 移动 webvirtmgr 软件包目录"></a>4.3.2 移动 webvirtmgr 软件包目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># mkdir /var/www</span></span><br><span class="line">[root@kvm-server-01 ~]<span class="comment"># mv webvirtmgr /var/www/</span></span><br><span class="line">[root@kvm-server-01 ~]<span class="comment"># chown -R nginx:nginx /var/www/webvirtmgr/</span></span><br></pre></td></tr></table></figure><h3 id="4-4-配置-supervisord"><a href="#4-4-配置-supervisord" class="headerlink" title="4.4 配置 supervisord"></a>4.4 配置 supervisord</h3><h4 id="4-4-1-添加webvirtmgr-ini文件"><a href="#4-4-1-添加webvirtmgr-ini文件" class="headerlink" title="4.4.1 添加webvirtmgr.ini文件"></a>4.4.1 添加webvirtmgr.ini文件</h4><ul><li>创建 <code>/etc/supervisord.d/webvirtmgr.ini</code> 文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># cat /etc/supervisord.d/webvirtmgr.ini</span></span><br><span class="line">[program:webvirtmgr]</span><br><span class="line"><span class="built_in">command</span>=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py</span><br><span class="line">directory=/var/www/webvirtmgr</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">logfile=/var/<span class="built_in">log</span>/supervisor/webvirtmgr.log</span><br><span class="line">log_stderr=<span class="literal">true</span></span><br><span class="line">user=nginx</span><br><span class="line"></span><br><span class="line">[program:webvirtmgr-console]</span><br><span class="line"><span class="built_in">command</span>=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console</span><br><span class="line">directory=/var/www/webvirtmgr</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/supervisor/webvirtmgr-console.log</span><br><span class="line">redirect_stderr=<span class="literal">true</span></span><br><span class="line">user=nginx</span><br></pre></td></tr></table></figure><ul><li>启动守护进程supervisord</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># systemctl  start supervisord.service </span></span><br><span class="line">[root@kvm-server-01 ~]<span class="comment"># systemctl  enable supervisord.service </span></span><br></pre></td></tr></table></figure><h4 id="4-4-2-检查服务端口"><a href="#4-4-2-检查服务端口" class="headerlink" title="4.4.2 检查服务端口"></a>4.4.2 检查服务端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># netstat -tln | grep -E &#x27;6080|8000&#x27; </span></span><br><span class="line">tcp        0      0 127.0.0.1:6080          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 127.0.0.1:8000          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp6       0      0 ::1:6080                :::*                    LISTEN     </span><br><span class="line">tcp6       0      0 ::1:8000                :::*                    LISTEN  </span><br></pre></td></tr></table></figure><h3 id="4-5-使用浏览器访问"><a href="#4-5-使用浏览器访问" class="headerlink" title="4.5 使用浏览器访问"></a>4.5 使用浏览器访问</h3><p>浏览器输入网址：<a href="http://10.0.0.11/">http://10.0.0.11</a></p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-4.png"></p><p><strong>只有超级管理员登陆后才能看到“基础构架”窗口</strong></p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-5.png"></p><h3 id="4-6-远程连接设置"><a href="#4-6-远程连接设置" class="headerlink" title="4.6 远程连接设置"></a>4.6 远程连接设置</h3><p>使用tcp进行对远程libvirtd进行连接访问的配置</p><h4 id="4-6-1-修改文件-libvirtd，用来启用tcp的端口"><a href="#4-6-1-修改文件-libvirtd，用来启用tcp的端口" class="headerlink" title="4.6.1 修改文件 libvirtd，用来启用tcp的端口"></a>4.6.1 修改文件 <code>libvirtd</code>，用来启用tcp的端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># grep -Ev &quot;^$|#&quot; /etc/sysconfig/libvirtd</span></span><br><span class="line">LIBVIRTD_CONFIG=/etc/libvirt/libvirtd.conf</span><br><span class="line">LIBVIRTD_ARGS=<span class="string">&quot;--listen&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4-6-2-修改文件-etc-libvirt-libvirtd-conf"><a href="#4-6-2-修改文件-etc-libvirt-libvirtd-conf" class="headerlink" title="4.6.2 修改文件/etc/libvirt/libvirtd.conf"></a>4.6.2 修改文件/etc/libvirt/libvirtd.conf</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># grep -Ev &quot;^$|#&quot; /etc/libvirt/libvirtd.conf</span></span><br><span class="line">listen_tls = 0</span><br><span class="line">listen_tcp = 1</span><br><span class="line">tcp_port = <span class="string">&quot;16509&quot;</span></span><br><span class="line">listen_addr = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">auth_tcp = <span class="string">&quot;none&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4-6-3-重启libvirtd"><a href="#4-6-3-重启libvirtd" class="headerlink" title="4.6.3 重启libvirtd"></a>4.6.3 重启<code>libvirtd</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># systemctl restart libvirtd.service</span></span><br></pre></td></tr></table></figure><h4 id="4-6-4-查看端口16509是否启动"><a href="#4-6-4-查看端口16509是否启动" class="headerlink" title="4.6.4 查看端口16509是否启动"></a>4.6.4 查看端口16509是否启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># netstat -tln | grep 16509</span></span><br><span class="line">tcp        0      0 0.0.0.0:16509           0.0.0.0:*               LISTEN </span><br></pre></td></tr></table></figure><h4 id="4-6-5-在source-host连接dest-host远程libvirtd查看信息"><a href="#4-6-5-在source-host连接dest-host远程libvirtd查看信息" class="headerlink" title="4.6.5 在source host连接dest host远程libvirtd查看信息"></a>4.6.5 在source host连接dest host远程libvirtd查看信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment"># virsh -c qemu+tcp://10.0.0.11/system</span></span><br><span class="line">Welcome to virsh, the virtualization interactive terminal.</span><br><span class="line"></span><br><span class="line">Type:  <span class="string">&#x27;help&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span> with commands</span><br><span class="line">       <span class="string">&#x27;quit&#x27;</span> to quit</span><br><span class="line"></span><br><span class="line">virsh <span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="4-6-6-WEB端进行TCP连接"><a href="#4-6-6-WEB端进行TCP连接" class="headerlink" title="4.6.6 WEB端进行TCP连接"></a>4.6.6 WEB端进行TCP连接</h4><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-6.png"></p><h4 id="4-6-7-添加多台进行管理"><a href="#4-6-7-添加多台进行管理" class="headerlink" title="4.6.7 添加多台进行管理"></a>4.6.7 添加多台进行管理</h4><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-7.png"></p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-8.png"></p><h3 id="4-7-更新控制台显示"><a href="#4-7-更新控制台显示" class="headerlink" title="4.7 更新控制台显示"></a>4.7 更新控制台显示</h3><p>解决控制台连接失败的问题，如下图：</p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-9.png"></p><h4 id="4-7-1-同步-webvirtmgr-的源码"><a href="#4-7-1-同步-webvirtmgr-的源码" class="headerlink" title="4.7.1 同步 webvirtmgr 的源码"></a>4.7.1 同步 webvirtmgr 的源码</h4><p>在webvirtmgr目录下进行 <code>git pull</code> 拉取最新源码，同步当前目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 ~]<span class="comment">#  cd /var/www/webvirtmgr</span></span><br><span class="line">[root@kvm-server-01 webvirtmgr]<span class="comment"># git pull</span></span><br><span class="line">remote: Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 9 (delta 3), reused 3 (delta 3), pack-reused 6</span><br><span class="line">Unpacking objects: 100% (9/9), <span class="keyword">done</span>.</span><br><span class="line">From git://github.com/retspen/webvirtmgr</span><br><span class="line">   79c8a8b..86bb20f  master     -&gt; origin/master</span><br><span class="line">Updating 79c8a8b..86bb20f</span><br><span class="line">Fast-forward</span><br><span class="line"> .travis.yml      | 3 +--</span><br><span class="line"> README.rst       | 4 ----</span><br><span class="line"> requirements.txt | 2 +-</span><br><span class="line"> 3 files changed, 2 insertions(+), 7 deletions(-)</span><br></pre></td></tr></table></figure><h4 id="4-7-2-生成配置文件"><a href="#4-7-2-生成配置文件" class="headerlink" title="4.7.2 生成配置文件"></a>4.7.2 生成配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 webvirtmgr]<span class="comment"># ./manage.py collectstatic</span></span><br><span class="line">WARNING:root:No local_settings file found.</span><br><span class="line"></span><br><span class="line">You have requested to collect static files at the destination</span><br><span class="line">location as specified <span class="keyword">in</span> your settings.</span><br><span class="line"></span><br><span class="line">This will overwrite existing files!</span><br><span class="line">Are you sure you want to <span class="keyword">do</span> this?</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;yes&#x27;</span> to <span class="built_in">continue</span>, or <span class="string">&#x27;no&#x27;</span> to cancel: yes</span><br><span class="line"></span><br><span class="line">0 static files copied, 75 unmodified.</span><br></pre></td></tr></table></figure><h4 id="4-7-3-重启-supervisord-服务"><a href="#4-7-3-重启-supervisord-服务" class="headerlink" title="4.7.3 重启 supervisord 服务"></a>4.7.3 重启 supervisord 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm-server-01 webvirtmgr]<span class="comment"># systemctl restart supervisord.service</span></span><br></pre></td></tr></table></figure><p><strong>再次使用控制台：</strong></p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-10.png" alt="kvm_webvirtmgr-10.png"></p><p>&nbsp;</p><h2 id="5-界面基础操作"><a href="#5-界面基础操作" class="headerlink" title="5. 界面基础操作"></a>5. 界面基础操作</h2><h3 id="5-1-创建存储池"><a href="#5-1-创建存储池" class="headerlink" title="5.1 创建存储池"></a>5.1 创建存储池</h3><p><strong>点击前面创建的宿主机，进入虚拟机部署界面</strong></p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-11.png"><strong>点击“存储池”按钮，创建存储池（即创建磁盘镜像存放的位置）</strong></p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-12.png"></p><blockquote><p><strong>注意</strong>： </p><p>创建存储池时,首先要在宿主机上创建一个目录，然后在”路径“设置栏中添加该目录。</p><p>把提前下载好的centos镜像拷贝到上面创建的存储池目录下；这里可以放不同版本的系统镜像(windows也可以)，以便在下面安装过程中选择不同镜像安装系统</p></blockquote><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-13.png"></p><h3 id="5-2-添加磁盘镜像"><a href="#5-2-添加磁盘镜像" class="headerlink" title="5.2 添加磁盘镜像"></a>5.2 添加磁盘镜像</h3><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-14.png"><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-15.png"><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-16.png"></p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-17.png"></p><h3 id="5-3-宿主机网卡的桥接模式设置"><a href="#5-3-宿主机网卡的桥接模式设置" class="headerlink" title="5.3 宿主机网卡的桥接模式设置"></a>5.3 宿主机网卡的桥接模式设置</h3><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-18.png"></p><blockquote><p><strong>注意</strong>：</p><p>下面的“设备”一项要填写桥接的物理网卡（即br0对应的那个网卡，这里填的是宿主机之前的网卡eth0） 网关地址也一定要填写正确，不然虚拟机和宿主机同网段机器则会网络不通。（如下这一步其实就是创建桥接的网卡配置，也可以在服务器上执行命令<code>virsh iface-bridge eth0 br0</code>创建）</p></blockquote><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-19.png"></p><h3 id="5-4-创建网络池"><a href="#5-4-创建网络池" class="headerlink" title="5.4 创建网络池"></a>5.4 创建网络池</h3><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-20.png"></p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-21.png"></p><h3 id="5-5-创建虚拟主机实例"><a href="#5-5-创建虚拟主机实例" class="headerlink" title="5.5 创建虚拟主机实例"></a>5.5 创建虚拟主机实例</h3><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-22.png"><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-23.png"></p><blockquote><p><strong>注意</strong>：</p><p>这里的镜像需要手动上传到服务器的存储目录下。</p></blockquote><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-24.png"><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-25.png"><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-26.png"></p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-27.png"></p><h3 id="5-6-删除虚拟主机实例"><a href="#5-6-删除虚拟主机实例" class="headerlink" title="5.6 删除虚拟主机实例"></a>5.6 删除虚拟主机实例</h3><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-28.png"></p><h3 id="5-7-克隆虚拟及实例操作"><a href="#5-7-克隆虚拟及实例操作" class="headerlink" title="5.7 克隆虚拟及实例操作"></a>5.7 克隆虚拟及实例操作</h3><p><strong>进入虚机配置界面，在克隆配置项，为新的虚机的“名字”，“MAC地址”，“磁盘镜像”进行设置</strong></p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-29.png"><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-30.png"><strong>登录之后修改IP地址即可</strong></p><p><img src="https://pic-cdn.wanhebin.com/2020/kvm/kvm_webvirtmgr-31.png"> </p>]]></content>
      
      
      <categories>
          
          <category> KVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KVM </tag>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 构建私有 CA</title>
      <link href="posts/centos7-builds-private-ca/"/>
      <url>posts/centos7-builds-private-ca/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是证书颁发机构（CA）？"><a href="#什么是证书颁发机构（CA）？" class="headerlink" title="什么是证书颁发机构（CA）？"></a>什么是证书颁发机构（CA）？</h2><p>A <strong>认证中心（CA）</strong>，有时也称为 <strong>认证机构</strong>，是一家公司或组织，负责验证实体（例如网站，电子邮件地址，公司或个人）的身份，并通过发行称为“电子文件”的电子文件将其绑定到加密密钥 <strong>数字证书</strong>。 数字证书提供：</p><ul><li><strong>认证</strong>，作为凭证来验证颁发给该实体的实体的身份。</li><li><strong>加密，</strong> 用于通过不安全的网络（例如Internet）进行安全通信。</li><li><strong>诚信</strong> 文件 <strong>签</strong> 并附有证明书，以免运输中的第三方更改。</li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/28/023d9a68794a7.png" alt="证书颁发机构图"></p><p>通常，数字证书的申请人会生成一个 <strong>密钥对</strong> 由一个 <strong>私钥</strong> 的网络 <strong>公钥</strong>，还有一个 <a href="https://www.ssl.com/zh-CN/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%81%E4%B8%9A%E7%A4%BE%E4%BC%9A%E8%B4%A3%E4%BB%BB/"><strong>证书签名请求（CSR)</strong></a>。 一个 CSR 是一个编码的文本文件，其中包含公钥和其他将包含在证书中的信息（例如域名，组织，电子邮件地址等）。 密钥对和 CSR 生成通常在将安装证书的服务器或工作站上完成，并且证书中包含的信息类型 CSR 根据验证级别和证书的预期用途而有所不同。 <strong>与公钥不同，申请人的私钥是安全的，永远不要向CA（或其他任何人）展示。</strong></p><p>生成后 CSR，申请人将其发送给CA，CA会独立验证其包含的信息是否正确，如果是，则使用颁发的私钥对证书进行数字签名，然后将其发送给申请人。</p><p> 当将签名的证书提交给第三方时（例如，当该人访问证书持有者的网站时），接收者可以通过CA的公钥以密码方式确认CA的数字签名。 此外，接收者可以使用证书来确认已签名的内容是由拥有相应私钥的人发送的，并且自信息被签名以来，该信息尚未更改。</p><blockquote><p><strong>请注意：</strong> </p><p>尽管任何组织（例如公司部门或政府机构）都可以运营CA，但是SSL.com之类的商业CA可以出于诸如HTTPS网站， S/MIME 电子邮件，代码和文档签名，而无需维护公众信任和经过审核的麻烦 PKI。 SSL.com提供 <a href="https://www.ssl.com/zh-CN/%E6%89%98%E7%AE%A1%E7%9A%84pki%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">托管 PKI</a> 同 <a href="https://www.ssl.com/zh-CN/%E6%96%87%E7%AB%A0%EF%BC%8C/%E7%A7%81%E4%BA%BA%E4%B8%8E%E5%85%AC%E5%85%B1PKI%E5%BB%BA%E7%AB%8B%E6%9C%89%E6%95%88%E8%AE%A1%E5%88%92/">公共或私人信托</a> 为 <a href="https://www.ssl.com/zh-CN/%E5%AE%9A%E5%88%B6%E5%93%81%E7%89%8C%E5%8F%91%E8%A1%8C%E8%AF%81%E4%B9%A6/">商科</a> 和 <a href="https://www.ssl.com/zh-CN/%E6%94%BF%E5%BA%9C%E8%AF%81%E4%B9%A6/">政府</a> 客户。</p></blockquote><p>&nbsp;</p><h2 id="模拟-CA-颁发证书过程"><a href="#模拟-CA-颁发证书过程" class="headerlink" title="模拟 CA 颁发证书过程"></a>模拟 CA 颁发证书过程</h2><h3 id="1-构建私有-CA"><a href="#1-构建私有-CA" class="headerlink" title="1.构建私有 CA:"></a>1.构建私有 CA:</h3><p><strong>选项说明：</strong></p><ul><li>-new     生成新证书签署请求</li><li>-509      生成自签格式证书，专用于创建私有CA时</li><li>-key      生成请求时用到的私有文件路径</li><li>-out      生成的请求文件路径；如果自签操作将直接生成签署过得证书</li><li>-days    指定证书的时间</li></ul><h4 id="1-1-生成私钥"><a href="#1-1-生成私钥" class="headerlink" title="1.1 生成私钥"></a>1.1 生成私钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">umask</span> 077;openssl genrsa -out /etc/pki/CA/private/cakey.pem 4096)</span><br></pre></td></tr></table></figure><h4 id="1-2-生成自签证书"><a href="#1-2-生成自签证书" class="headerlink" title="1.2 生成自签证书"></a>1.2 生成自签证书</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -new x509 -key /etc/pki/CA/private/cakey -out /etc/pki/CA/cacert.pem -days 3650)</span><br></pre></td></tr></table></figure><h4 id="1-3-为-CA-提供所需要的目录及文件"><a href="#1-3-为-CA-提供所需要的目录及文件" class="headerlink" title="1.3 为 CA 提供所需要的目录及文件"></a>1.3 为 CA 提供所需要的目录及文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /etc/pki/CA/&#123;certs,crl,newcerts&#125; -p</span><br><span class="line">touch /etc/pki/CA/&#123;serial,index.txt&#125;</span><br><span class="line"><span class="built_in">echo</span> 01 &gt; /etc/pki/CA/serial</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="2-向-CA-申请证书"><a href="#2-向-CA-申请证书" class="headerlink" title="2.向 CA 申请证书"></a>2.向 CA 申请证书</h3><p>需用到证书进行安全通信的服务器，则需要向 CA 请求签署证书，然后才可以进行安全通信。</p><h4 id="2-1-用到证书的主机生成私钥"><a href="#2-1-用到证书的主机生成私钥" class="headerlink" title="2.1 用到证书的主机生成私钥"></a>2.1 用到证书的主机生成私钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /etc/nginx/ssl</span><br><span class="line">(uamsk 077;openssl genrsa -out /etc/nginx/ssl/nginx.key 2048)</span><br></pre></td></tr></table></figure><h4 id="2-2-生成证书签署请求"><a href="#2-2-生成证书签署请求" class="headerlink" title="2.2 生成证书签署请求"></a>2.2 生成证书签署请求</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -new -key /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.csr -days 365</span><br></pre></td></tr></table></figure><h4 id="2-3-将请求通过可靠方式发送给-CA-主机"><a href="#2-3-将请求通过可靠方式发送给-CA-主机" class="headerlink" title="2.3 将请求通过可靠方式发送给 CA 主机"></a>2.3 将请求通过可靠方式发送给 CA 主机</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp /etc/nginx/ssl/nginx.csr root@IP:PATH</span><br></pre></td></tr></table></figure><h4 id="2-4-在-CA-e主机上签署证书"><a href="#2-4-在-CA-e主机上签署证书" class="headerlink" title="2.4 在 CA e主机上签署证书"></a>2.4 在 CA e主机上签署证书</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl ca -<span class="keyword">in</span> /PATH/nginx.csr -out /etc/pki/CA/certs/nginx.crt -days 365</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="3-验证证书"><a href="#3-验证证书" class="headerlink" title="3.验证证书"></a>3.验证证书</h3><h4 id="3-1-查看证书信息"><a href="#3-1-查看证书信息" class="headerlink" title="3.1 查看证书信息"></a>3.1 查看证书信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> /etc/pki/CA/certs/nginx.crt -noout -serial -subject</span><br></pre></td></tr></table></figure><h4 id="3-2-验证https"><a href="#3-2-验证https" class="headerlink" title="3.2 验证https"></a>3.2 验证https</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl s_client -connect www.test.com:443 -CAfile /etc/pki/CA/cacert.pem</span><br></pre></td></tr></table></figure><p> &nbsp;</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="ssl.com/zh-CN/faqs/what-is-a-certificate-authority/">What Is a Certificate Authority (CA)?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CA </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL · SQL 语句</title>
      <link href="posts/mysql-sql-statement/"/>
      <url>posts/mysql-sql-statement/</url>
      
        <content type="html"><![CDATA[<h2 id="一、SQL语言的分类"><a href="#一、SQL语言的分类" class="headerlink" title="一、SQL语言的分类"></a>一、SQL语言的分类</h2><p>SQL语言分为四大类：</p><ul><li>DDL (Data Definition Language)    数据定义语言</li><li>DML (Data Manipulation Language)    数据操纵语言</li><li>DQL (Data Query Language)    数据查询语言</li><li>DCL    (Data Control Language)    数据控制语言</li></ul><p>&nbsp;</p><h2 id="二、DDL数据定义语言"><a href="#二、DDL数据定义语言" class="headerlink" title="二、DDL数据定义语言"></a>二、DDL数据定义语言</h2><p>DDL 的针对对象是：库、表。</p><p>主要有以下几个 SQL 命令：CREATE、DROP、USE、SHOW、ALTER、ADD 等。</p><h3 id="2-1-针对库的操作"><a href="#2-1-针对库的操作" class="headerlink" title="2.1 针对库的操作"></a>2.1 针对库的操作</h3><h4 id="2-1-1-创建库-CREATE"><a href="#2-1-1-创建库-CREATE" class="headerlink" title="2.1.1 创建库 CREATE"></a>2.1.1 创建库 CREATE</h4><blockquote><p><strong>查看语法</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; HELP CREATE DATABASE</span><br><span class="line">Name: <span class="string">&#x27;CREATE DATABASE&#x27;</span></span><br><span class="line">Description:</span><br><span class="line">Syntax:</span><br><span class="line">CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name</span><br><span class="line">    [create_specification] ...</span><br><span class="line"></span><br><span class="line">create_specification:</span><br><span class="line">    [DEFAULT] CHARACTER SET [=] charset_name</span><br><span class="line">  | [DEFAULT] COLLATE [=] collation_name</span><br><span class="line"></span><br><span class="line">CREATE DATABASE creates a database with the given name. To use this</span><br><span class="line">statement, you need the CREATE privilege <span class="keyword">for</span> the database. CREATE</span><br><span class="line">SCHEMA is a synonym <span class="keyword">for</span> CREATE DATABASE.</span><br><span class="line"></span><br><span class="line">URL: https://dev.mysql.com/doc/refman/5.6/en/create-database.html</span><br></pre></td></tr></table></figure><blockquote><p><strong>建库语句</strong></p></blockquote><p>在库的操作中，database和schema是同等意思。</p><ul><li><p>使用database建库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE db_test1;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure></li><li><p>使用schema建库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE SCHEMA db_test2;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>当库已经存在，建库时忽略报错</p><p>一般来说，如果库存在，再建库时会提示报错，如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE db_test1;</span><br><span class="line">ERROR 1007 (HY000): Can<span class="string">&#x27;t create database &#x27;</span>db_test1<span class="string">&#x27;; database exists</span></span><br></pre></td></tr></table></figure><p>使用选项<code>IF NOT EXISTS</code>，如果库已存在则忽略报错信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE IF NOT EXISTS db_test1;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>指定字符集建库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE db_test3 CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>查看建库语句</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create database db_test3;</span><br><span class="line">+----------+-------------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                                   |</span><br><span class="line">+----------+-------------------------------------------------------------------+</span><br><span class="line">| db_test3 | CREATE DATABASE `db_test3` /*!40100 DEFAULT CHARACTER SET utf8 */ |</span><br><span class="line">+----------+-------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="2-1-2-删除库-DROP"><a href="#2-1-2-删除库-DROP" class="headerlink" title="2.1.2 删除库 DROP"></a>2.1.2 删除库 DROP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DROP DATABASE db_test2;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="2-1-3-修改库-ALTER"><a href="#2-1-3-修改库-ALTER" class="headerlink" title="2.1.3 修改库 ALTER"></a>2.1.3 修改库 ALTER</h4><p>先查看库，确定要修改什么</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE DATABASE db_test1;</span><br><span class="line">+----------+---------------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                                     |</span><br><span class="line">+----------+---------------------------------------------------------------------+</span><br><span class="line">| db_test1 | CREATE DATABASE `db_test1` /*!40100 DEFAULT CHARACTER SET latin1 */ |</span><br><span class="line">+----------+---------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>修改<code>db_test1</code>这个表的字符集为utf8</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER DATABASE db_test1 CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>查看修改后的<code>db_test1</code>的字符集</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE DATABASE db_test1;</span><br><span class="line">+----------+-------------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                                   |</span><br><span class="line">+----------+-------------------------------------------------------------------+</span><br><span class="line">| db_test1 | CREATE DATABASE `db_test1` /*!40100 DEFAULT CHARACTER SET utf8 */ |</span><br><span class="line">+----------+-------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="2-2-针对表操作"><a href="#2-2-针对表操作" class="headerlink" title="2.2 针对表操作"></a>2.2 针对表操作</h3><h4 id="2-2-1-创建表-CREATE-TABLE"><a href="#2-2-1-创建表-CREATE-TABLE" class="headerlink" title="2.2.1 创建表 CREATE TABLE"></a>2.2.1 创建表 CREATE TABLE</h4><blockquote><p><strong>查看语法</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; HELP CREATE TABLE</span><br><span class="line">Name: <span class="string">&#x27;CREATE TABLE&#x27;</span></span><br><span class="line">Description:</span><br><span class="line">Syntax:</span><br><span class="line">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    (create_definition,...)</span><br><span class="line">    [table_options]</span><br><span class="line">    [partition_options]</span><br><span class="line"></span><br><span class="line">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    [(create_definition,...)]</span><br><span class="line">    [table_options]</span><br><span class="line">    [partition_options]</span><br><span class="line">    [IGNORE | REPLACE]</span><br><span class="line">    [AS] query_expression</span><br><span class="line"></span><br><span class="line">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    &#123; LIKE old_tbl_name | (LIKE old_tbl_name) &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>建表语句</strong></p></blockquote><ul><li><p>建表添加单列</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tb1(id int);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>建表时添加多列</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tb2(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(10),</span><br><span class="line">    -&gt; age tinyint);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure></li><li><p>查看表的结构</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DESC tb1;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11) | YES  |     | NULL    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DESC tb2;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(10) | YES  |     | NULL    |       |</span><br><span class="line">| age   | tinyint(4)  | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>建表需要先进入库中，而且建表时至少有一列字段且要指定数据类型，否则建表都会失败。</p></blockquote></li></ul><blockquote><p><strong>用表结构属性建表</strong></p></blockquote><ul><li><p>表结构属性</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NOT NULL不为空</span><br><span class="line">PRIMARY KEY主键（唯一且非空的）</span><br><span class="line">AUTO_INCREMENT自增</span><br><span class="line">UNIQUE KEY唯一键（唯一的）</span><br><span class="line">DEFAULT默认值</span><br><span class="line">UNSIGNED非负数</span><br><span class="line">COMMENT注释</span><br></pre></td></tr></table></figure></li><li><p>创建表 <code>tb3</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tb3( </span><br><span class="line">    -&gt; id INT PRIMARY KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    -&gt; name VARCHAR(10) NOT NULL COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    -&gt; sex ENUM(<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;woman&#x27;</span>) NOT NULL COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    -&gt; age TINYINT UNSIGNED NOT NULL COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    -&gt; status ENUM(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>) DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;学生是否毕业&#x27;</span>);</span><br><span class="line">Query OK, 0 rows affected (0.53 sec)</span><br></pre></td></tr></table></figure><p>查看<code>tb3</code>表的结构</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DESC tb3;</span><br><span class="line">+--------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| Field  | Type                | Null | Key | Default | Extra          |</span><br><span class="line">+--------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| id     | int(11)             | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name   | varchar(10)         | NO   |     | NULL    |                |</span><br><span class="line">| sex    | enum(<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;woman&#x27;</span>) | NO   |     | NULL    |                |</span><br><span class="line">| age    | tinyint(3) unsigned | NO   |     | NULL    |                |</span><br><span class="line">| status | enum(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)       | YES  |     | 0       |                |</span><br><span class="line">+--------+---------------------+------+-----+---------+----------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>查看建表语句</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE tb3\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: tb3</span><br><span class="line">Create Table: CREATE TABLE `tb3` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` varchar(10) NOT NULL COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `sex` enum(<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;woman&#x27;</span>) NOT NULL COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `age` tinyint(3) unsigned NOT NULL COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `status` enum(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>) DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;学生是否毕业&#x27;</span>,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-2-插入语句-INSERT"><a href="#2-2-2-插入语句-INSERT" class="headerlink" title="2.2.2 插入语句 INSERT"></a>2.2.2 插入语句 INSERT</h4><p><strong>插入数据方法一（每一列都插入数据）：</strong></p><ul><li><p>插入单行数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO tb2 VALUES(1,<span class="string">&#x27;whb&#x27;</span>,111);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>插入多行数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO tb2 VALUES </span><br><span class="line">    -&gt; (2,<span class="string">&#x27;qh&#x27;</span>,112),</span><br><span class="line">    -&gt; (3,<span class="string">&#x27;hk&#x27;</span>,113),</span><br><span class="line">    -&gt; (4,<span class="string">&#x27;cp&#x27;</span>,114),</span><br><span class="line">    -&gt; (5,<span class="string">&#x27;xt&#x27;</span>,115),</span><br><span class="line">    -&gt; (6,<span class="string">&#x27;zyc&#x27;</span>,116);</span><br><span class="line">Query OK, 5 rows affected (0.00 sec)</span><br><span class="line">Records: 5  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure></li><li><p>查看表的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM tb2;</span><br><span class="line">+------+------+------+</span><br><span class="line">| id   | name | age  |</span><br><span class="line">+------+------+------+</span><br><span class="line">|    1 | whb  |  111 |</span><br><span class="line">|    2 | qh   |  112 |</span><br><span class="line">|    3 | hk   |  113 |</span><br><span class="line">|    4 | cp   |  114 |</span><br><span class="line">|    5 | xt   |  115 |</span><br><span class="line">|    6 | zyc  |  116 |</span><br><span class="line">+------+------+------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>插入数据方法二（在指定列插入数据）：</strong></p><ul><li><p>插入数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO tb3(name,sex,age) VALUES </span><br><span class="line">    -&gt; (<span class="string">&#x27;whb&#x27;</span>,<span class="string">&#x27;man&#x27;</span>,111),</span><br><span class="line">    -&gt; (<span class="string">&#x27;qh&#x27;</span>,<span class="string">&#x27;man&#x27;</span>,112),</span><br><span class="line">    -&gt; (<span class="string">&#x27;hk&#x27;</span>,<span class="string">&#x27;man&#x27;</span>,113),</span><br><span class="line">    -&gt; (<span class="string">&#x27;jll&#x27;</span>,<span class="string">&#x27;woman&#x27;</span>,114);</span><br><span class="line">Query OK, 4 rows affected (0.01 sec)</span><br><span class="line">Records: 4  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure></li><li><p>查看表<code>tb3</code>数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM tb3;</span><br><span class="line">+----+------+-------+-----+--------+</span><br><span class="line">| id | name | sex   | age | status |</span><br><span class="line">+----+------+-------+-----+--------+</span><br><span class="line">|  1 | whb  | man   | 111 | 0      |</span><br><span class="line">|  2 | qh   | man   | 112 | 0      |</span><br><span class="line">|  3 | hk   | man   | 113 | 0      |</span><br><span class="line">|  4 | jll  | woman | 114 | 0      |</span><br><span class="line">+----+------+-------+-----+--------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-3-修改表"><a href="#2-2-3-修改表" class="headerlink" title="2.2.3 修改表"></a>2.2.3 修改表</h4><ul><li><p>修改表名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE tb3 RENAME students;</span><br></pre></td></tr></table></figure></li><li><p>添加列</p><p>添加单个字段（列）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE students ADD enrollment DATETIME DEFAULT now();</span><br></pre></td></tr></table></figure><p>添加多个字段（列）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE students ADD ad1 VARCHAR(10), ADD ad2 VARCHAR(10);</span><br></pre></td></tr></table></figure></li><li><p>添加字段到最前面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE students ADD ad3 VARCHAR(10) FIRST;</span><br></pre></td></tr></table></figure></li><li><p>添加字段到指定字段后</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE students ADD ad4 VARCHAR(10) AFTER ad3;</span><br></pre></td></tr></table></figure></li><li><p>删除指定字段</p><p>删除单个字段</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE students DROP ad1;</span><br></pre></td></tr></table></figure><p>删除多个字段</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE students DROP ad2, DROP ad3;</span><br></pre></td></tr></table></figure></li><li><p>修改字段属性</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE students MODIFY ad4 INT;</span><br></pre></td></tr></table></figure></li><li><p>修改字段的名字</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE students CHANGE ad4 uid int;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;</p><h2 id="三、DCL数据控制语言"><a href="#三、DCL数据控制语言" class="headerlink" title="三、DCL数据控制语言"></a>三、DCL数据控制语言</h2><p>数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视，用户，权限，事务等。</p><h3 id="3-1-授权命令-GRANT"><a href="#3-1-授权命令-GRANT" class="headerlink" title="3.1 授权命令 GRANT"></a>3.1 授权命令 GRANT</h3><h4 id="3-1-1-授权用户权限"><a href="#3-1-1-授权用户权限" class="headerlink" title="3.1.1 授权用户权限"></a>3.1.1 授权用户权限</h4><ul><li><p>给用户授权</p><p>给用户root@’%’授权所有权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO root@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123&#x27;</span>; </span><br></pre></td></tr></table></figure></li><li><p>查看用户的权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW GRANTS FOR root@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-1-2-mysql中的所有权限"><a href="#3-1-2-mysql中的所有权限" class="headerlink" title="3.1.2 mysql中的所有权限"></a>3.1.2 mysql中的所有权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE</span><br></pre></td></tr></table></figure><h4 id="3-1-3-授权的扩展权限"><a href="#3-1-3-授权的扩展权限" class="headerlink" title="3.1.3 授权的扩展权限"></a>3.1.3 授权的扩展权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">max_queries_per_hour：一个用户每小时可发出的查询数量</span><br><span class="line">max_updates_per_hour：一个用户每小时可发出的更新数量</span><br><span class="line">max_connections_per_hour：一个用户每小时可连接到服务器的次数</span><br><span class="line">max_user_connections：允许同时连接数量</span><br></pre></td></tr></table></figure><p>扩展权限的用法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO root@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123&#x27;</span> WITH MAX_USER_CONNECTIONS 1; </span><br></pre></td></tr></table></figure><h3 id="3-2-回收权限-REVOKE"><a href="#3-2-回收权限-REVOKE" class="headerlink" title="3.2 回收权限 REVOKE"></a>3.2 回收权限 REVOKE</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; REVOKE DROP ON *.* FROM root@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="3-3-授权一个超级管理员（权限等同于root）"><a href="#3-3-授权一个超级管理员（权限等同于root）" class="headerlink" title="3.3 授权一个超级管理员（权限等同于root）"></a>3.3 授权一个超级管理员（权限等同于root）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO whb@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123&#x27;</span> WITH GRANT OPTIONS;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="四、DML数据操作语言"><a href="#四、DML数据操作语言" class="headerlink" title="四、DML数据操作语言"></a>四、DML数据操作语言</h2><p>操作对象：行</p><p>常用命令：INSERT、UPDATE、DELETE</p><h3 id="4-1-数据插入命令-INSERT"><a href="#4-1-数据插入命令-INSERT" class="headerlink" title="4.1 数据插入命令 INSERT"></a>4.1 数据插入命令 INSERT</h3><p>先查看表<code>tb2</code>结构，确定需要插入的数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DESC tb2;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(10) | YES  |     | NULL    |                |</span><br><span class="line">| age   | tinyint(4)  | YES  |     | NULL    |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="4-1-1-每个字段都插入数据（不推荐）"><a href="#4-1-1-每个字段都插入数据（不推荐）" class="headerlink" title="4.1.1 每个字段都插入数据（不推荐）"></a>4.1.1 每个字段都插入数据（不推荐）</h4><p>这样插入数据，必须保证每个字段都要有值，否则会插入失败</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO tb2 VALUES(7,<span class="string">&#x27;zyc&#x27;</span>,123);</span><br></pre></td></tr></table></figure><h4 id="4-1-2-在指定字段插入数据"><a href="#4-1-2-在指定字段插入数据" class="headerlink" title="4.1.2 在指定字段插入数据"></a>4.1.2 在指定字段插入数据</h4><ul><li><p>插入单条数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO tb2(name,age) VALUES(<span class="string">&#x27;ysl&#x27;</span>,22);</span><br></pre></td></tr></table></figure></li><li><p>插入多条数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO tb2(name,age) VALUES</span><br><span class="line">    -&gt; (<span class="string">&#x27;ysl&#x27;</span>,22),</span><br><span class="line">    -&gt; (<span class="string">&#x27;ysl&#x27;</span>,22);</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-2-修改表数据-UPDATE"><a href="#4-2-修改表数据-UPDATE" class="headerlink" title="4.2 修改表数据 UPDATE"></a>4.2 修改表数据 UPDATE</h3><ul><li><strong>不加条件的修改方法</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE tb2 SET age=111;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>不加任何条件的修改，容易误改数据。因为它会把表中age字段的数据值都修改了。</p></blockquote><ul><li><strong>加条件条件的修改</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE tb2 SET age=22 WHERE name=<span class="string">&#x27;ysl&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="4-3-删除数据-DELETE"><a href="#4-3-删除数据-DELETE" class="headerlink" title="4.3 删除数据 DELETE"></a>4.3 删除数据 DELETE</h3><blockquote><p><strong>不加条件删除数据</strong></p></blockquote><p>这样删除数据会删除表中的所有数据，是非常危险的用法。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELETE FROM tb2;</span><br></pre></td></tr></table></figure><blockquote><p><strong>加条件删除数据</strong></p></blockquote><p>相对来说比较安全，只删除满足条件的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELETE FROM tb2 WHERE name=<span class="string">&#x27;ysl&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>TRUNCATE</code>和<code>DELETE</code>的区别：</p><p><code>TRUNCATE</code>是删除表，再重新创建这个表。属于DDL，<code>DELETE</code>是一条一条删除表中的数据，属于DML。</p><blockquote><p><strong>伪删除（使用UPDATE替代DELETE）</strong></p></blockquote><p>开发中很少使用<code>DELETE</code>,删除有物理删除和逻辑删除，其中逻辑删除可以通过给表添加一个字段(isDel)，若值为1，代表删除；若值为0，代表没有删除。</p><p>此时，对数据的删除操作就变成了<code>DELETE</code>操作了。</p><ul><li><p>添加isDel字段</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE tb2 ADD isDel ENUM(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>) DEFAULT <span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>UPDATE</code>删除数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE tb2 SET isDel=<span class="string">&#x27;1&#x27;</span> WHERE id=7;</span><br></pre></td></tr></table></figure></li><li><p>查看数据</p><p>在查看数据的时候，加上<code>isDel=&#39;0&#39;</code>的条件，就可以实现伪删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM tb2 WHERE isDel=<span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;</p><h2 id="五、DQL数据查询语言"><a href="#五、DQL数据查询语言" class="headerlink" title="五、DQL数据查询语言"></a>五、DQL数据查询语言</h2><p>首先查看下表和表结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_world |</span><br><span class="line">+-----------------+</span><br><span class="line">| city            |</span><br><span class="line">| country         |</span><br><span class="line">| countrylanguage |</span><br><span class="line">+-----------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li><p><code>city</code> 表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DESC city;</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">| Field       | Type     | Null | Key | Default | Extra          |</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| Name        | char(35) | NO   |     |         |                |</span><br><span class="line">| CountryCode | char(3)  | NO   | MUL |         |                |</span><br><span class="line">| District    | char(20) | NO   |     |         |                |</span><br><span class="line">| Population  | int(11)  | NO   |     | 0       |                |</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p><code>country</code> 表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DESC country;</span><br><span class="line">+----------------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field          | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------------+-------------+------+-----+---------+-------+</span><br><span class="line">| Code           | char(3)     | NO   | PRI |         |       |</span><br><span class="line">| Name           | char(52)    | NO   |     |         |       |</span><br><span class="line">| Region         | char(26)    | NO   |     |         |       |</span><br><span class="line">| SurfaceArea    | <span class="built_in">float</span>(10,2) | NO   |     | 0.00    |       |</span><br><span class="line">| IndepYear      | smallint(6) | YES  |     | NULL    |       |</span><br><span class="line">| Population     | int(11)     | NO   |     | 0       |       |</span><br><span class="line">+----------------+-------------+------+-----+---------+-------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure></li><li><p><code>countrylanguage</code> 表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DESC countrylanguage;</span><br><span class="line">+-------------+---------------+------+-----+---------+-------+</span><br><span class="line">| Field       | Type          | Null | Key | Default | Extra |</span><br><span class="line">+-------------+---------------+------+-----+---------+-------+</span><br><span class="line">| CountryCode | char(3)       | NO   | PRI |         |       |</span><br><span class="line">| Language    | char(30)      | NO   | PRI |         |       |</span><br><span class="line">| IsOfficial  | enum(<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;F&#x27;</span>) | NO   |     | F       |       |</span><br><span class="line">| Percentage  | <span class="built_in">float</span>(4,1)    | NO   |     | 0.0     |       |</span><br><span class="line">+-------------+---------------+------+-----+---------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-1-查询命令-SELECT"><a href="#5-1-查询命令-SELECT" class="headerlink" title="5.1 查询命令 SELECT"></a>5.1 查询命令 SELECT</h3><ul><li><p>查询表中的所有数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM students;</span><br></pre></td></tr></table></figure></li><li><p>查询指定字段的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT name,sex,age FROM students;</span><br></pre></td></tr></table></figure></li><li><p>根据条件查询数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT name,sex,age FROM students WHERE id=1;</span><br></pre></td></tr></table></figure></li><li><p>查询表中数据的总数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) FROM students;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-2-数据排序-ORDER-BY"><a href="#5-2-数据排序-ORDER-BY" class="headerlink" title="5.2 数据排序  ORDER BY"></a>5.2 数据排序  ORDER BY</h3><p>根据城市人口进行排序</p><ul><li><p>升序排序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT Name,Population FROM city ORDER BY Population;</span><br></pre></td></tr></table></figure></li><li><p>降序排序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT Name,Population FROM city ORDER BY Population DESC;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3-数据分页显示-LIMIT"><a href="#5-3-数据分页显示-LIMIT" class="headerlink" title="5.3 数据分页显示 LIMIT"></a>5.3 数据分页显示 LIMIT</h3><ul><li><p>按城市人口排序，人数最少的前十个城市</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT Name,Polulation FROM city ORDER BY Population LIMIT 10;</span><br></pre></td></tr></table></figure></li><li><p>指定步长为20查看数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT Name,Population FROM city LIMIT 20;</span><br><span class="line">mysql&gt; SELECT Name,Population FROM city LIMIT 20,40;</span><br><span class="line">mysql&gt; SELECT Name,Population FROM city LIMIT 40,60;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-4-WHERE-子句"><a href="#5-4-WHERE-子句" class="headerlink" title="5.4 WHERE 子句"></a>5.4 WHERE 子句</h3><p>在查询数据的时候，如需有条件的选取数据，就可将WHERE子句用到SELECT语句中。</p><p><strong>语法：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">[WHERE condition1 [AND [OR]] condition2.....</span><br></pre></td></tr></table></figure><p><strong>操作符列表：</strong></p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等号，检测两个值是否相等，如果相等返回true</td><td align="left">(A = B) 返回false。</td></tr><tr><td align="left">&lt;&gt;, !=</td><td align="left">不等于，检测两个值是否相等，如果不相等返回true</td><td align="left">(A != B) 返回 true。</td></tr><tr><td align="left">&gt;</td><td align="left">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td align="left">(A &gt; B) 返回false。</td></tr><tr><td align="left">&lt;</td><td align="left">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td align="left">(A &lt; B) 返回 true。</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td align="left">(A &gt;= B) 返回false。</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td align="left">(A &lt;= B) 返回 true。</td></tr></tbody></table><ul><li><p>查询中国城市人口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT Name,Population FROM city WHERE Countrycode=<span class="string">&#x27;CHN&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询中国上海市的人口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT Name,Population FROM city WHERE Name=<span class="string">&#x27;Shanghai&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>查找人口数量大于10000000的城市</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT Name,Population FROM city WHERE Population &gt; 10000000;</span><br></pre></td></tr></table></figure></li><li><p>查看中国和美国城市人口数量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT Name,Population FROM city WHERE countrycode=<span class="string">&#x27;CHN&#x27;</span> OR countrycode=<span class="string">&#x27;USA&#x27;</span>;</span><br><span class="line">mysql&gt; SELECT Name,Population FROM city WHERE countrycode IN (<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-5-LIKE-子句"><a href="#5-5-LIKE-子句" class="headerlink" title="5.5 LIKE 子句"></a>5.5 LIKE 子句</h3><p>like 匹配/模糊匹配，会与 <strong>%</strong> 和 <strong>_</strong> 结合使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;%a&#x27;     //以a结尾的数据</span><br><span class="line">&#x27;a%&#x27;     //以a开头的数据</span><br><span class="line">&#x27;%a%&#x27;    //含有a的数据</span><br><span class="line">&#x27;_a_&#x27;    //三位且中间字母是a的</span><br><span class="line">&#x27;_a&#x27;     //两位且结尾字母是a的</span><br><span class="line">&#x27;a_&#x27;     //两位且开头字母是a的</span><br></pre></td></tr></table></figure><ul><li><p>查询国家代码是以C开头的城市</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM city WHERE CountryCode LIKE <span class="string">&#x27;%C&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询国家代码以N结尾的城市</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM city WHERE CountryCode LIKE <span class="string">&#x27;C%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询国家代码是包含H的城市</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM city WHERE CountryCode LIKE <span class="string">&#x27;%C%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询国家代码以C为中间字符的城市</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM city WHERE CountryCode LIKE <span class="string">&#x27;_C_&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-6-连接的使用"><a href="#5-6-连接的使用" class="headerlink" title="5.6 连接的使用"></a>5.6 连接的使用</h3><h4 id="5-6-1-自连接-NATURAL-JOIN"><a href="#5-6-1-自连接-NATURAL-JOIN" class="headerlink" title="5.6.1 自连接 NATURAL JOIN"></a>5.6.1 自连接 NATURAL JOIN</h4><p>自动匹配多个表中相同的字段，且表中的字段和字段值相同。</p><p>查找人口数量大于100万的城市、国家代码和语言，并根据人口数量排序：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT city.Name,city.CountryCode,countrylanguage.Language,city.Population</span><br><span class="line">FROM city NATURAL JOIN countrylanguage WHERE Population &gt; 1000000 ORDER BY Population;</span><br></pre></td></tr></table></figure><h4 id="5-6-2-内连接-INNER-JOIN"><a href="#5-6-2-内连接-INNER-JOIN" class="headerlink" title="5.6.2 内连接 INNER JOIN"></a>5.6.2 内连接 INNER JOIN</h4><p>INNER JOIN：获取两个表中字段匹配关系的记录。一般会省略INNER，因为INNER JOIN等效于JOIN。</p><ul><li><p>两表连查</p><p>查询世界上小于100人的城市是哪个国家的？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT country.Name AS Country,city.Name AS City,city.Population FROM city JOIN country  ON city.CountryCode=country.Code <span class="built_in">where</span> city.Population &lt; 100;</span><br></pre></td></tr></table></figure></li><li><p>三表联查</p><p>查询世界上小于100人的城市是哪个国家的，说什么语言？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT country.Name AS Country,city.Name AS City,countrylanguage.Language,city.Population FROM city JOIN country  ON city.CountryCode=country.Code JOIN countrylanguage ON country.Code=countrylanguage.CountryCode <span class="built_in">where</span> city.Population &lt; 100;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>注意：</strong></p><p>一般在 <code>FROM</code> 后的表要比 JOIN 后的表小 </p></blockquote><h4 id="5-6-3-外连接"><a href="#5-6-3-外连接" class="headerlink" title="5.6.3 外连接"></a>5.6.3 外连接</h4><ul><li><p>左连接 <code>LEFT JOIN</code></p><p> <code>LEFT JOIN</code>获取左表所有记录，即使右表没有对应匹配的记录。</p><p>尝试下面实例，city为左表，country为右表，只获取左表的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT city.Name,city.CountryCode,country.Name FROM city LEFT JOIN country on city.CountryCode=country.code  and city.Population&lt;100;</span><br></pre></td></tr></table></figure></li><li><p>右连接 <code>RIGHT JOIN</code></p><p><code>RIGHT JOIN</code> 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</p><p>city为左表，country为右表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT city.Name,city.CountryCode,country.Name FROM city RIGHT JOIN country on city.CountryCode=country.code  and city.Population&lt;100;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-7-UNION-操作符"><a href="#5-7-UNION-操作符" class="headerlink" title="5.7 UNION 操作符"></a>5.7 UNION 操作符</h3><p>UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p><p><strong>UNION 语句</strong>：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据）</p><p><strong>UNION ALL 语句</strong>：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）</p><p><strong>参数：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">expression1, expression2, ... expression_n: 要检索的列。</span><br><span class="line">tables: 要检索的数据表。</span><br><span class="line">WHERE conditions:** 可选， 检索条件。</span><br><span class="line">DISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以DISTINCT 修饰符对结果没啥影响。</span><br><span class="line">ALL: 可选，返回所有结果集，包含重复数据。</span><br></pre></td></tr></table></figure><h4 id="5-7-1-UNION-实例"><a href="#5-7-1-UNION-实例" class="headerlink" title="5.7.1 UNION 实例"></a>5.7.1 UNION 实例</h4><p>从city表和countrylanguage中选取所有不同的CountryCode（只有不同的值）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CountryCode FROM city UNION SELECT CountryCode FROM countrylanguage;</span><br></pre></td></tr></table></figure><p>注意：UNION 不能用于列出两个表中所有的CountryCode，它选取的是不同的值。</p><h4 id="5-7-2-UNION-ALL-实例"><a href="#5-7-2-UNION-ALL-实例" class="headerlink" title="5.7.2 UNION ALL 实例"></a>5.7.2 UNION ALL 实例</h4><p>从city表和countrylanguage中选取所有的CountryCode（也有重复的值）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CountryCode FROM city UNION ALL SELECT CountryCode FROM countrylanguage;</span><br></pre></td></tr></table></figure><h3 id="5-8-分组-GROUP-BY"><a href="#5-8-分组-GROUP-BY" class="headerlink" title="5.8 分组 GROUP BY"></a>5.8 分组 GROUP BY</h3><p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p><p>在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。</p><p>在city表中按国家代码（CountryCode）分组，并统计每个代码有多少条记录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CountryCode,COUNT(*) FROM city GROUP BY CountryCode;</span><br></pre></td></tr></table></figure><h4 id="5-8-1-WITH-ROLLUP"><a href="#5-8-1-WITH-ROLLUP" class="headerlink" title="5.8.1 WITH ROLLUP"></a>5.8.1 WITH ROLLUP</h4><p>WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）。</p><p>按以上的国家代码进行分组，在统计每个代码对应人口数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CountryCode,SUM(Population) FROM city GROUP BY CountryCode WITH ROLLUP;</span><br></pre></td></tr></table></figure><h4 id="5-8-2-HAVING"><a href="#5-8-2-HAVING" class="headerlink" title="5.8.2 HAVING"></a>5.8.2 HAVING</h4><p>在city表中按国家代码（CountryCode）分组，统计代码重复数量大于100的记录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CountryCode,COUNT(*) AS Repetitions FROM city GROUP BY CountryCode HAVING Repetitions &gt; 100;</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| CountryCode | Repetitions |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| BRA         |         250 |</span><br><span class="line">| CHN         |         363 |</span><br><span class="line">| IND         |         341 |</span><br><span class="line">| JPN         |         248 |</span><br><span class="line">| USA         |         274 |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 常用模块</title>
      <link href="posts/nginx-common-modules/"/>
      <url>posts/nginx-common-modules/</url>
      
        <content type="html"><![CDATA[<h2 id="目录索引模块"><a href="#目录索引模块" class="headerlink" title="目录索引模块"></a>目录索引模块</h2><p><code>ngx_http_autoindex_module</code> 模块处理以斜杠字符（’/‘）结尾的请求，并生成目录列表。 当<code>ngx_http_index_module</code> 模块找不到索引文件时，通常会将请求传递给 <code>ngx_http_autoindex_module</code> 模块。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Syntax:autoindex on | off;</span><br><span class="line">Default:</span><br><span class="line">autoindex off;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认中文是乱码，添加该参数可以解决乱码问题</span></span><br><span class="line">charset utf-8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启目录索引孤男功能</span></span><br><span class="line">autoindex on;</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认为on， 显示出文件的确切大小，单位是bytes</span></span><br><span class="line"><span class="comment">#修改为off，显示出文件的大概大小，单位是kB或者MB或者GB。</span></span><br><span class="line">autoindex_exact_size off;</span><br><span class="line"></span><br><span class="line">autoindex_localtime on;</span><br><span class="line"><span class="comment">#默认为off，显示的文件时间为UTC时间。</span></span><br><span class="line"><span class="comment">#修改为on， 显示的文件时间为文件的最后修改时间。</span></span><br></pre></td></tr></table></figure><h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /download &#123;</span><br><span class="line">    root /data;</span><br><span class="line">    autoindex on;</span><br><span class="line">    autoindex_exact_size off;</span><br><span class="line">    autoindex_localtime on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="访问控制模块"><a href="#访问控制模块" class="headerlink" title="访问控制模块"></a>访问控制模块</h2><p><code>ngx_http_access_module</code> ，该模块允许限制对某些客户端地址的访问。</p><h3 id="模块语法"><a href="#模块语法" class="headerlink" title="模块语法"></a>模块语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#允许访问语法</span></span><br><span class="line">Syntax:allow address | CIDR | unix: | all;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location, limit_except</span><br><span class="line"></span><br><span class="line"><span class="comment">#拒绝访问语法</span></span><br><span class="line">Syntax:deny address | CIDR | unix: | all;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location, limit_except</span><br></pre></td></tr></table></figure><h3 id="访问控制实例"><a href="#访问控制实例" class="headerlink" title="访问控制实例"></a>访问控制实例</h3><ul><li><p><strong>允许10.0.0.1访问，其他网址不允许</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /status &#123;</span><br><span class="line">    allow 10.0.0.1;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>拒绝10.0.0.1访问，其他网址都允许</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /status &#123;</span><br><span class="line">    deny 10.0.0.1;</span><br><span class="line">    allow all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>允许10.0.0.0网段访问，其他网段不允许</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /status &#123;</span><br><span class="line">    allow 10.0.0.0/24;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;</p><h2 id="访问认证模块"><a href="#访问认证模块" class="headerlink" title="访问认证模块"></a>访问认证模块</h2><p><code>ngx_http_auth_basic_module</code> ，该模块允许通过使用”HTTP 基本身份验证”协议验证用户名和密码来限制对资源的访问。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注释</span></span><br><span class="line">Syntax:auth_basic string | off;</span><br><span class="line">Default:auth_basic off;</span><br><span class="line">Context:http, server, location, limit_except</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定认证的文件</span></span><br><span class="line">Syntax:auth_basic_user_file file;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location, limit_except</span><br></pre></td></tr></table></figure><h3 id="配置示例-1"><a href="#配置示例-1" class="headerlink" title="配置示例"></a>配置示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">   auth_basic           <span class="string">&quot;closed site&quot;</span>;</span><br><span class="line">   auth_basic_user_file /etc/nginx/conf.d/htpasswd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建密码文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#htpasswd命令需要提前安装httpd-tools软件</span></span><br><span class="line">htpasswd -m -c /etc/nginx/conf.d/htpasswd user1</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><p>给多个用户生成密码时，不能使用-c参数。</p></blockquote><p>&nbsp;</p><h2 id="Nginx状态模块"><a href="#Nginx状态模块" class="headerlink" title="Nginx状态模块"></a>Nginx状态模块</h2><p><code>ngx_http_stub_status_module</code> 该模块提供对各种状态信息的访问。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Syntax:stub_status;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure><h3 id="配置示例-2"><a href="#配置示例-2" class="headerlink" title="配置示例"></a>配置示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /status &#123;</span><br><span class="line">    stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx七种状态"><a href="#Nginx七种状态" class="headerlink" title="Nginx七种状态"></a>Nginx七种状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Active connections: 2 </span><br><span class="line">server accepts handled requests</span><br><span class="line">  4  4 56 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Active connections:<span class="comment"># 活跃的连接数</span></span><br><span class="line">accepts<span class="comment"># TCP连接总数</span></span><br><span class="line">handle<span class="comment"># 成功的TCP连接数</span></span><br><span class="line">requests<span class="comment"># 请求数</span></span><br><span class="line"></span><br><span class="line">Reading<span class="comment"># 读取请求头部</span></span><br><span class="line">Writing<span class="comment"># 放回给客户端的头部</span></span><br><span class="line">Waiting<span class="comment"># 等待的请求数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：一次tcp连接，可以发起多次请求；</span></span><br><span class="line">keepalive_timeout  0;   <span class="comment">#类似于关闭长连接</span></span><br><span class="line">keepalive_timeout  0;<span class="comment">#最长65秒没有活动则断开连接</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="连接限制模块"><a href="#连接限制模块" class="headerlink" title="连接限制模块"></a>连接限制模块</h2><p><code>ngx_http_limit_conn_module</code> ，该模块用于限制每个定义的键的连接数，特别是来自单个IP地址的连接数。<code>ngx_http_limit_conn_module</code> 并非所有连接都计算在内。只有当连接有服务器正在处理的请求并且已读取整个请求标头时，才计算连接。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置限制的空间</span></span><br><span class="line"><span class="comment">#调用模块        空间里的内容  空间=空间名字：空间大小</span></span><br><span class="line">Syntax:limit_conn_zone      key       zone=name:size;</span><br><span class="line">Default:—</span><br><span class="line">Context:http</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用上面的空间</span></span><br><span class="line">Syntax:limit_conn zone number;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure><h3 id="配置示例-3"><a href="#配置示例-3" class="headerlink" title="配置示例"></a>配置示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    limit_conn_zone <span class="variable">$binary_remote_addr</span> zone=addr:10m;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        location /download/ &#123;</span><br><span class="line">            limit_conn addr 1;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="请求限制模块"><a href="#请求限制模块" class="headerlink" title="请求限制模块"></a>请求限制模块</h2><p><code>ngx_http_limit_req_module</code> ，该模块 （0.7.21） 用于限制每个定义的键的请求处理速率，特别是来自单个 IP 地址的请求的处理速率。限制使用”泄漏桶”方法完成。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置限制请求的空间</span></span><br><span class="line"><span class="comment">#模块         空间里保存的内容  空间=空间名称：大小速率 1r/s</span></span><br><span class="line">Syntax:limit_req_zone      key         zone=name:size      rate=rate [sync];</span><br><span class="line">Default:—</span><br><span class="line">Context:http</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用上面空间</span></span><br><span class="line">Syntax:limit_req zone=name [burst=number] [nodelay | delay=number];</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置要返回的状态代码以响应被拒绝的请求</span></span><br><span class="line">Syntax:limit_req_status code;</span><br><span class="line">Default:</span><br><span class="line">limit_req_status 503;</span><br><span class="line">Context:http, , serverlocation</span><br></pre></td></tr></table></figure><h3 id="配置示例-4"><a href="#配置示例-4" class="headerlink" title="配置示例"></a>配置示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    limit_req_zone <span class="variable">$binary_remote_addr</span> zone=one:10m rate=1r/s;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        location /search/ &#123;</span><br><span class="line">            limit_req zone=one burst=5;</span><br><span class="line">            limit_req_status 503;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx Rewrite 规则</title>
      <link href="posts/nginx-rewrite-rules/"/>
      <url>posts/nginx-rewrite-rules/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Rewrite概述"><a href="#一、Rewrite概述" class="headerlink" title="一、Rewrite概述"></a>一、Rewrite概述</h2><p>Rewrite 主要实现URL地址重写，以及重定向，就是把传入Web的请求重定向到其他URL的过程。</p><p>&nbsp;</p><h2 id="二、Rewrite使用场景"><a href="#二、Rewrite使用场景" class="headerlink" title="二、Rewrite使用场景"></a>二、Rewrite使用场景</h2><ul><li>地址跳转，用户访问 <code>www.wanhebin.com</code> 这个URL时，将其定向至一个新的域名<code>docs.wanhebin.com</code></li><li>协议跳转，用户通过http协议请求网站时，将其重新跳转至https协议方式</li><li>伪静态，将动态页面显示为静态页面方式的一种技术，便于搜索引擎的录入，同时建上动态URL地址对外暴露过多的参数，提升更高的安全性。</li><li>搜索引擎，SEO优化依赖于URL路径，好记的URL便于智齿搜索引擎录入</li></ul><p>&nbsp;</p><h2 id="三、Rewrite配置语法"><a href="#三、Rewrite配置语法" class="headerlink" title="三、Rewrite配置语法"></a>三、Rewrite配置语法</h2><p>在Nginx中，Rewrite使用的是 <a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html">ngx_http_rewrite_module</a> 模块。</p><ul><li>rewrite语法</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Syntax:rewrite regex replacement [flag];</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, <span class="keyword">if</span></span><br></pre></td></tr></table></figure><p>一般用于切换维护场景</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rewrite ^(.*)$ /page/404.html last;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="四、Rewrite-的四种-flag"><a href="#四、Rewrite-的四种-flag" class="headerlink" title="四、Rewrite 的四种 flag"></a>四、Rewrite 的四种 flag</h2><h3 id="1-rewrite-flag-作用"><a href="#1-rewrite-flag-作用" class="headerlink" title="1.rewrite flag 作用"></a>1.rewrite flag 作用</h3><table><thead><tr><th>flag</th><th>作用</th></tr></thead><tbody><tr><td>last</td><td>本条规则匹配完成后，停止匹配当前规则，开始匹配与更改后的URI相匹配的新位置；</td></tr><tr><td>break</td><td>本条规则匹配完成后，停止匹配，不再匹配后面的规则</td></tr><tr><td>redirect</td><td>返回302临时重定向，地址栏会显示跳转后的地址</td></tr><tr><td>permanent</td><td>返回301永久重定向，地址栏会显示跳转后的地址</td></tr></tbody></table><h3 id="2-last-和-break-的区别"><a href="#2-last-和-break-的区别" class="headerlink" title="2.last 和 break 的区别"></a>2.last 和 break 的区别</h3><h4 id="2-1-配置-Nginx-测试"><a href="#2-1-配置-Nginx-测试" class="headerlink" title="2.1 配置 Nginx 测试"></a>2.1 配置 Nginx 测试</h4><ul><li>配置nginx</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim rewrite.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name rw.test.com;</span><br><span class="line">        root /code/rewrite;</span><br><span class="line"></span><br><span class="line">        location ~ ^/<span class="built_in">break</span> &#123;</span><br><span class="line">                rewrite ^/<span class="built_in">break</span> /<span class="built_in">test</span>/ <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ ^/last &#123;</span><br><span class="line">                rewrite ^/last /<span class="built_in">test</span>/ last;</span><br><span class="line">        &#125;</span><br><span class="line">        location /<span class="built_in">test</span>/ &#123;</span><br><span class="line">                default_type application/json;</span><br><span class="line">                <span class="built_in">return</span> 200 <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart nginx</span><br></pre></td></tr></table></figure><ul><li>访问页面测试</li></ul><p>结合nginx日志和web页面分析结果</p><h4 id="2-2-测试结论"><a href="#2-2-测试结论" class="headerlink" title="2.2 测试结论"></a>2.2 测试结论</h4><p>break：只要匹配到规则，就回去本地路径目录中寻找请求的文件。<br>last：匹配到规则，跳转后没有内容，则带着跳转后的请求，重新的向server发起一次请求。</p><ul><li><p><strong>break 请求</strong></p><p>1.请求rw.test.com/break；<br>2.首先，会去查找本地的/code/rewrite/test/index.html；<br>3.如果找到了，则返回/code/rewrite/test/index.html内容；<br>4.如果没有找到则返回404，找到目录却没有主页，则返回403；</p></li><li><p><strong>last 请求</strong></p><p>1.请求rw.test.com/last;<br>2.首先，会去查找本地的/code/rewrite/test/index.html；<br>3.如果找到了，则返回/code/rewrite/test/index.html内容；<br>4.如果没找到，会带着新跳转的URI再向server发起一次请求，请求rw.test.com/test;<br>5.如果匹配到新的location，则返回该location匹配的内容；<br>6.如果没有匹配到新的，则再返回404或403；</p></li></ul><h3 id="3-Redirect-和-Permanent-的区别"><a href="#3-Redirect-和-Permanent-的区别" class="headerlink" title="3.Redirect 和 Permanent 的区别"></a>3.Redirect 和 Permanent 的区别</h3><h4 id="3-1-配置-Nginx-测试"><a href="#3-1-配置-Nginx-测试" class="headerlink" title="3.1 配置 Nginx 测试"></a>3.1 配置 Nginx 测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat rewrite.conf </span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name rw.test.com;</span><br><span class="line">        root /code/rewrite;</span><br><span class="line"></span><br><span class="line">        location /<span class="built_in">test</span> &#123;</span><br><span class="line">                rewrite ^(.*)$ http://www.test.com redirect;</span><br><span class="line">                <span class="comment">#rewrite ^(.*)$ http://www.test.com permanent;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置两种跳转，关闭nginx测试，查看结果</p><h4 id="3-2-测试结论"><a href="#3-2-测试结论" class="headerlink" title="3.2 测试结论"></a>3.2 测试结论</h4><p><strong>redirect:</strong>    每次请求都会询问服务器，是否跳转，如果服务器不可用，则跳转失败 </p><p><strong>permanent:</strong>    请求一次后，会记录跳转的地址，以后不再询问，直接跳转，通过浏览器缓存记录</p><p>&nbsp;</p><h2 id="五、Rewrite-匹配规则"><a href="#五、Rewrite-匹配规则" class="headerlink" title="五、Rewrite 匹配规则"></a>五、Rewrite 匹配规则</h2><h3 id="1-Rewrite匹配的优先级"><a href="#1-Rewrite匹配的优先级" class="headerlink" title="1.Rewrite匹配的优先级"></a>1.Rewrite匹配的优先级</h3><ol><li>先执行server模块的rewrite指令。</li><li>其次执行location匹配规则。</li><li>最后执行location里面的rewrite。</li></ol><h3 id="2-Rewrite全局变量"><a href="#2-Rewrite全局变量" class="headerlink" title="2.Rewrite全局变量"></a>2.Rewrite全局变量</h3><ul><li><strong>$server_name</strong></li></ul><p>当前用户请求的域名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name rw.test.com;</span><br><span class="line">    root /code;</span><br><span class="line">rewrite ^(.*)$ https://<span class="variable">$server_name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>$request_filename</strong></li></ul><p>请求的文件路径和名字（带着网站站点目录的路径和文件 /code/images/1.jpg）</p><ul><li><strong>$request_uri</strong></li></ul><p>请求的文件路径和名字（不带网站站点目录的路径和文件 /images/1.jpg）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name rw.test.com;</span><br><span class="line">    root /code;</span><br><span class="line">rewrite ^(.*)$ https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Rewrite可以开启日志"><a href="#3-Rewrite可以开启日志" class="headerlink" title="3.Rewrite可以开启日志"></a>3.Rewrite可以开启日志</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#NGINX主配置文件，错误日志级别改成notice</span></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log notice;</span><br><span class="line"></span><br><span class="line"><span class="comment">#http层开启rewrite日志</span></span><br><span class="line">rewrite_log on;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="六、Rewrite-规则匹配案例"><a href="#六、Rewrite-规则匹配案例" class="headerlink" title="六、Rewrite 规则匹配案例"></a>六、Rewrite 规则匹配案例</h2><h3 id="1-根据-request-uri-跳转"><a href="#1-根据-request-uri-跳转" class="headerlink" title="1. 根据 request_uri 跳转"></a>1. 根据 request_uri 跳转</h3><p>用户访问 <code>/baidu</code> 实际上访问的是 <code>www.baidu.com</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name rw.test.com;</span><br><span class="line">    root /code/rewrite;</span><br><span class="line"></span><br><span class="line">    location ~ /baidu &#123;</span><br><span class="line">        rewrite (.*) https://www.baidu.com redirect;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-将-HTTP-请求跳转到-HTTPS"><a href="#2-将-HTTP-请求跳转到-HTTPS" class="headerlink" title="2.将 HTTP 请求跳转到 HTTPS"></a>2.将 HTTP 请求跳转到 HTTPS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen80;</span><br><span class="line">    listen443 ssl http2;</span><br><span class="line">    server_name  www.test.com;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    root /code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#HTTP_TO_HTTPS_START</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$server_port</span> !~ 443)&#123;</span><br><span class="line">        rewrite ^(/.*)$ https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#HTTP_TO_HTTPS_END</span></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    error_page 497  https://$host<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Rewrite伪静态实例"><a href="#3-Rewrite伪静态实例" class="headerlink" title="3.Rewrite伪静态实例"></a>3.Rewrite伪静态实例</h3><p>此处以wordpress为例，为wordpress站点配置伪静态。</p><ul><li>搭建wordpress站点（步鄹省略）</li><li>修改nginx配置文件，添加伪静态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">index index.php index.html;</span><br><span class="line"><span class="keyword">if</span> (-f <span class="variable">$request_filename</span>/index.html)&#123;</span><br><span class="line">               rewrite (.*) <span class="variable">$1</span>/index.html <span class="built_in">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (-f <span class="variable">$request_filename</span>/index.php)&#123;</span><br><span class="line">               rewrite (.*) <span class="variable">$1</span>/index.php;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">               rewrite (.*) /index.php;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rewrite /wp-admin$ <span class="variable">$scheme</span>://$host<span class="variable">$uri</span>/ permanent;</span><br></pre></td></tr></table></figure><ul><li>重启nginx服务</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx · HTTPS 详解</title>
      <link href="posts/nginx-https-detailed-explanation/"/>
      <url>posts/nginx-https-detailed-explanation/</url>
      
        <content type="html"><![CDATA[<h2 id="一、HTTPS基本概述"><a href="#一、HTTPS基本概述" class="headerlink" title="一、HTTPS基本概述"></a>一、HTTPS基本概述</h2><p>为什么需要使用 HTTPS，因为 HTTP 不安全，当我们使用 HTTP 网站时，会遭到劫持和篡改，如果采用 HTTPS 协议，那么数据在传输过程中是加密的，所以黑客无法窃取或者篡改数据报文信息，同时也避免网站传输时信息泄露。</p><p>那么我们在实现 HTTPS 时，需要了解 SSL 协议，但我们现在使用的更多的是 TLS 加密协议。</p><p>那么 TLS 是怎么保证明文消息被加密的呢？在 OSI 七层模型中，应用层是http协议，那么在应用层协议之下，我们的表示层，是 SSL 协议所发挥作用的一层，他通过（握手、交换秘钥、告警、加密）等方式，是应用层 HTTP 协议没有感知的情况下做到了数据的安全加密</p><p>&nbsp;</p><h2 id="二、HTTPS证书下发流程"><a href="#二、HTTPS证书下发流程" class="headerlink" title="二、HTTPS证书下发流程"></a>二、HTTPS证书下发流程</h2><p>我们首先需要申请证书，先去登记机构进行身份登记，我是谁，我是干嘛的，我想做什么，然后登记机构再通过CSR发给 CA，CA 中心通过后会生成一堆公钥和私钥，公钥会在 CA 证书链中保存，公钥和私钥证书我们拿到后，会将其部署在WEB服务器上。</p><ol><li>当浏览器访问我们的 https 站点时，他会去请求我们的证书。</li><li>Nginx 这样的 web服务器 会将我们的公钥证书发给浏览器。</li><li>浏览器会去验证我们的证书是否合法有效。</li><li>CA 机构会将过期的证书放置在CRL服务器，CRL服务的验证效率是非常差的，所以CA有推出了 OCSP 响应程序，OCSP 响应程序可以查询指定的一个证书是否过去，所以浏览器可以直接查询 OSCP 响应程序，但 OSCP 响应程序性能还不是很高。</li><li>Nginx会有一个 OCSP 的开关，当我们开启后，Nginx会主动上 OCSP 上查询，这样大量的客户端直接从 Nginx 获取证书是否有效。</li></ol><p>&nbsp;</p><h2 id="三、证书类型介绍"><a href="#三、证书类型介绍" class="headerlink" title="三、证书类型介绍"></a>三、证书类型介绍</h2><table><thead><tr><th>对比</th><th>域名型DV</th><th>企业型OV</th><th>增强型EV</th></tr></thead><tbody><tr><td>绿色地址栏</td><td>小锁标记+https</td><td>小锁标记+https</td><td>小锁标记+企业名称+https</td></tr><tr><td>一般用途</td><td>个人站点和应用； 简单的https加密需求</td><td>电子商务站点和应用； 中小型企业站点</td><td>大型金融平台； 大型企业和政府机构站点</td></tr><tr><td>审核内容</td><td>域名所有权验证</td><td>全面的企业身份验证； 域名所有权验证</td><td>最高等级的企业身份验证； 域名所有权验证</td></tr><tr><td>单次申请年限</td><td>10分钟-24小时</td><td>3-5个工作日</td><td>5-7个工作日</td></tr><tr><td>赔付保障金</td><td>——</td><td>125-175万美金</td><td>150-175万美金</td></tr></tbody></table><h3 id="1-购买证书选择"><a href="#1-购买证书选择" class="headerlink" title="1.购买证书选择"></a>1.购买证书选择</h3><ul><li>单域名 SSL 证书，例如：<a href="http://www.xxx.com/">www.xxx.com</a></li><li>多域名 SSL 证书，例如：<a href="http://www.xxx.com、cdn.xxx.com、img.xxx.com/">www.xxx.com、cdn.xxx.com、img.xxx.com</a></li><li>通配符域名（泛域名）SSL 证书，例如：*.xxx.com</li></ul><h3 id="2-HTTPS证书注意事项"><a href="#2-HTTPS证书注意事项" class="headerlink" title="2.HTTPS证书注意事项"></a>2.HTTPS证书注意事项</h3><ol><li><p>https 不支持续费，证书到期需要重新申请并进行替换。</p></li><li><p>https 不支持三级域名解析，如 test.m.haoda.com。</p></li><li><ul><li><p>https 显示绿色，说明整个网站的url都是 https 的</p></li><li><p>https 显示黄色，因为网站代码中包含http 的不安全链接</p></li><li><p>https 显示红色，那么证书是假的或者证书过期。</p></li></ul></li></ol><p>&nbsp;</p><h2 id="四、配置单台机器-HTTPS-证书"><a href="#四、配置单台机器-HTTPS-证书" class="headerlink" title="四、配置单台机器 HTTPS 证书"></a>四、配置单台机器 HTTPS 证书</h2><h3 id="1-检查-Nginx-是否有-HTTPS-模块"><a href="#1-检查-Nginx-是否有-HTTPS-模块" class="headerlink" title="1.检查 Nginx 是否有 HTTPS 模块"></a>1.检查 Nginx 是否有 HTTPS 模块</h3><p>Nginx 需要 <code>--with-http_ssl_module</code> 模块才能使用 HTTPS</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nginx -V</span><br><span class="line">--with-http_ssl_module</span><br></pre></td></tr></table></figure><h3 id="2-创建存放证书目录"><a href="#2-创建存放证书目录" class="headerlink" title="2.创建存放证书目录"></a>2.创建存放证书目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /etc/nginx/ssl_key</span><br><span class="line">$ <span class="built_in">cd</span> /etc/nginx/ssl_key/</span><br></pre></td></tr></table></figure><h3 id="3-生成证书"><a href="#3-生成证书" class="headerlink" title="3.生成证书"></a>3.生成证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl genrsa -idea -out server.key 2048</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">..................................................................................................................................+++</span><br><span class="line">...............................................................................+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Enter pass phrase <span class="keyword">for</span> server.key:</span><br><span class="line">Verifying - Enter pass phrase <span class="keyword">for</span> server.key:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ openssl req -days 36500 -x509 -sha256 -nodes -newkey rsa:2048 -keyout server.key -out server.crt</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">...................................................+++</span><br><span class="line">.................+++</span><br><span class="line">writing new private key to <span class="string">&#x27;server.key&#x27;</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:AH</span><br><span class="line">Locality Name (eg, city) [Default City]:LA</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:WANHEBIN</span><br><span class="line">Organizational Unit Name (eg, section) []:WANHEBIN</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:discuz.test.com</span></span><br><span class="line"><span class="string">Email Address []:123@qq.com</span></span><br><span class="line"><span class="string">You have new mail in /var/spool/mail/root</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl req -days 36500 -x509 -sha256 -nodes -newkey rsa:2048 -keyout server.key -out server.crt</span><br></pre></td></tr></table></figure><blockquote><p>-req        用于创建新的证书</p><p>-new      创建的是新证书 </p><p>-x509     定义证书的格式为标准格式</p><p>-key       调用的私钥文件信息</p><p>-out       输出证书文件信息</p><p>-days     证书的有效期</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 1375 Mar  5 15:15 server.crt</span><br><span class="line">-rw-r--r-- 1 root root 1704 Mar  5 15:15 server.key</span><br></pre></td></tr></table></figure><h3 id="4-Nginx-证书配置语法"><a href="#4-Nginx-证书配置语法" class="headerlink" title="4.Nginx 证书配置语法"></a>4.Nginx 证书配置语法</h3><ul><li><strong>启动 SSL 功能</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Syntax:ssl on | off;</span><br><span class="line">Default:ssl off;</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure><ul><li><strong>证书文件</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Syntax:ssl_certificate file;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure><ul><li><strong>私钥文件</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Syntax:ssl_certificate_key file;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure><h3 id="5-配置-Nginx-证书"><a href="#5-配置-Nginx-证书" class="headerlink" title="5.配置 Nginx 证书"></a>5.配置 Nginx 证书</h3><h4 id="5-1-配置-Nginx"><a href="#5-1-配置-Nginx" class="headerlink" title="5.1 配置 Nginx"></a>5.1 配置 Nginx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/nginx/conf.d/s.linux.com.conf</span><br><span class="line">server &#123;</span><br><span class="line">ssl on;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name s.linux.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl_key/server.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl_key/server.key;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code/https;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-重启-Nginx"><a href="#5-2-重启-Nginx" class="headerlink" title="5.2 重启 Nginx"></a>5.2 重启 Nginx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart nginx</span><br></pre></td></tr></table></figure><h4 id="5-3-配置站点"><a href="#5-3-配置站点" class="headerlink" title="5.3 配置站点"></a>5.3 配置站点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;test https&quot;</span> &gt; /code/https/index.html</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="五、全站-HTTPS"><a href="#五、全站-HTTPS" class="headerlink" title="五、全站 HTTPS"></a>五、全站 HTTPS</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><table><thead><tr><th>主机</th><th>外网IP</th><th>内网IP</th><th>身份</th></tr></thead><tbody><tr><td>lb-01</td><td>10.0.0.5</td><td>172.16.1.5</td><td>负载均衡</td></tr><tr><td>web-01</td><td>10.0.0.6</td><td>172.16.1.6</td><td>web服务器</td></tr><tr><td>web-02</td><td>10.0.0.7</td><td>172.16.1.8</td><td>web服务器</td></tr></tbody></table><h3 id="2-配置-web服务器（两台）"><a href="#2-配置-web服务器（两台）" class="headerlink" title="2.配置 web服务器（两台）"></a>2.配置 web服务器（两台）</h3><h4 id="2-1-配置-Nginx-配置文件"><a href="#2-1-配置-Nginx-配置文件" class="headerlink" title="2.1 配置 Nginx 配置文件"></a>2.1 配置 Nginx 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web-01 conf.d]<span class="comment"># vim s.linux.com.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name s.linux.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code/https;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 nginx 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web-01 conf.d]<span class="comment"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure><h4 id="2-2-同步配置文件"><a href="#2-2-同步配置文件" class="headerlink" title="2.2 同步配置文件"></a>2.2 同步配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web-01 conf.d]<span class="comment"># scp s.linux.com.conf 172.16.1.8:/etc/nginx/conf.d/</span></span><br></pre></td></tr></table></figure><h4 id="2-3-配置站点目录文件"><a href="#2-3-配置站点目录文件" class="headerlink" title="2.3 配置站点目录文件"></a>2.3 配置站点目录文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web-01 conf.d]<span class="comment"># mkdir /code/https</span></span><br><span class="line">[root@web-01 conf.d]<span class="comment"># echo &quot;https1111&quot; &gt; /code/https/index.html</span></span><br><span class="line">[root@web-02 conf.d]<span class="comment"># mkdir /code/https</span></span><br><span class="line">[root@web-02 conf.d]<span class="comment"># echo &quot;https2222&quot; &gt; /code/https/index.html</span></span><br><span class="line">[root@web-01 conf.d]<span class="comment"># chown -R www.www /code/https/</span></span><br><span class="line">[root@web-02 conf.d]<span class="comment"># chown -R www.www /code/https/</span></span><br></pre></td></tr></table></figure><h4 id="2-4-推送、上传证书文件"><a href="#2-4-推送、上传证书文件" class="headerlink" title="2.4 推送、上传证书文件"></a>2.4 推送、上传证书文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web-01 conf.d]<span class="comment"># scp -r /etc/nginx/ssl_key 172.16.1.4:/etc/nginx/</span></span><br></pre></td></tr></table></figure><h4 id="2-5-配置负载均衡机器-Nginx"><a href="#2-5-配置负载均衡机器-Nginx" class="headerlink" title="2.5 配置负载均衡机器 Nginx"></a>2.5 配置负载均衡机器 Nginx</h4><ul><li><p><strong>写法一</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lb-01 conf.d]<span class="comment"># vim s.linux.com.conf</span></span><br><span class="line">upstream webserver &#123;</span><br><span class="line">    server 172.16.1.7:80;</span><br><span class="line">    server 172.16.1.8:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name s.linux.com;</span><br><span class="line">    <span class="built_in">return</span> 302 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name s.linux.com;</span><br><span class="line">    </span><br><span class="line">    ssl_certificate /etc/nginx/ssl_key/server.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl_key/server.key;</span><br><span class="line">    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    error_page 497  https://$host<span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://webserver;</span><br><span class="line">        proxy_set_header host <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>写法二</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lb-01 conf.d]<span class="comment"># vim s.linux.com.conf</span></span><br><span class="line">upstream webserver &#123;</span><br><span class="line">    server 172.16.1.7:80;</span><br><span class="line">    server 172.16.1.8:80;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name s.linux.com;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#HTTP_TO_HTTPS_START</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$server_port</span> !~ 443)&#123;</span><br><span class="line">        rewrite ^(/.*)$ https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#HTTP_TO_HTTPS_END</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#SSL-START</span></span><br><span class="line">    ssl_certificate /etc/nginx/ssl_key/server.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl_key/server.key;</span><br><span class="line">    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    error_page 497  https://$host<span class="variable">$request_uri</span>;</span><br><span class="line"><span class="comment">#SSL-END</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://webserver;</span><br><span class="line">        proxy_set_header host <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>注意：</strong></p><p>以上两种 SSL 配置方法选择一种即可。</p></blockquote><p>配置完成后，重启 nginx 服务，然后使用浏览器验证配置是否生效。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenVPN 部署与应用</title>
      <link href="posts/openvpn-deployment-and-application/"/>
      <url>posts/openvpn-deployment-and-application/</url>
      
        <content type="html"><![CDATA[<h2 id="OpenVPN介绍"><a href="#OpenVPN介绍" class="headerlink" title="OpenVPN介绍"></a>OpenVPN介绍</h2><ul><li><p>VPN</p><p>虚拟专用网络(VPN)的功能是：在公用网络上建立专用网络专用网络，进行加密通讯。在企业网络中有广泛应用。VPN网关通过对数据包的加密和数据包目标地址的转换实现远程访问。VPN可通过服务器、硬件、软件等多种方式实现。</p><p>简单来说，就是提供企业之间或者个人与公司之间的安全数据传输的隧道  </p></li><li><p>OpenVPN</p><p>VPN直译就是虚拟专用通道，是提供给企业之间或者个人与公司之间<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/3166604">安全数据传输</a>的隧道，OpenVPN无疑是Linux下开源VPN的先锋，提供了良好的性能和友好的用户GUI。</p><p>OpenVPN大量使用了OpenSSL加密库中的SSLv3/TLSv1协议函数库。</p><p>OpenVPN 是一个基于 OpenSSL 库的应用层 VPN 实现。和传统 VPN 相比，它的优点是简单易用。</p></li></ul><p>&nbsp;</p><h2 id="OpenVPN应用场景"><a href="#OpenVPN应用场景" class="headerlink" title="OpenVPN应用场景"></a>OpenVPN应用场景</h2><ul><li><p><strong>Peer-to-Peer VPN（点对点连接）</strong></p><p>将Internet两台机器（公网地址）使用VPN连接起来，比如上海服务器和北京服务器之间的数据需要相互调用，但是数据有比较敏感，直接通过http公共传输，容易被窃取。如果拉一条专线成本又太高。那么我们可以通过VPN使用现有网络，将两台主机逻辑上捆绑在一个虚拟网络中，这样既保证了数据安全传输，同时又节省了成本。</p></li><li><p><strong>Site-to-Site VPN（站点到站点连接）</strong></p><p>用于连接两个或者多个地域上不同的局域网LAN，每个LAN有一台OpenVPN服务器作为接入点，组成虚拟专用网络，使得不同LAN里面的主机和服务器都能够相互通讯（比如国内公司与海外分公司的连接）</p></li><li><p><strong>Remote Access VPN（远程访问）</strong></p><p>应用于外网用户访问内部网络。在这个场景中远程访问者一般通过公网IP连接VPN服务，然后通过分配后的内网地址与内网网段进行通信。</p></li></ul><p>&nbsp;</p><h2 id="OpenVPN部署"><a href="#OpenVPN部署" class="headerlink" title="OpenVPN部署"></a>OpenVPN部署</h2><h3 id="环境规划"><a href="#环境规划" class="headerlink" title="环境规划"></a>环境规划</h3><table><thead><tr><th>主机名</th><th>外网IP</th><th>内网IP</th><th>角色</th></tr></thead><tbody><tr><td>openvpn</td><td>10.0.0.61</td><td>172.16.1.61</td><td>OpenVPN服务端</td></tr><tr><td>web-01</td><td></td><td>172.16.1.7</td><td>内网主机</td></tr><tr><td>web-02</td><td></td><td>172.16.1.8</td><td>内网主机</td></tr><tr><td></td><td>10.0.0.1</td><td></td><td>OpenVPN客户端</td></tr></tbody></table><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><ul><li><p>下载证书生成工具 <code>easy-rsa</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install easy-rsa</span><br></pre></td></tr></table></figure></li><li><p>创建证书环境目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/easy-rsa</span><br><span class="line">cp -a /usr/share/easy-rsa/3.0.7/* /opt/easy-rsa/</span><br><span class="line">cp -a /usr/share/doc/easy-rsa-3.0.7/vars.example /opt/easy-rsa/vars</span><br></pre></td></tr></table></figure></li><li><p>生成秘钥前，准备 <code>vars</code> 文件</p><p>修改文件 <code>/opt/easy-rsa/vars</code> 中的如下配置（要取消注释）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">set_var EASYRSA_DN      <span class="string">&quot;cn_only&quot;</span></span><br><span class="line">set_var EASYRSA_REQ_COUNTRY     <span class="string">&quot;CN&quot;</span></span><br><span class="line">set_var EASYRSA_REQ_PROVINCE    <span class="string">&quot;Shanghai&quot;</span></span><br><span class="line">set_var EASYRSA_REQ_CITY        <span class="string">&quot;Shanghai&quot;</span></span><br><span class="line">set_var EASYRSA_REQ_ORG <span class="string">&quot;whb&quot;</span></span><br><span class="line">set_var EASYRSA_REQ_EMAIL       <span class="string">&quot;whb@qq.com&quot;</span></span><br><span class="line">set_var EASYRSA_NS_SUPPORT      <span class="string">&quot;yes&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>初始化</p><p>在当前目录下创建 <code>pki</code> 目录，用于存储证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/easy-rsa/</span><br><span class="line">/opt/easy-rsa/easyrsa init-pki</span><br></pre></td></tr></table></figure><p><img src="https://pic-cdn.wanhebin.com/img/openvpn/openvpn-1.png" alt="openvpn-1.png"></p></li><li><p>创建根证书</p><p>根证书用于ca对之后生成的server和client证书签名时使用。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/easy-rsa/easyrsa build-ca</span><br></pre></td></tr></table></figure><p><img src="https://pic-cdn.wanhebin.com/img/openvpn/openvpn-2.png" alt="openvpn-2.png"></p></li><li><p>创建server端证书和私钥文件</p><p>nopass表示不加密私钥文件，生成过程中直接回车默认</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/easy-rsa/easyrsa gen-req server nopass</span><br></pre></td></tr></table></figure><p><img src="https://pic-cdn.wanhebin.com/img/openvpn/openvpn-3.png" alt="openvpn-3.png"></p></li><li><p>给server证书签名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/easy-rsa/easyrsa sign server server</span><br></pre></td></tr></table></figure><p><img src="https://pic-cdn.wanhebin.com/img/openvpn/openvpn-4.png" alt="openvpn-4.png"></p></li><li><p>创建Diffie-Hellman文件，秘钥交换时的Diffie-Hellman算法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/easy-rsa/easyrsa gen-dh</span><br></pre></td></tr></table></figure></li><li><p>创建server端证书和私钥文件</p><p>nopass表示不加密私钥文件，生成过程中直接回车默认</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/easy-rsa/easyrsa gen-req client nopass</span><br></pre></td></tr></table></figure><p><img src="https://pic-cdn.wanhebin.com/img/openvpn/openvpn-5.png" alt="openvpn-5.png"></p></li><li><p>给client端证书签名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/easy-rsa/easyrsa sign client client</span><br></pre></td></tr></table></figure><p><img src="https://pic-cdn.wanhebin.com/img/openvpn/openvpn-6.png" alt="openvpn-6.png"></p></li></ul><h3 id="OpenVPN-服务端部署"><a href="#OpenVPN-服务端部署" class="headerlink" title="OpenVPN 服务端部署"></a>OpenVPN 服务端部署</h3><ul><li><p>安装 openvpn 软件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  yum -y install openvpn </span><br><span class="line"></span><br><span class="line">- 修改配置文件</span><br><span class="line"></span><br><span class="line">  自行创建配置文件 `/etc/openvpn/server.conf `，并加入如下配置</span><br><span class="line"></span><br><span class="line">  ```bash</span><br><span class="line">  [root@openvpn ~]<span class="comment"># cat /etc/openvpn/server.conf</span></span><br><span class="line">  port 1194 <span class="comment">#端口</span></span><br><span class="line">  proto udp <span class="comment">#协议</span></span><br><span class="line">  dev tun <span class="comment">#采用路由隧道模式tun</span></span><br><span class="line">  ca ca.crt <span class="comment">#ca证书文件位置</span></span><br><span class="line">  cert server.crt <span class="comment">#服务端公钥名称</span></span><br><span class="line">  key server.key <span class="comment">#服务端私钥名称</span></span><br><span class="line">  dh dh.pem <span class="comment">#交换证书</span></span><br><span class="line">  server 10.8.0.0 255.255.255.0 <span class="comment">#给客户端分配地址池，注意：不能和VPN服务器内网网段有相同</span></span><br><span class="line">  push <span class="string">&quot;route 172.16.1.0 255.255.255.0&quot;</span> <span class="comment">#允许客户端访问内网172.16.1.0网段</span></span><br><span class="line">  ifconfig-pool-persist ipp.txt <span class="comment">#地址池记录文件位置</span></span><br><span class="line">  keepalive 10 120 <span class="comment">#存活时间，10秒ping一次,120 如未收到响应则视为断线</span></span><br><span class="line">  max-clients 100 <span class="comment">#最多允许100个客户端连接</span></span><br><span class="line">  status openvpn-status.log <span class="comment">#日志记录位置</span></span><br><span class="line">  verb 3 <span class="comment">#openvpn版本</span></span><br><span class="line">  client-to-client <span class="comment">#客户端与客户端之间支持通信</span></span><br><span class="line">  <span class="built_in">log</span> /var/<span class="built_in">log</span>/openvpn.log <span class="comment">#openvpn日志记录位置</span></span><br><span class="line">  persist-key <span class="comment">#通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keys。</span></span><br><span class="line">  persist-tun <span class="comment">#检测超时后，重新启动VPN，一直保持tun是linkup的。否则网络会先linkdown然后再linkup</span></span><br><span class="line">  duplicate-cn</span><br></pre></td></tr></table></figure></li><li><p>拷贝证书到 openvpn 主配置文件目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -a /opt/easy-rsa/pki/ca.crt /etc/openvpn/</span><br><span class="line">cp -a /opt/easy-rsa/pki/issued/server.crt /etc/openvpn/</span><br><span class="line">cp -a /opt/easy-rsa/pki/private/server.key /etc/openvpn/</span><br><span class="line">cp -a /opt/easy-rsa/pki/dh.pem /etc/openvpn/</span><br></pre></td></tr></table></figure></li><li><p>启动 openvpn</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl -f <span class="built_in">enable</span> openvpn@server.service</span><br><span class="line">systemctl start openvpn@server.service</span><br></pre></td></tr></table></figure></li></ul><h3 id="OpenVPN-客户端部署"><a href="#OpenVPN-客户端部署" class="headerlink" title="OpenVPN 客户端部署"></a>OpenVPN 客户端部署</h3><ul><li><p>安装 OpenVPN 客户端软件</p><p>这里是在windows环境下部署 OpenVPN 的客户端的，首先需要下载安装 OpenVPN 客户端软件</p></li><li><p>配置客户端</p><p>拷贝服务端生成的证书到OpenVPN安装目录的 <code>config</code> 目录下</p><p>分别拷贝以下几个文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/easy-rsa/pki/ca.crt </span><br><span class="line">/opt/easy-rsa/pki/issued/client.crt</span><br><span class="line">/opt/easy-rsa/pki/private/client.key</span><br></pre></td></tr></table></figure></li><li><p>编写客户端配置文件</p><p>在 OpenVPN 安装目录的 <code>config</code> 目录下，新建一个 <code>client.ovpn</code> 文件，在文件中添加如下配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">client <span class="comment">#指定当前VPN是客户端</span></span><br><span class="line">dev tun <span class="comment">#使用tun隧道传输协议</span></span><br><span class="line">proto udp <span class="comment">#使用udp协议传输数据</span></span><br><span class="line">remote 10.0.0.61 1194 <span class="comment">#openvpn服务器IP地址端口号</span></span><br><span class="line">resolv-retry infinite <span class="comment">#断线自动重新连接，在网络不稳定的情况下非常有用</span></span><br><span class="line">nobind <span class="comment">#不绑定本地特定的端口号</span></span><br><span class="line">ca ca.crt <span class="comment">#指定CA证书的文件路径</span></span><br><span class="line">cert client.crt <span class="comment">#指定当前客户端的证书文件路径</span></span><br><span class="line">key client.key <span class="comment">#指定当前客户端的私钥文件路径</span></span><br><span class="line">verb 3 <span class="comment">#指定日志文件的记录详细级别，可选0-9，等级越高日志内容越详细</span></span><br><span class="line">persist-key <span class="comment">#通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keys</span></span><br><span class="line">persist-tun <span class="comment">#检测超时后，重新启动VPN，一直保持tun是linkup的。否则网络会先linkdown然后再linkup</span></span><br></pre></td></tr></table></figure></li><li><p>启动 openvpn 客户端软件</p><p>双击安装好后的 openvpn 软件，然后右键点击连接。</p><p>连接成功后，在托任务栏位置的 OpenVPN 图标会变绿色，则说明 OpenVPN 已经连接成功。</p><p><img src="https://pic-cdn.wanhebin.com/img/openvpn/openvpn-7.png" alt="openvpn-7.png"></p><p>OpenVPN会分配一个IP地址给客户端，客户端会使用该虚拟网络IP地址与服务端进行通信。</p></li></ul><p>&nbsp;</p><h2 id="OpenVPN-客户端访问内网"><a href="#OpenVPN-客户端访问内网" class="headerlink" title="OpenVPN 客户端访问内网"></a>OpenVPN 客户端访问内网</h2><h3 id="开启内核转发"><a href="#开启内核转发" class="headerlink" title="开启内核转发"></a>开启内核转发</h3><p>在 openvpn 服务端开启内核转发。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@openvpn ~]<span class="comment"># echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>无论用哪种方式访问内部网络，都必须开启内核转发。</p></blockquote><h3 id="添加路由规则方式访问内部网络"><a href="#添加路由规则方式访问内部网络" class="headerlink" title="添加路由规则方式访问内部网络"></a>添加路由规则方式访问内部网络</h3><p>在内网主机 web-01 上添加一条路由规则，让 web-01 有回到 openvpn 客户端的路由。如果不添加，那 web-01 只能接受到来自客户端的包，但是没法把响应的包传回去。</p><p>弊端：如果有成白上千台主机时，每一台主机都要添加路由规则，这样任务量是比较大的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web-01 ~]<span class="comment"># route add -net 10.8.0.0/24 gw 172.16.1.61</span></span><br></pre></td></tr></table></figure><h3 id="开启防火墙方式访问内部网络"><a href="#开启防火墙方式访问内部网络" class="headerlink" title="开启防火墙方式访问内部网络"></a>开启防火墙方式访问内部网络</h3><p>在服务端开启防火墙，放行 openvpn 服务，并且开启 <code>masquerade</code>。</p><p><strong>优点：</strong>只需在OpenVPN服务端配置防火墙规则，内部网络主机无需配置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br><span class="line">firewall-cmd --add-masquerade --permanent</span><br><span class="line">firewall-cmd --add-service=openvpn --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="双重验证登录"><a href="#双重验证登录" class="headerlink" title="双重验证登录"></a>双重验证登录</h2><p>使用 OpenVPN 秘钥和用户名密码双重身份验证登录。</p><p>为什么需要用户名密码验证登录？</p><p>我们已经使用了 CA 证书、交换秘钥这几种方式进行加密了，可以说已经很安全了，为什么还要需要用户名密码呢？</p><p>首先安全还是很重要的，其次就是管理这些秘钥和证书还是比较麻烦的，如果用户量比较多，我们不可能为每个用户都创建一套加密，每个用户创建一个秘钥比较麻烦，但多人使用一个秘钥又不具有唯一性，比如说有用户不在需要 VPN 的时候，我们就只能吊销证书。但是如果多人使用一个秘钥的情况下，吊销证书了，其他的用户也登录不了。所以我们就需要秘钥加用户名和密码，这样就可以多个用户使用同一个证书，使用不同的用户名和密码。</p><p>新用户加入的时候，只需要添加一个用户名和密码，如果有人不需要 VPN 时，直接删除用户名和密码就可以了。</p><h3 id="修改-Server-端配置"><a href="#修改-Server-端配置" class="headerlink" title="修改 Server 端配置"></a>修改 Server 端配置</h3><ul><li><p>修改配置文件</p><p>在配置文件 <code>/etc/openvpn/server.conf</code> 中添加以下配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">script-security 3              <span class="comment">#允许使用自定义脚本</span></span><br><span class="line">auth-user-pass-verify /etc/openvpn/check.sh via-env</span><br><span class="line">username-as-common-name         <span class="comment">#用户密码登陆方式验证</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p></li></ul><blockquote><p>如果加上 <code>client-cert-not-required</code> 则代表只使用用户名密码方式验证登录，如果不加，则代表需要证书和用户名密码双重验证登录！</p></blockquote><ul><li><p>添加脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@openvpn ~]<span class="comment"># vim /etc/openvpn/check.sh</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">PASSFILE=<span class="string">&quot;/etc/openvpn/openvpnfile&quot;</span></span><br><span class="line">LOG_FILE=<span class="string">&quot;/var/log/openvpn-password.log&quot;</span></span><br><span class="line">TIME_STAMP=`date <span class="string">&quot;+%Y-%m-%d %T&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -r <span class="string">&quot;<span class="variable">$&#123;PASSFILE&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;TIME_STAMP&#125;</span>: Could not open password file \&quot;<span class="variable">$&#123;PASSFILE&#125;</span>\&quot; for reading.&quot;</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">CORRECT_PASSWORD=`awk <span class="string">&#x27;!/^;/&amp;&amp;!/^#/&amp;&amp;$1==&quot;&#x27;</span><span class="variable">$&#123;username&#125;</span><span class="string">&#x27;&quot;&#123;print $2;exit&#125;&#x27;</span> <span class="variable">$&#123;PASSFILE&#125;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;CORRECT_PASSWORD&#125;</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;TIME_STAMP&#125;</span>: User does not exist: username=\&quot;<span class="variable">$&#123;username&#125;</span>\&quot;, password=\&quot;<span class="variable">$&#123;password&#125;</span>\&quot;.&quot;</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;password&#125;</span>&quot;</span> = <span class="string">&quot;<span class="variable">$&#123;CORRECT_PASSWORD&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;TIME_STAMP&#125;</span>: Successful authentication: username=\&quot;<span class="variable">$&#123;username&#125;</span>\&quot;.&quot;</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;TIME_STAMP&#125;</span>: Incorrect password: username=\&quot;<span class="variable">$&#123;username&#125;</span>\&quot;, password=\&quot;<span class="variable">$&#123;password&#125;</span>\&quot;.&quot;</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p>给脚本添加执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/openvpn/check.sh </span><br></pre></td></tr></table></figure></li><li><p>编写用户密码文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@openvpn ~]<span class="comment"># cat /etc/openvpn/openvpnfile</span></span><br><span class="line">whb123456</span><br></pre></td></tr></table></figure></li><li><p>重启 openvpn 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart openvpn@server.service</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改客户端配置"><a href="#修改客户端配置" class="headerlink" title="修改客户端配置"></a>修改客户端配置</h3><p>在安装目录下 <code>config</code> 目录下的 <code>client.ovpn</code> 文件中添加如下配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auth-user-pass</span><br></pre></td></tr></table></figure><p>然后重启 openvpn 客户端软件。</p><p>再次使用就会跳出用户登录窗口了</p><p><img src="https://pic-cdn.wanhebin.com/img/openvpn/openvpn-8.png" alt="openvpn-8.png"></p><p>输入用户名和密码后登录成功。</p>]]></content>
      
      
      <categories>
          
          <category> OpenVPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenVPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 配置 NTP 时间同步服务器</title>
      <link href="posts/centos7-configure-ntp-server/"/>
      <url>posts/centos7-configure-ntp-server/</url>
      
        <content type="html"><![CDATA[<h2 id="一、主机环境"><a href="#一、主机环境" class="headerlink" title="一、主机环境"></a>一、主机环境</h2><table><thead><tr><th align="center">主机名</th><th align="center">角色</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">m-01</td><td align="center">NTP 服务端</td><td align="center">172.16.1.61</td></tr><tr><td align="center">web-01</td><td align="center">NTP 客户端</td><td align="center">172.16.1.7</td></tr><tr><td align="center">web-02</td><td align="center">NTP 客户端</td><td align="center">172.16.1.8</td></tr></tbody></table><p>&nbsp;</p><h2 id="二、服务端配置"><a href="#二、服务端配置" class="headerlink" title="二、服务端配置"></a>二、服务端配置</h2><h3 id="2-1-安装-ntp、ntpdate"><a href="#2-1-安装-ntp、ntpdate" class="headerlink" title="2.1 安装 ntp、ntpdate"></a>2.1 安装 ntp、ntpdate</h3><p>检查服务器是否安装了 ntp、ntpdate 软件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@m-01 ~]<span class="comment"># rpm -qa | grep ntp</span></span><br><span class="line">ntpdate-4.2.6p5-29.el7.centos.x86_64</span><br><span class="line">ntp-4.2.6p5-29.el7.centos.x86_64</span><br></pre></td></tr></table></figure><p>如果没有，则需要安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@m-01 ~]<span class="comment"># yum -y install ntp ntpdate</span></span><br></pre></td></tr></table></figure><h3 id="2-2-修改-ntp-配置文件"><a href="#2-2-修改-ntp-配置文件" class="headerlink" title="2.2 修改 ntp 配置文件"></a>2.2 修改 ntp 配置文件</h3><p>ntp 的配置文件路径为 <code>/etc/ntp.conf</code> 。</p><h4 id="2-2-1-注释以下配置"><a href="#2-2-1-注释以下配置" class="headerlink" title="2.2.1 注释以下配置"></a>2.2.1 注释以下配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-新增配置"><a href="#2-2-2-新增配置" class="headerlink" title="2.2.2 新增配置"></a>2.2.2 新增配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#日志文件</span></span><br><span class="line">logfile /var/<span class="built_in">log</span>/ntpd.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#授权172.16.1.0网段上所有机器可以从这台机器上查询和时间同步</span></span><br><span class="line">restrict 172.16.1.0 mask 225.225.225.0 nomotify notrap</span><br><span class="line"></span><br><span class="line"><span class="comment">#时间服务器列表</span></span><br><span class="line">server 210.72.145.44    <span class="comment">#中国国家授时中心</span></span><br><span class="line">server ntp1.aliyun.com</span><br><span class="line">server ntp2.aliyun.com</span><br><span class="line">server ntp3.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#当外部时间不可用时，使用本地时间</span></span><br><span class="line">server 127.0.0.1</span><br><span class="line">fudge 127.0.0.1 stratum 10</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许上层时间服务器主动修改本机时间</span></span><br><span class="line">restrict 210.72.145.44    nomodify notrap noquery</span><br><span class="line">restrict ntp1.aliyun.com  nomodify notrap noquery</span><br><span class="line">restrict ntp2.aliyun.com  nomodify notrap noquery</span><br><span class="line">restrict ntp3.aliyun.com  nomodify notrap noquery</span><br></pre></td></tr></table></figure><h4 id="2-2-3-重启-ntp-服务"><a href="#2-2-3-重启-ntp-服务" class="headerlink" title="2.2.3 重启 ntp 服务"></a>2.2.3 重启 ntp 服务</h4><p>为了服务器重启后，ntp 服务可以正常运行，需要设置开机自启动。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@m-01 ~]<span class="comment"># systemctl enable ntpd</span></span><br><span class="line">[root@m-01 ~]<span class="comment"># systemctl restart ntpd</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-同步时间"><a href="#2-2-4-同步时间" class="headerlink" title="2.2.4 同步时间"></a>2.2.4 同步时间</h4><p>启动 ntp 服务时，先手动同步下本地服务器时间。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@m-01 ~]<span class="comment"># ntpdate -u ntp1.aliyun.com</span></span><br></pre></td></tr></table></figure><h4 id="2-2-5-检查-ntp-服务是否启动"><a href="#2-2-5-检查-ntp-服务是否启动" class="headerlink" title="2.2.5 检查 ntp 服务是否启动"></a>2.2.5 检查 ntp 服务是否启动</h4><p>等待几分钟后，当出现如同第二次命令执行结果时即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@m-01 ~]<span class="comment"># ntpstat </span></span><br><span class="line">unsynchronised</span><br><span class="line">  time server re-starting</span><br><span class="line">   polling server every 8 s</span><br><span class="line"></span><br><span class="line">[root@m-01 ~]<span class="comment"># ntpstat </span></span><br><span class="line">synchronised to NTP server (120.25.115.20) at stratum 3</span><br><span class="line">   time correct to within 154 ms</span><br><span class="line">   polling server every 64 s</span><br></pre></td></tr></table></figure><p> &nbsp;</p><h2 id="三、客户端配置"><a href="#三、客户端配置" class="headerlink" title="三、客户端配置"></a>三、客户端配置</h2><h3 id="3-1-安装-ntp、ntpdate"><a href="#3-1-安装-ntp、ntpdate" class="headerlink" title="3.1 安装 ntp、ntpdate"></a>3.1 安装 ntp、ntpdate</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web-01 ~]<span class="comment"># yum install ntp ntpdate</span></span><br></pre></td></tr></table></figure><h3 id="3-2-修改配置文件"><a href="#3-2-修改配置文件" class="headerlink" title="3.2 修改配置文件"></a>3.2 修改配置文件</h3><p>ntp 的配置文件路径为 <code>/etc/ntp.conf</code> 。</p><h4 id="3-2-1-注释配置"><a href="#3-2-1-注释配置" class="headerlink" title="3.2.1 注释配置"></a>3.2.1 注释配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-新增配置"><a href="#3-2-2-新增配置" class="headerlink" title="3.2.2 新增配置"></a>3.2.2 新增配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ntp服务器地址</span></span><br><span class="line">server 172.16.1.61</span><br><span class="line"></span><br><span class="line"><span class="comment">#新增：允许上层时间服务器主动修改本机时间</span></span><br><span class="line">restrict 172.16.1.61 nomodify notrap noquery</span><br><span class="line"></span><br><span class="line"><span class="comment">#新增：当外部时间不可用时，使用本地时间</span></span><br><span class="line">server 127.0.0.1  <span class="comment">#local clock</span></span><br><span class="line">fudge 127.0.0.1 stratum 10</span><br></pre></td></tr></table></figure><h3 id="3-3-重启ntp服务"><a href="#3-3-重启ntp服务" class="headerlink" title="3.3 重启ntp服务"></a>3.3 重启ntp服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web-01 ~]<span class="comment"># systemctl enable ntpd</span></span><br><span class="line">[root@web-01 ~]<span class="comment"># systemctl restart ntpd</span></span><br></pre></td></tr></table></figure><h3 id="3-4-查看ntp服务器信息"><a href="#3-4-查看ntp服务器信息" class="headerlink" title="3.4 查看ntp服务器信息"></a>3.4 查看ntp服务器信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web-01 zabbix]<span class="comment"># ntpq -p</span></span><br><span class="line">     remote           refid      st t when poll reach   delay   offset  jitter</span><br><span class="line">==============================================================================</span><br><span class="line"> 172.16.1.61     120.25.115.20    3 u   30   64    1    0.512  -42.740   0.000</span><br><span class="line"> localhost       .INIT.          16 l    -   64    0    0.000    0.000   0.000</span><br></pre></td></tr></table></figure><p> &nbsp;</p><h2 id="四、验证-NTP-服务"><a href="#四、验证-NTP-服务" class="headerlink" title="四、验证 NTP 服务"></a>四、验证 NTP 服务</h2><h3 id="4-1-查看-ntp-服务端时间"><a href="#4-1-查看-ntp-服务端时间" class="headerlink" title="4.1 查看 ntp 服务端时间"></a>4.1 查看 ntp 服务端时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@m-01 ~]<span class="comment"># date</span></span><br><span class="line">Sun Mar 29 00:10:52 CST 2020</span><br></pre></td></tr></table></figure><h3 id="4-2-修改客户端时间"><a href="#4-2-修改客户端时间" class="headerlink" title="4.2 修改客户端时间"></a>4.2 修改客户端时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web-01 ~]<span class="comment"># date -s 2020-01-01</span></span><br><span class="line">Wed Jan  1 00:00:00 CST 2020</span><br><span class="line">[root@web-01 ~]<span class="comment"># date</span></span><br><span class="line">Wed Jan  1 00:00:03 CST 2020</span><br></pre></td></tr></table></figure><h3 id="4-3-同步服务端时间"><a href="#4-3-同步服务端时间" class="headerlink" title="4.3 同步服务端时间"></a>4.3 同步服务端时间</h3><p>实际上，等待一段时间后客户端时间会自动同步服务端时间，这里用手动同步验证下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web-02 ~]<span class="comment"># ntpdate -u 172.16.1.61</span></span><br><span class="line">29 Mar 00:12:14 ntpdate[19563]: adjust time server 172.16.1.61 offset 0.008159 sec</span><br><span class="line">[root@web-01 ~]<span class="comment"># date</span></span><br><span class="line">Sun Mar 29 00:12:22 CST 2020</span><br></pre></td></tr></table></figure><h3 id="4-4-配置定时任务同步时间"><a href="#4-4-配置定时任务同步时间" class="headerlink" title="4.4 配置定时任务同步时间"></a>4.4 配置定时任务同步时间</h3><p>如果觉得自动同步时间间隔比较久，可以设定个定时任务，使用 ntpdate 命令来同步服务端时间</p><p>这里以每分钟同步为例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@m-01 ~]<span class="comment"># crontab -e </span></span><br><span class="line">* * * * * /usr/sbin/ntpdate -u 172.16.1.61 &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure><p> 至此，ntp时间同步服务器搭建完成</p>]]></content>
      
      
      <categories>
          
          <category> NTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NTP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
