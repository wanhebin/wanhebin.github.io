<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>K8S 中使用 Prometheus 监控 JVM</title>
      <link href="posts/k8s-prometheus-monitor-jvm/"/>
      <url>posts/k8s-prometheus-monitor-jvm/</url>
      
        <content type="html"><![CDATA[<h2 id="操作场景"><a href="#操作场景" class="headerlink" title="操作场景"></a>操作场景</h2><p>Prometheus 社区开发了 JMX Exporter 用于导出 JVM 的监控指标，以便使用 Prometheus 来采集监控数据。当您的 Java 业务容器化至 Kubernetes 后，可通过本文了解如何使用 Prometheus 与 JMX Exporter 来监控 Java 应用。</p><p>&nbsp;</p><h2 id="JMX-Exporter-简介"><a href="#JMX-Exporter-简介" class="headerlink" title="JMX Exporter 简介"></a>JMX Exporter 简介</h2><p>Java Management Extensions，JMX 是管理 Java 的一种扩展框架，JMX Exporter 基于此框架读取 JVM 的运行时状态。JMX Exporter 利用 Java 的 JMX 机制来读取 JVM 运行时的监控数据，然后将其转换为 Prometheus 可辨识的 metrics 格式，以便让 Prometheus 对其进行监控采集。</p><p>JMX Exporter 提供<strong>启动独立进程</strong>及 <strong>JVM 进程内启动（in-process）</strong>两种方式暴露 JVM 监控指标：</p><ol><li><strong>启动独立进程</strong><br>JVM 启动时指定参数，暴露 JMX 的 RMI 接口。JMX Exporter 调用 RMI 获取 JVM 运行时状态数据，转换为 Prometheus metrics 格式，并暴露端口让 Prometheus 采集。</li><li><strong>JVM 进程内启动（in-process）</strong><br>JVM 启动时指定参数，通过 javaagent 的形式运行 JMX Exporter 的 jar 包，进程内读取 JVM 运行时状态数据，转换为 Prometheus metrics 格式，并暴露端口让 Prometheus 采集。</li></ol><blockquote><p>说明：</p><p>官方不建议使用<strong>启动独立进程</strong>方式，该方式配置复杂且需单独的进程，进程本身的监控又引发了新的问题。本文以 <strong>JVM 进程内启动（in-process）</strong>方式为例，在 Kubernetes 环境下使用 JMX Exporter 暴露 JVM 监控指标。</p></blockquote><p>&nbsp;</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="使用-JMX-Exporter-暴露-JVM-监控指标"><a href="#使用-JMX-Exporter-暴露-JVM-监控指标" class="headerlink" title="使用 JMX Exporter 暴露 JVM 监控指标"></a>使用 JMX Exporter 暴露 JVM 监控指标</h3><p>使用 JVM 进程内启动（in-process）方式，启动 JVM 需指定 JMX Exporter 的 jar 包文件和配置文件。jar 包为二进制文件，不便通过 <code>ConfigMap</code> 挂载，建议直接将 JMX Exporter 的 jar 包和配置文件都打包到业务容器镜像中。</p><p>这里为了方便演示，jar 包就简单用 <code>hostPath</code> 的方式直接挂载进容器里，配置文件使用 <code>ConfigMap</code> 的形式挂载到容器里。</p><h4 id="准备jar包和配置文件"><a href="#准备jar包和配置文件" class="headerlink" title="准备jar包和配置文件"></a>准备jar包和配置文件</h4><ol><li><p>准备 jar 包文件，可前往 <a href="https://github.com/prometheus/jmx_exporter">jmx_exporter</a> 的 Github 页面获取最新的 jar 包下载地址。执行以下命令，下载到挂载指定的 <code>hostPath</code> 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/prometheus/jmx_exporter</span><br><span class="line">$ wget -O /data/prometheus/jmx_exporter/jmx_prometheus_javaagent-0.15.0.jar https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.15.0/jmx_prometheus_javaagent-0.15.0.jar</span><br></pre></td></tr></table></figure></li><li><p>编写 JMX Exporter 配置文件 <code>prometheus-jmx-config.yaml</code> 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">prometheus-jmx-config.yaml:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    lowercaseOutputLabelNames: true</span></span><br><span class="line"><span class="string">    lowercaseOutputName: true</span></span><br><span class="line"><span class="string">    whitelistObjectNames: [&quot;java.lang:type=OperatingSystem&quot;]</span></span><br><span class="line"><span class="string">    blacklistObjectNames: []</span></span><br><span class="line"><span class="string">    rules:</span></span><br><span class="line"><span class="string">      - pattern: &#x27;java.lang&lt;type=OperatingSystem&gt;&lt;&gt;(committed_virtual_memory|free_physical_memory|free_swap_space|total_physical_memory|total_swap_space)_size:&#x27;</span></span><br><span class="line"><span class="string">        name: os_$1_bytes</span></span><br><span class="line"><span class="string">        labels: &#123;&#125;</span></span><br><span class="line"><span class="string">        type: GAUGE</span></span><br><span class="line"><span class="string">        attrNameSnakeCase: true</span></span><br><span class="line"><span class="string">      - pattern: &#x27;java.lang&lt;type=OperatingSystem&gt;&lt;&gt;((?!process_cpu_time)\w+):&#x27;</span></span><br><span class="line"><span class="string">        name: os_$1</span></span><br><span class="line"><span class="string">        labels: &#123;&#125;</span></span><br><span class="line"><span class="string">        type: GAUGE</span></span><br><span class="line"><span class="string">        attrNameSnakeCase: true</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>更多配置项请参考 <a href="https://prometheus.io/docs/introduction/overview/">Prometheus</a> 官方文档。</p></blockquote></li></ol><h4 id="部署-Java-应用"><a href="#部署-Java-应用" class="headerlink" title="部署 Java 应用"></a>部署 Java 应用</h4><p>部署应用至 Kubernetes 时，需修改 JVM 启动参数以便启动时加载 JMX Exporter。JVM 启动时会读取 <code>JAVA_OPTS</code> 环境变量，作为额外的启动参数，部署时可为应用增加该环境变量。</p><ul><li>启动参数格式： <code>-javaagent:&lt;jar&gt;=&lt;port&gt;:&lt;config&gt;</code></li><li>该示例使用8088端口暴露 JVM 的监控指标，您可按需自行更改。</li></ul><p>下面以Tomcat为示例：</p><ol><li><p>编写tomcat的<code>Deployment</code>文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">tomcat:jdk8-openjdk-slim</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JAVA_OPTS</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;-javaagent:/jmx_prometheus_javaagent-0.15.0.jar=8088:/jmx/prometheus-jmx-config.yaml&quot;</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">300m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">512Mi</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">1024Mi</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/jmx_prometheus_javaagent-0.15.0.jar&quot;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">jmx-prometheus-javaagent</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">&quot;/jmx&quot;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jmx-prometheus-javaagent</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/data/prometheus/jmx_exporter/jmx_prometheus_javaagent-0.15.0.jar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">configMap:</span> </span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">prometheus-jmx-config</span></span><br></pre></td></tr></table></figure></li><li><p>编写tomcat的 <code>Service</code> 文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">prometheus.io/port:</span> <span class="string">&quot;8088&quot;</span></span><br><span class="line">    <span class="attr">prometheus.io/jvm:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jmx-metrics</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><p>在 Service 中添加的 <code>annotations</code> 字段，作用是为了在 Promethues 配置文件的 <code>RawJobs</code> 中对标签做一些重新标记配置等。</p></blockquote></li></ol><p>&nbsp;</p><h3 id="添加-Prometheus-监控配置"><a href="#添加-Prometheus-监控配置" class="headerlink" title="添加 Prometheus 监控配置"></a>添加 Prometheus 监控配置</h3><p>配置 Prometheus，使监控数据可被采集。示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">jvm</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">  <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">  <span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_annotation_prometheus_io_jvm</span>]</span><br><span class="line">    <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__address__</span>, <span class="string">__meta_kubernetes_service_annotation_prometheus_io_port</span>]</span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1:$2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__meta_kubernetes_service_name</span>]</span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">application</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">__meta_kubernetes_service_label_(.+)</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="添加-Grafana-监控面板"><a href="#添加-Grafana-监控面板" class="headerlink" title="添加 Grafana 监控面板"></a>添加 Grafana 监控面板</h3><p>采集数据后可进行数据展示。若熟悉 Prometheus 和 Grafana，则可自行根据指标设计所需面板。您也可直接使用社区提供面板，例如 <a href="https://grafana.com/grafana/dashboards/8563">JVM dashboard</a>。可直接导入使用。</p><p>不过上面这个Dashboard，有一些地方使用起来不太友好，所以在其基础上进行了一些修改。</p><p><a href="https://download.wanhebin.com/package/grafana/dashboard/Grafana-Dashboard-JVM-Prometheus_Jmx_Exporter.json">模板下载链接</a>，下载后直接把文件的json内容复制导入Grafana，面板效果图如下：</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/22/e7a76427de828.png" alt="prometheus-grafana-jmx_exporter.png"></p><blockquote><p><strong>注意</strong>：</p><p>由于这个Dashboard是根据 Promethues 中 RawJobs 定制的，若要使用这个Dashboard，Prometheus 中的 RawJobs 规则需要与文中一致，建议不要修改。否则可能会出现某些功能不生效的情况。（当然，如果你熟悉Promethues，也可以根据自己需求进行调整）</p></blockquote><p>&nbsp;</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/prometheus/jmx_exporter">JMX Exporter 项目地址</a></li><li><a href="https://grafana.com/grafana/dashboards/8563">JVM 监控面板</a></li><li><a href="https://cloud.tencent.com/document/product/457/48724">使用 Prometheus 监控 Java 应用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 定制 OpenSSL  RPM包</title>
      <link href="posts/centos7-custom-openssl-rpm-package/"/>
      <url>posts/centos7-custom-openssl-rpm-package/</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h4 id="1-1-安装RPM打包、测试必备开发工具"><a href="#1-1-安装RPM打包、测试必备开发工具" class="headerlink" title="1.1 安装RPM打包、测试必备开发工具"></a>1.1 安装RPM打包、测试必备开发工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y rpm-build rpmlint rpmdevtools</span><br></pre></td></tr></table></figure><h4 id="1-2-安装打包、编译所需的依赖软件"><a href="#1-2-安装打包、编译所需的依赖软件" class="headerlink" title="1.2 安装打包、编译所需的依赖软件"></a>1.2 安装打包、编译所需的依赖软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y gcc gcc-c++ make perl perl-WWW-Curl</span><br></pre></td></tr></table></figure><h2 id="二、制作-OpenSSL-的-RPM-包"><a href="#二、制作-OpenSSL-的-RPM-包" class="headerlink" title="二、制作 OpenSSL 的 RPM 包"></a>二、制作 OpenSSL 的 RPM 包</h2><blockquote><p><strong>注意：</strong></p><p>切记！不要使用 <code>root</code> 用户来执行打包操作。因为这十分危险，所有二进制文件都会在打包前安装至系统中，因此您应该以普通用户身份打包，以防止系统被破坏。</p></blockquote><h4 id="2-1-配置-rpmbuild-工作目录"><a href="#2-1-配置-rpmbuild-工作目录" class="headerlink" title="2.1 配置 rpmbuild 工作目录"></a>2.1 配置 rpmbuild 工作目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/rpmbuild/&#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS&#125;</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;%_topdir %&#123;getenv:HOME&#125;/rpmbuild&quot;</span> &gt; ~/.rpmmacros</span><br></pre></td></tr></table></figure><h4 id="2-2-下载源码包到-rpmbuild-SOURCES-目录"><a href="#2-2-下载源码包到-rpmbuild-SOURCES-目录" class="headerlink" title="2.2 下载源码包到 ~/rpmbuild/SOURCES 目录"></a>2.2 下载源码包到 <code>~/rpmbuild/SOURCES</code> 目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O ~/rpmbuild/SOURCES/openssl-1.1.1k.tar.gz https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1k.tar.gz</span><br></pre></td></tr></table></figure><h4 id="2-3-编写-openssl-1-1-1k-软件库包的spec文件"><a href="#2-3-编写-openssl-1-1-1k-软件库包的spec文件" class="headerlink" title="2.3 编写 openssl 1.1.1k 软件库包的spec文件"></a>2.3 编写 <code>openssl 1.1.1k</code> 软件库包的spec文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/rpmbuild/SPECS/openssl.spec</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Name:openssl</span><br><span class="line">Version:1.1.1k</span><br><span class="line">Release:1%&#123;?dist&#125;</span><br><span class="line">Summary:Utilities from the general purpose cryptography library with TLS implementation</span><br><span class="line">Group:System Environment/Libraries</span><br><span class="line">License:GPLv2+</span><br><span class="line">URL:https://www.openssl.org/</span><br><span class="line">Source0:https://www.openssl.org/<span class="built_in">source</span>/%&#123;name&#125;-%&#123;version&#125;.tar.gz</span><br><span class="line">BuildRequires:make gcc perl perl-WWW-Curl</span><br><span class="line">Requires:%&#123;name&#125; = %&#123;version&#125;-%&#123;release&#125;</span><br><span class="line">BuildRoot:%_topdir/BUILDROOT</span><br><span class="line"></span><br><span class="line">%global openssldir /usr/openssl</span><br><span class="line"></span><br><span class="line">%description</span><br><span class="line">The OpenSSL toolkit provides support <span class="keyword">for</span> secure communications between</span><br><span class="line">machines. OpenSSL includes a certificate management tool and shared</span><br><span class="line">libraries <span class="built_in">which</span> provide various cryptographic algorithms and</span><br><span class="line">protocols.</span><br><span class="line"></span><br><span class="line">%prep</span><br><span class="line">%setup -q</span><br><span class="line"></span><br><span class="line">%build</span><br><span class="line">./config --prefix=%&#123;openssldir&#125; --openssldir=%&#123;openssldir&#125;</span><br><span class="line">make %&#123;?_smp_mflags&#125;</span><br><span class="line"></span><br><span class="line">%install</span><br><span class="line">[ <span class="string">&quot;%&#123;buildroot&#125;&quot;</span> != <span class="string">&quot;/&quot;</span> ] &amp;&amp; %&#123;__rm&#125; -rf %&#123;buildroot&#125;</span><br><span class="line">%make_install</span><br><span class="line">mkdir -p %&#123;buildroot&#125;%&#123;_bindir&#125;</span><br><span class="line">mkdir -p %&#123;buildroot&#125;%&#123;_libdir&#125;</span><br><span class="line">ln -sf %&#123;openssldir&#125;/lib/libssl.so.1.1 %&#123;buildroot&#125;%&#123;_libdir&#125;</span><br><span class="line">ln -sf %&#123;openssldir&#125;/lib/libcrypto.so.1.1 %&#123;buildroot&#125;%&#123;_libdir&#125;</span><br><span class="line">ln -sf %&#123;openssldir&#125;/bin/openssl %&#123;buildroot&#125;%&#123;_bindir&#125;</span><br><span class="line"></span><br><span class="line">%clean</span><br><span class="line">[ <span class="string">&quot;%&#123;buildroot&#125;&quot;</span> != <span class="string">&quot;/&quot;</span> ] &amp;&amp; %&#123;__rm&#125; -rf %&#123;buildroot&#125;</span><br><span class="line"></span><br><span class="line">%files</span><br><span class="line">%&#123;openssldir&#125;</span><br><span class="line">%defattr(-,root,root)</span><br><span class="line">%&#123;_bindir&#125;/openssl</span><br><span class="line">%&#123;_libdir&#125;/libcrypto.so.1.1</span><br><span class="line">%&#123;_libdir&#125;/libssl.so.1.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%post -p /sbin/ldconfig</span><br><span class="line"></span><br><span class="line">%postun -p /sbin/ldconfig</span><br><span class="line"></span><br><span class="line">%changelog</span><br><span class="line">* Sat May 08 2021 Hebin Wan &lt;wanhebin@outlook.com&gt; - 1.1.1k</span><br><span class="line">- Rebuilt <span class="keyword">for</span> https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1k.tar.gz </span><br></pre></td></tr></table></figure><h4 id="2-4-使用-rpmlint-测试"><a href="#2-4-使用-rpmlint-测试" class="headerlink" title="2.4 使用 rpmlint 测试"></a>2.4 使用 rpmlint 测试</h4><p>为避免常见错误，请先使用 <code>rpmlint</code> 查找 SPEC 文件的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rpmlint ~/rpmbuild/SPECS/openssl.spec</span><br><span class="line">0 packages and 1 specfiles checked; 0 errors, 0 warnings.</span><br></pre></td></tr></table></figure><p>如果返回错误/警告，使用 “<code>-i</code>“ 选项查看更详细的信息。</p><h4 id="2-5-从-SPEC-构建-RPM-包"><a href="#2-5-从-SPEC-构建-RPM-包" class="headerlink" title="2.5 从 SPEC 构建 RPM 包"></a>2.5 从 SPEC 构建 RPM 包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpmbuild -D <span class="string">&quot;version 1.1.1k&quot;</span> -ba ~/rpmbuild/SPECS/openssl.spec</span><br></pre></td></tr></table></figure><blockquote><p>-ba    构建源代码rpm包和二进制rpm包</p><p>-bb    只构建二进制rpm包</p><p>-bs    只构建源代码rpm包</p><p>-bp    执行至％prep阶段（解压源并应用补丁）</p><p>-bc    执行至％build阶段（％prep，然后编译）</p><p>-bi    执行至％install阶段（％prep，％build，然后安装）</p><p>-bl    验证％files部分，查看文件是否存在</p></blockquote><ul><li>构建完成后，有类似下面的返回内容时，说明 RPM 包构建成功了</li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/08/fa86f7ff0af42.png" alt="rpmbuild_openssl-1.png"></p><ul><li>查看构建成功的 RPM 包</li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/08/bab7e202e600d.png" alt="rpmbuild_openssl-2.png"></p><p>在RPMS文件夹下生成了 <code>RPM</code> 包，在 <code>x86_64</code> 下，表示所应用的架构，由于没有指定arch为 <code>noarch</code> ，所以默认用本机架构。在SRPMS文件夹下生成了源码 <code>RPM</code> 包。</p><h4 id="2-6-使用-rpmlint-测试已构建的-RPM-包"><a href="#2-6-使用-rpmlint-测试已构建的-RPM-包" class="headerlink" title="2.6 使用 rpmlint 测试已构建的 RPM 包"></a>2.6 使用 rpmlint 测试已构建的 RPM 包</h4><p><code>rpmlint</code> 用于检查 SPEC/RPM/SRPM 是否存在错误。你需要在发布软件包之前，解决这些警告。<a href="https://fedoraproject.org/wiki/Common_Rpmlint_issues">此页面</a> 提供一些常见问题的解释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpmlint ~/rpmbuild/SPECS/openssl.spec ~/rpmbuild/RPMS/x86_64/openssl-1.1.1k-1.el7.x86_64.rpm ~/rpmbuild/SRPMS/openssl-1.1.1k-1.el7.src.rpm</span><br></pre></td></tr></table></figure><p>一般情况下，检测到的都是一些WARN信息，不影响软件使用，可以忽略。如果有ERROR信息，或许也不影响使用，但建议按照提示进行调整、修复。</p><h2 id="三、安装升级-OpenSSL"><a href="#三、安装升级-OpenSSL" class="headerlink" title="三、安装升级 OpenSSL"></a>三、安装升级 OpenSSL</h2><p>一般情况下，系统都已经有openssl了，所以我们直接升级即可。</p><blockquote><p><strong>注意：</strong></p><p>切记！在做openssl升级时，请先从测试机中操作，升级后，确定没有任何问题时，在根据线上环境陆续升级。</p></blockquote><h4 id="3-1-检查系统当前OpenSSL版本"><a href="#3-1-检查系统当前OpenSSL版本" class="headerlink" title="3.1 检查系统当前OpenSSL版本"></a>3.1 检查系统当前OpenSSL版本</h4><p>查看当前系统中openssl的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><p>卸载openssl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -e openssl --nodeps</span><br></pre></td></tr></table></figure><h4 id="3-2-升级OpenSSL版本"><a href="#3-2-升级OpenSSL版本" class="headerlink" title="3.2 升级OpenSSL版本"></a>3.2 升级OpenSSL版本</h4><p>安装我们刚刚打包好的openssl 1.1.1k版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh ~/rpmbuild/RPMS/x86_64/openssl-1.1.1k-2.el7.x86_64.rpm --nodeps</span><br><span class="line">Preparing...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line">   1:openssl-1.1.1k-2.el7             <span class="comment">################################# [100%]</span></span><br></pre></td></tr></table></figure><p>再次查看系统中openssl版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.1.1k  25 Mar 2021</span><br></pre></td></tr></table></figure><p>很幸运，成功升级！</p><p>但是否对系统环境、其他软件功能有影响，这个就需要我们进一步测试，笔者这里就省略了。</p><p><strong>参考文献</strong></p><ul><li><a href="https://fedoraproject.org/wiki/How_to_create_an_RPM_package/zh-cn">How to create an RPM package</a></li><li><a href="https://fedoraproject.org/wiki/How_to_create_a_GNU_Hello_RPM_package/zh-cn">How to create a GNU Hello RPM package</a></li><li><a href="https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/Packagers_Guide/chap-Packagers_Guide-Spec_File_Reference-Preamble.html">Spec File Preamble</a></li><li><a href="https://fedoraproject.org/wiki/Common_Rpmlint_issues">Common Rpmlint issues</a></li><li><a href="https://blog.csdn.net/get_set/article/details/53453320">RPM打包原理、示例、详解及备查</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> OpenSSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenSSL </tag>
            
            <tag> RPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB副本集把SECONDARY提升为PRIMARY</title>
      <link href="posts/mongodb-replica-set-promotes-secondary-to-primary/"/>
      <url>posts/mongodb-replica-set-promotes-secondary-to-primary/</url>
      
        <content type="html"><![CDATA[<h2 id="事故背景"><a href="#事故背景" class="headerlink" title="事故背景"></a>事故背景</h2><p>​        线上环境有一个MongoDB副本集，由于是部署在客户那边本地机房，客户误操作把部署副本集的另外2个节点的 VM 给删除了（并且VM已经无法恢复了）。所幸的是还有一个节点存活，登录节点后发现这个节点是 SECONDARY，所以可能会有一部分数据丢失，而且此时已经无法对应用提供读写服务。此时只能停服维护，并对集群进行恢复。</p><p>​        基于以上问题，下面对副本集恢复操作步鄹进行了记录。</p><h2 id="处理思路"><a href="#处理思路" class="headerlink" title="处理思路"></a>处理思路</h2><ol><li>对mongodb数据进行备份（防止恢复集群时出现意外导致数据丢失）。</li><li>把仅存的 SECONDARY 节点提升为 PRIMARY，删除集群中另外2个不存活的节点，然后重新配置MongoDB副本集。</li><li>新部署2个MongoDB节点，并加入到集群中。</li><li>等待 PRIMARY 节点数据同步到另外2个新节点后，进行数据验证，结束生产环境维护。</li></ol><blockquote><p><strong>注意：</strong></p><p>由于原先的集群中只存有 SECONDARY 节点，PRIMARY 节点已经丢失，所以存在部署数据没同步到 SECONDARY 的可能。但由于PRIMARY节点的VM已经被删，这部分未同步的数据的丢失在所难免，想恢复这部分数据只能根据自己的业务、代码逻辑设定才有补上丢失的数据的可能性。</p></blockquote><h2 id="集群恢复"><a href="#集群恢复" class="headerlink" title="集群恢复"></a>集群恢复</h2><h3 id="1、在SECONDARY节点删除挂掉的primary节点"><a href="#1、在SECONDARY节点删除挂掉的primary节点" class="headerlink" title="1、在SECONDARY节点删除挂掉的primary节点"></a>1、在SECONDARY节点删除挂掉的primary节点</h3><h4 id="1-1-查看当前副本集配置"><a href="#1-1-查看当前副本集配置" class="headerlink" title="1.1 查看当前副本集配置"></a>1.1 查看当前副本集配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs1:SECONDARY&gt; rs.conf()</span><br></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">rs1:SECONDARY&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">rs1:SECONDARY&gt; rs_conf = rs.<span class="function"><span class="title">config</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : <span class="string">&quot;rs1&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span> : 7,</span><br><span class="line"><span class="string">&quot;protocolVersion&quot;</span> : NumberLong(1),</span><br><span class="line"><span class="string">&quot;members&quot;</span> : [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 0,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.213:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 2,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.214:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;settings&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;chainingAllowed&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;heartbeatIntervalMillis&quot;</span> : 2000,</span><br><span class="line"><span class="string">&quot;heartbeatTimeoutSecs&quot;</span> : 10,</span><br><span class="line"><span class="string">&quot;electionTimeoutMillis&quot;</span> : 10000,</span><br><span class="line"><span class="string">&quot;catchUpTimeoutMillis&quot;</span> : -1,</span><br><span class="line"><span class="string">&quot;catchUpTakeoverDelayMillis&quot;</span> : 30000,</span><br><span class="line"><span class="string">&quot;getLastErrorModes&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;getLastErrorDefaults&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;w&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;wtimeout&quot;</span> : 0</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;replicaSetId&quot;</span> : ObjectId(<span class="string">&quot;5f5094994a4d5004eae73e2f&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-删除集群成员"><a href="#1-2-删除集群成员" class="headerlink" title="1.2 删除集群成员"></a>1.2 删除集群成员</h4><ul><li><strong>比如要删除members中 host 为 <code>192.168.30.213:27017</code> 的成员，通过<code>rs.conf()</code>找到成员的 <code>_id</code></strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.213:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><strong>删除 <code>_id</code> 为1的成员</strong></li></ul><blockquote><p>splice的第一个参数表示要删除的数组元素的下标</p><p>0 表示集群中成员节点的 <code>&quot;_id&quot;</code> </p><p>1 表示删除的个数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs1:SECONDARY&gt; rs_conf = rs.conf()</span><br><span class="line">rs1:SECONDARY&gt; rs_conf.members.splice(0,1)</span><br></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rs1:SECONDARY&gt; rs_conf.members.splice(1,1)</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.213:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>依照此方法删除副本集中不存活的节点。</p><blockquote><p><strong>注意：</strong></p><p>有一点需要注意，由于已经删除了 <code>_id</code> 为1的成员，所以后面的成员的 <code>_id</code> 号都会减小1，与数组中元素的下标相同。</p></blockquote><h3 id="2、重新配置MongoDB副本集"><a href="#2、重新配置MongoDB副本集" class="headerlink" title="2、重新配置MongoDB副本集"></a>2、重新配置MongoDB副本集</h3><h4 id="2-1-重置集群配置"><a href="#2-1-重置集群配置" class="headerlink" title="2.1 重置集群配置"></a>2.1 重置集群配置</h4><p><code>rs_conf</code> 就是上面修改后的配置，加force参数是因为 SECONDARY 默认没有执行此命令的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs1:SECONDARY&gt; rs.reconfig(rs_conf, &#123;<span class="string">&quot;force&quot;</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><p>返回内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rs1:SECONDARY&gt; rs.reconfig(rs_conf, &#123;<span class="string">&quot;force&quot;</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619586716, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619588924, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rs1:PRIMARY&gt; </span><br></pre></td></tr></table></figure><h4 id="2-2-查看集群状态"><a href="#2-2-查看集群状态" class="headerlink" title="2.2 查看集群状态"></a>2.2 查看集群状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.status()</span><br></pre></td></tr></table></figure><p>返回内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;set&quot;</span> : <span class="string">&quot;rs1&quot;</span>,</span><br><span class="line"><span class="string">&quot;date&quot;</span> : ISODate(<span class="string">&quot;2021-04-28T05:51:03.672Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;myState&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;term&quot;</span> : NumberLong(17),</span><br><span class="line"><span class="string">&quot;syncingTo&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;syncSourceHost&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;syncSourceId&quot;</span> : -1,</span><br><span class="line"><span class="string">&quot;heartbeatIntervalMillis&quot;</span> : NumberLong(2000),</span><br><span class="line"><span class="string">&quot;optimes&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;lastCommittedOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(17)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;readConcernMajorityOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(17)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;appliedOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(17)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;durableOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(17)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;members&quot;</span> : [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 0,</span><br><span class="line"><span class="string">&quot;name&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;health&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;state&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line"><span class="string">&quot;uptime&quot;</span> : 7482,</span><br><span class="line"><span class="string">&quot;optime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(17)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDate&quot;</span> : ISODate(<span class="string">&quot;2021-04-28T05:50:55Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;syncingTo&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;syncSourceHost&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;syncSourceId&quot;</span> : -1,</span><br><span class="line"><span class="string">&quot;infoMessage&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;electionTime&quot;</span> : Timestamp(1619588924, 1),</span><br><span class="line"><span class="string">&quot;electionDate&quot;</span> : ISODate(<span class="string">&quot;2021-04-28T05:48:44Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;configVersion&quot;</span> : 124340,</span><br><span class="line"><span class="string">&quot;self&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;lastHeartbeatMessage&quot;</span> : <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619589055, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时发现，这个 SECONDARY 节点已经提升为 PRIMARY，并且集群状态中，也就只有我们当前一个节点。</p><p>接下来就可以向副本集中添加新的MongoDB节点了。</p><h3 id="3、添加新的MongoDB节点"><a href="#3、添加新的MongoDB节点" class="headerlink" title="3、添加新的MongoDB节点"></a>3、添加新的MongoDB节点</h3><p>这里省略新节点的部署过程，具体可以参考[《MongoDB 单节点升级为副本集高可用集群》](<a href="https://www.wanhebin.com/database/mongodb/1005.html">MongoDB 单节点升级为副本集高可用集群 - HEBIN博客 (wanhebin.com)</a>)文章中MongoDB节点部署的步鄹。</p><blockquote><p><strong>注意：</strong></p><p>向mongodb副本集添加实例后，PRIMARY节点数据能够自动同步到新添加的SECONDARY节点，无需人工干预。</p></blockquote><h4 id="3-1-增加实例"><a href="#3-1-增加实例" class="headerlink" title="3.1 增加实例"></a>3.1 增加实例</h4><p>登录PRIMARY节点，添加MongoDB实例。</p><p>新添加的实例优先级权重默认为1，如需调整，建议等数据同步完成后进行权重更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; use admin</span><br><span class="line">rs1:PRIMARY&gt; rs.add(<span class="string">&#x27;192.168.30.213:27017&#x27;</span>)</span><br><span class="line">rs1:PRIMARY&gt; rs.add(<span class="string">&#x27;192.168.30.214:27017&#x27;</span>)</span><br></pre></td></tr></table></figure><p>添加节点的返回结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.add(<span class="string">&#x27;192.168.30.213:27017&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619581966, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619581966, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rs1:PRIMARY&gt; rs.add(<span class="string">&#x27;192.168.30.214:27017&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619581975, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619581975, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-删除实例"><a href="#3-2-删除实例" class="headerlink" title="3.2 删除实例"></a>3.2 删除实例</h4><p>如果添加错节点时，可以通过 <code>rs.remove()</code> 来删除错误的节点（因为此时当前实例已经是 PRIMARY 了，所以不需要用 1.2 中方法剔除节点）。</p><p>从mongodb副本集中移除实例，不可移除primary</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; use admin</span><br><span class="line">rs1:PRIMARY&gt; rs.remove(<span class="string">&#x27;192.168.30.214:27017&#x27;</span>)</span><br></pre></td></tr></table></figure><p>返回内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.remove(<span class="string">&#x27;192.168.30.213:27017&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619581713, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619581713, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rs1:PRIMARY&gt; rs.remove(<span class="string">&#x27;192.168.30.214:27017&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619581777, 2),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619581777, 2),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>副本集经过添加删除后顺序会乱，可以根据需要设置权重来调整。</p></blockquote><h3 id="4、调整节点权重"><a href="#4、调整节点权重" class="headerlink" title="4、调整节点权重"></a>4、调整节点权重</h3><p>如果想在集群宕机恢复后，还想让某一节点始终保持为 PRIMARY，可以把此节点的权重设置成最大。</p><h4 id="4-1-设置权重"><a href="#4-1-设置权重" class="headerlink" title="4.1 设置权重"></a>4.1 设置权重</h4><p>找到对应节点在副本集中成员<code>_id</code>，进行权重设置。</p><p>这里以成员0为例，其host为<code>192.168.30.207:27017</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs_conf = rs.config()</span><br><span class="line">rs1:PRIMARY&gt; rs_conf.members[0].priority=10</span><br></pre></td></tr></table></figure><h4 id="4-2-生效配置"><a href="#4-2-生效配置" class="headerlink" title="4.2 生效配置"></a>4.2 生效配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.reconfig(rs_conf)</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.reconfig(rs_conf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1619591404, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1619591404, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-验证权重配置"><a href="#4-3-验证权重配置" class="headerlink" title="4.3 验证权重配置"></a>4.3 验证权重配置</h4><ul><li><strong>查询成员0的权重</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.config()</span><br></pre></td></tr></table></figure><p>返回内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 0,</span><br><span class="line"><span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;arbiterOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;buildIndexes&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hidden&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;priority&quot;</span> : 10,</span><br><span class="line"><span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;slaveDelay&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;votes&quot;</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>模拟宕机恢复后的集群状态</strong></li></ul><p>关闭三个节点的mongodb服务，再无序恢复，然后连接进节点<code>192.168.30.207:27017</code>，成员0依然还是PRIMARY。（为了必然偶然性，可以进行多次测试）</p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 安装 pdo_sqlsrv 扩展(CentOS7)</title>
      <link href="posts/php-install-pdo_sqlsrv-extension/"/>
      <url>posts/php-install-pdo_sqlsrv-extension/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装相关依赖"><a href="#一、安装相关依赖" class="headerlink" title="一、安装相关依赖"></a>一、安装相关依赖</h3><h4 id="1-1-安装微软源"><a href="#1-1-安装微软源" class="headerlink" title="1.1 安装微软源"></a>1.1 安装微软源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -o /tmp/prod.repo https://packages.microsoft.com/config/rhel/7/prod.repo</span><br></pre></td></tr></table></figure><h4 id="1-2-防止冲突先卸载原有版本-可选"><a href="#1-2-防止冲突先卸载原有版本-可选" class="headerlink" title="1.2 防止冲突先卸载原有版本(可选)"></a>1.2 防止冲突先卸载原有版本(可选)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove -y unixODBC </span><br></pre></td></tr></table></figure><h4 id="1-3-安装驱动（三个都要装上，缺一不可）"><a href="#1-3-安装驱动（三个都要装上，缺一不可）" class="headerlink" title="1.3 安装驱动（三个都要装上，缺一不可）"></a>1.3 安装驱动（三个都要装上，缺一不可）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y msodbcsql mssql-tools unixODBC-devel</span><br></pre></td></tr></table></figure><h3 id="二、编译pdo-sqlsrv插件"><a href="#二、编译pdo-sqlsrv插件" class="headerlink" title="二、编译pdo_sqlsrv插件"></a>二、编译pdo_sqlsrv插件</h3><h4 id="2-1-下载pdo-sqlsrv扩展包"><a href="#2-1-下载pdo-sqlsrv扩展包" class="headerlink" title="2.1 下载pdo_sqlsrv扩展包"></a>2.1 下载pdo_sqlsrv扩展包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://pecl.php.net/get/pdo_sqlsrv-5.9.0.tgz</span><br></pre></td></tr></table></figure><h4 id="2-2-解压编译"><a href="#2-2-解压编译" class="headerlink" title="2.2 解压编译"></a>2.2 解压编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar xf pdo_sqlsrv-5.9.0.tgz</span><br><span class="line">$ <span class="built_in">cd</span> pdo_sqlsrv-5.9.0</span><br></pre></td></tr></table></figure><h4 id="2-3-预编译"><a href="#2-3-预编译" class="headerlink" title="2.3 预编译"></a>2.3 预编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/bin/php-config</span><br></pre></td></tr></table></figure><h4 id="2-4-编译安装"><a href="#2-4-编译安装" class="headerlink" title="2.4 编译安装"></a>2.4 编译安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="三、添加pdo-sqlsrv扩展"><a href="#三、添加pdo-sqlsrv扩展" class="headerlink" title="三、添加pdo_sqlsrv扩展"></a>三、添加pdo_sqlsrv扩展</h3><p>本文是使用yum安装的php、php-fpm，相关配置文件路径可能与各路大神们的环境不太相同（根据自己环境找到相关配置文件）。</p><ul><li>在 <code>/etc/php.ini</code> 配置文件中添加 <code>pdo_sqlsrv.so</code> 扩展。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extension=pdo.so</span><br><span class="line">extension=pdo_sqlsrv.so</span><br></pre></td></tr></table></figure><blockquote><p><code>pdo_sqlsrv.so</code> 是sqlserver扩展，需要在 <code>pdo.so</code> 扩展之前加载，否则会出现如下报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP Warning:  PHP Startup: Unable to load dynamic library <span class="string">&#x27;/usr/lib64/php/modules/pdo_sqlsrv.so&#x27;</span> - /usr/lib64/php/modules/pdo_sqlsrv.so: undefined symbol: php_pdo_register_driver <span class="keyword">in</span> Unknown on line 0</span><br></pre></td></tr></table></figure></blockquote><ul><li>重启php-fpm服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart php-fpm</span><br></pre></td></tr></table></figure><h3 id="四、验证扩展是否正确安装"><a href="#四、验证扩展是否正确安装" class="headerlink" title="四、验证扩展是否正确安装"></a>四、验证扩展是否正确安装</h3><ul><li><strong>验证扩展是否成功安装</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php -m | grep pdo_sqlsrv</span><br></pre></td></tr></table></figure><p><img src="http://pic-cdn.wanhebin.com/2021/03/22/1399720dd2d6f.png" alt="php-pdo_sqlsrv-1.png"></p><p>这里可以看到 <code>pdo_sqlsrv</code>扩展已经添加到php中了。</p><p>但是又出现了<code>PHP Warning:  Module &#39;PDO&#39; already loaded in Unknown on line 0</code>的Warning信息。</p><p>经过排查，发现在 <code>/etc/php.d/pdo.ini</code> 配置文件中也引用了 <code>pdo.so</code> 扩展：</p><p><img src="http://pic-cdn.wanhebin.com/2021/03/22/f244dcafb7de3.png" alt="php-pdo_sqlsrv-2.png"></p><p>把 <code>/etc/php.d/pdo.ini</code> 中引用的 <code>pdo.so</code> 扩展注释，只保留 <code>/etc/php.ini</code> 中的此扩展即可。</p><p>注释后重启php-fpm，重新查看php扩展，此时Warning信息就没出现了。</p><p><img src="http://pic-cdn.wanhebin.com/2021/03/22/188c17265c17c.png" alt="php-pdo_sqlsrv-3.png"></p><ul><li><strong>在Web端查看PHP信息</strong></li></ul><p><img src="http://pic-cdn.wanhebin.com/2021/03/22/99aa5a234d62d.png" alt="php-pdo_sqlsrv-4.png"></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB单节点升级为副本集高可用集群</title>
      <link href="posts/MongoDB-single-node-upgraded-to-replica-set-cluster/"/>
      <url>posts/MongoDB-single-node-upgraded-to-replica-set-cluster/</url>
      
        <content type="html"><![CDATA[<h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><p>由于历史原因，我们有一个作数据同步的业务，生产环境中MongoDB使用的是单节点。但随着业务增长，考虑到这个同步业务的重要性，避免由于单节点故障造成业务停止，所以需要升级为副本集保证高可用。</p><h3 id="副本集架构"><a href="#副本集架构" class="headerlink" title="副本集架构"></a>副本集架构</h3><p>下面这架构图是这篇文章需要实现的MongoDB副本集高可用架构：</p><p><img src="http://pic-cdn.wanhebin.com/2021/01/20/7828ee3df93d9.png#pic_center" alt="MongoDB_ReplicaSetArchitecture-2.png"></p><h3 id="升级架构前注意事项"><a href="#升级架构前注意事项" class="headerlink" title="升级架构前注意事项"></a>升级架构前注意事项</h3><p>在生产环境中，做单节点升级到集群前，一定要先备份好mongodb的所有数据，避免操作失误导致数据丢失。</p><p>并且在保证在升级期间不会有程序连接到MongoDB进行读写操作，建议停服务升级，且在凌晨业务低峰期，进行操作。</p><h3 id="一、原单节点MongoDB配置信息"><a href="#一、原单节点MongoDB配置信息" class="headerlink" title="一、原单节点MongoDB配置信息"></a>一、原单节点MongoDB配置信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IP: 192.168.30.207</span><br><span class="line">Port: 27017</span><br></pre></td></tr></table></figure><h4 id="1-1-原配置文件"><a href="#1-1-原配置文件" class="headerlink" title="1.1 原配置文件"></a>1.1 原配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file   </span><br><span class="line">  logAppend: <span class="literal">true</span>  </span><br><span class="line">  path: /home/server/mongodb/logs/mongodb.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  dbPath: /home/server/mongodb/data</span><br><span class="line">  directoryPerDB: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">     engineConfig:</span><br><span class="line">        cacheSizeGB: 1</span><br><span class="line">        directoryForIndexes: <span class="literal">true</span></span><br><span class="line">     collectionConfig:</span><br><span class="line">        blockCompressor: zlib</span><br><span class="line">     indexConfig:</span><br><span class="line">        prefixCompression: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /home/server/mongodb/pid/mongod.pid</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1,192.168.30.207</span><br><span class="line">  maxIncomingConnections: 5000</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure><h4 id="1-2-在原来配置文件增加副本集配置"><a href="#1-2-在原来配置文件增加副本集配置" class="headerlink" title="1.2 在原来配置文件增加副本集配置"></a>1.2 在原来配置文件增加副本集配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">replication:</span><br><span class="line">  oplogSizeMB: 4096</span><br><span class="line">  replSetName: rs1</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里需要先把 <strong>认证</strong> 配置注释，副本集配置完成后再开启。</p></blockquote><h3 id="二、新增节点信息"><a href="#二、新增节点信息" class="headerlink" title="二、新增节点信息"></a>二、新增节点信息</h3><table><thead><tr><th>角色</th><th>IP</th><th>Port</th><th></th></tr></thead><tbody><tr><td>PRIMARY</td><td>192.168.30.207</td><td>27017</td><td>原单节点MongoDB</td></tr><tr><td>SECONDARY</td><td>192.168.30.213</td><td>27017</td><td>新增节点1</td></tr><tr><td>SECONDARY</td><td>192.168.30.214</td><td>27017</td><td>新增节点2</td></tr></tbody></table><h4 id="2-1-新增节点配置文件"><a href="#2-1-新增节点配置文件" class="headerlink" title="2.1 新增节点配置文件"></a>2.1 新增节点配置文件</h4><p>这两个SECONDARY节点配置文件，只需复制PRIMARY节点配置文件，并修改相应的 “<strong>bindIp</strong>“即可。</p><ul><li>SECONDARY 节点1配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file   </span><br><span class="line">  logAppend: <span class="literal">true</span>  </span><br><span class="line">  path: /home/server/mongodb/logs/mongodb.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  dbPath: /home/server/mongodb/data</span><br><span class="line">  directoryPerDB: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">     engineConfig:</span><br><span class="line">        cacheSizeGB: 1</span><br><span class="line">        directoryForIndexes: <span class="literal">true</span></span><br><span class="line">     collectionConfig:</span><br><span class="line">        blockCompressor: zlib</span><br><span class="line">     indexConfig:</span><br><span class="line">        prefixCompression: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /home/server/mongodb/pid/mongod.pid</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1,192.168.30.213</span><br><span class="line">  maxIncomingConnections: 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">#security:</span></span><br><span class="line">  <span class="comment">#authorization: enabled</span></span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  oplogSizeMB: 4096</span><br><span class="line">  replSetName: rs1</span><br></pre></td></tr></table></figure><ul><li>SECONDARY 节点2配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file   </span><br><span class="line">  logAppend: <span class="literal">true</span>  </span><br><span class="line">  path: /home/server/mongodb/logs/mongodb.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  dbPath: /home/server/mongodb/data</span><br><span class="line">  directoryPerDB: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">     engineConfig:</span><br><span class="line">        cacheSizeGB: 1</span><br><span class="line">        directoryForIndexes: <span class="literal">true</span></span><br><span class="line">     collectionConfig:</span><br><span class="line">        blockCompressor: zlib</span><br><span class="line">     indexConfig:</span><br><span class="line">        prefixCompression: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /home/server/mongodb/pid/mongod.pid</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1,192.168.30.214</span><br><span class="line">  maxIncomingConnections: 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">#security:</span></span><br><span class="line">  <span class="comment">#authorization: enabled</span></span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  oplogSizeMB: 4096</span><br><span class="line">  replSetName: rs1</span><br></pre></td></tr></table></figure><h4 id="2-2-启动3个节点"><a href="#2-2-启动3个节点" class="headerlink" title="2.2 启动3个节点"></a>2.2 启动3个节点</h4><p>PRIMARY节点需要重启，2个SECONDARY节点直接启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动命令</span></span><br><span class="line">$ mongo -f /home/server/mongodb/conf/mongo.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止命令</span></span><br><span class="line">$ mongo -f /home/server/mongodb/conf/mongo.conf --shutdown</span><br></pre></td></tr></table></figure><h3 id="三、初始化副本集"><a href="#三、初始化副本集" class="headerlink" title="三、初始化副本集"></a>三、初始化副本集</h3><p>使用mongo shell连接到其中一个节点，执行初始化命令</p><h4 id="3-1-初始化配置"><a href="#3-1-初始化配置" class="headerlink" title="3.1 初始化配置"></a>3.1 初始化配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;</span><br><span class="line">  _id : <span class="string">&quot;rs1&quot;</span>, </span><br><span class="line">  members : [</span><br><span class="line">    &#123;_id:0, host:<span class="string">&quot;192.168.30.207:27017&quot;</span>&#125;,</span><br><span class="line">    &#123;_id:1, host:<span class="string">&quot;192.168.30.213:27017&quot;</span>&#125;,</span><br><span class="line">    &#123;_id:2, host:<span class="string">&quot;192.168.30.214:27017&quot;</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://pic-cdn.wanhebin.com/2021/01/20/d5d7e835ab492.png#pic_center" alt="mongo_replica-1.png"></p><h4 id="3-2-对副本集进行初始化"><a href="#3-2-对副本集进行初始化" class="headerlink" title="3.2 对副本集进行初始化"></a>3.2 对副本集进行初始化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; rs.initiate(config)//初始化副本集</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,//返回ok：1成功，返回ok：0失败</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1611042829, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1611042829, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://pic-cdn.wanhebin.com/2021/01/20/587bb23f66a55.png#pic_center" alt="mongo_replica-2.png"></p><h4 id="3-3-查看副本集状态"><a href="#3-3-查看副本集状态" class="headerlink" title="3.3 查看副本集状态"></a>3.3 查看副本集状态</h4><ul><li>查看集群状态信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.<span class="function"><span class="title">status</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;set&quot;</span> : <span class="string">&quot;rs1&quot;</span>,</span><br><span class="line"><span class="string">&quot;date&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:53.063Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;myState&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;term&quot;</span> : NumberLong(2),</span><br><span class="line"><span class="string">&quot;heartbeatIntervalMillis&quot;</span> : NumberLong(2000),</span><br><span class="line"><span class="string">&quot;optimes&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;lastCommittedOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;readConcernMajorityOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;appliedOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;durableOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;members&quot;</span> : [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 0,</span><br><span class="line"><span class="string">&quot;name&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;health&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;state&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line"><span class="string">&quot;uptime&quot;</span> : 52343,</span><br><span class="line"><span class="string">&quot;optime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:45Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;electionTime&quot;</span> : Timestamp(1611055182, 1),</span><br><span class="line"><span class="string">&quot;electionDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-19T11:19:42Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;configVersion&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;self&quot;</span> : <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;name&quot;</span> : <span class="string">&quot;192.168.30.213:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;health&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;state&quot;</span> : 2,</span><br><span class="line"><span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;SECONDARY&quot;</span>,</span><br><span class="line"><span class="string">&quot;uptime&quot;</span> : 52334,</span><br><span class="line"><span class="string">&quot;optime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDurable&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:45Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;optimeDurableDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:45Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;lastHeartbeat&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:52.487Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;lastHeartbeatRecv&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:52.487Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;pingMs&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;syncingTo&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;configVersion&quot;</span> : 1</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : 2,</span><br><span class="line"><span class="string">&quot;name&quot;</span> : <span class="string">&quot;192.168.30.214:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;health&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;state&quot;</span> : 2,</span><br><span class="line"><span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;SECONDARY&quot;</span>,</span><br><span class="line"><span class="string">&quot;uptime&quot;</span> : 52328,</span><br><span class="line"><span class="string">&quot;optime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDurable&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;optimeDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:45Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;optimeDurableDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:45Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;lastHeartbeat&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:52.487Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;lastHeartbeatRecv&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T01:51:52.487Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;pingMs&quot;</span> : NumberLong(0),</span><br><span class="line"><span class="string">&quot;syncingTo&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;configVersion&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1611107505, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;9fl/3w/5Gwk4Qd7h3fkrQVQtPhM=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(<span class="string">&quot;6919423507650576385&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看延时从库信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.printSlaveReplicationInfo()</span><br><span class="line"><span class="built_in">source</span>: 192.168.30.213:27017</span><br><span class="line">syncedTo: Wed Jan 20 2021 09:52:05 GMT+0800 (CST)</span><br><span class="line">0 secs (0 hrs) behind the primary </span><br><span class="line"><span class="built_in">source</span>: 192.168.30.214:27017</span><br><span class="line">syncedTo: Wed Jan 20 2021 09:52:05 GMT+0800 (CST)</span><br><span class="line">0 secs (0 hrs) behind the primary</span><br></pre></td></tr></table></figure><ul><li>查看集群与主节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; rs.<span class="function"><span class="title">isMaster</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;hosts&quot;</span> : [</span><br><span class="line"><span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;192.168.30.213:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;192.168.30.214:27017&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;setName&quot;</span> : <span class="string">&quot;rs1&quot;</span>,</span><br><span class="line"><span class="string">&quot;setVersion&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;ismaster&quot;</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;secondary&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;primary&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;me&quot;</span> : <span class="string">&quot;192.168.30.207:27017&quot;</span>,</span><br><span class="line"><span class="string">&quot;electionId&quot;</span> : ObjectId(<span class="string">&quot;7fffffff0000000000000002&quot;</span>),</span><br><span class="line"><span class="string">&quot;lastWrite&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;opTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611108985, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;lastWriteDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T02:16:25Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;majorityOpTime&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1611108985, 1),</span><br><span class="line"><span class="string">&quot;t&quot;</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;majorityWriteDate&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T02:16:25Z&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;maxBsonObjectSize&quot;</span> : 16777216,</span><br><span class="line"><span class="string">&quot;maxMessageSizeBytes&quot;</span> : 48000000,</span><br><span class="line"><span class="string">&quot;maxWriteBatchSize&quot;</span> : 100000,</span><br><span class="line"><span class="string">&quot;localTime&quot;</span> : ISODate(<span class="string">&quot;2021-01-20T02:16:26.713Z&quot;</span>),</span><br><span class="line"><span class="string">&quot;logicalSessionTimeoutMinutes&quot;</span> : 30,</span><br><span class="line"><span class="string">&quot;minWireVersion&quot;</span> : 0,</span><br><span class="line"><span class="string">&quot;maxWireVersion&quot;</span> : 6,</span><br><span class="line"><span class="string">&quot;readOnly&quot;</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;ok&quot;</span> : 1,</span><br><span class="line"><span class="string">&quot;operationTime&quot;</span> : Timestamp(1611108985, 1),</span><br><span class="line"><span class="string">&quot;<span class="variable">$clusterTime</span>&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;clusterTime&quot;</span> : Timestamp(1611108985, 1),</span><br><span class="line"><span class="string">&quot;signature&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;hash&quot;</span> : BinData(0,<span class="string">&quot;/B6MSETtY8MEoZwXKABCkb1AMY8=&quot;</span>),</span><br><span class="line"><span class="string">&quot;keyId&quot;</span> : NumberLong(<span class="string">&quot;6919423507650576385&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、副本集开启认证"><a href="#四、副本集开启认证" class="headerlink" title="四、副本集开启认证"></a>四、副本集开启认证</h3><h4 id="4-1-通过主节点添加一个超级管理员账号"><a href="#4-1-通过主节点添加一个超级管理员账号" class="headerlink" title="4.1 通过主节点添加一个超级管理员账号"></a>4.1 通过主节点添加一个超级管理员账号</h4><blockquote><p><strong>注意</strong>：如果原先单节点mongo已经有了超级管理员账号，这可以忽略这个步鄹。</p></blockquote><p>只需在主节点添加用户，副本集会自动同步主节点上的数据。</p><p>需要注意的是，创建账号这一步需要在开启认证之前操作。</p><ul><li>创建超管账号</li></ul><p>超管用户：  mongouser        密码： 123456      认证库： admin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mongo --host 192.168.30.207 --port 27017</span><br><span class="line">rs1:PRIMARY&gt; use admin</span><br><span class="line">rs1:PRIMARY&gt; db.createUser(&#123;user: <span class="string">&quot;mongouser&quot;</span>,<span class="built_in">pwd</span>: <span class="string">&quot;123456&quot;</span>,roles:[ &#123; role: <span class="string">&quot;root&quot;</span>, db:<span class="string">&quot;admin&quot;</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure><ul><li>查看已创建的账号</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rs1:PRIMARY&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">rs1:PRIMARY&gt; db.getUsers()</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span> : <span class="string">&quot;admin.mongouser&quot;</span>,</span><br><span class="line"><span class="string">&quot;user&quot;</span> : <span class="string">&quot;mongouser&quot;</span>,</span><br><span class="line"><span class="string">&quot;db&quot;</span> : <span class="string">&quot;admin&quot;</span>,</span><br><span class="line"><span class="string">&quot;roles&quot;</span> : [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;role&quot;</span> : <span class="string">&quot;root&quot;</span>,</span><br><span class="line"><span class="string">&quot;db&quot;</span> : <span class="string">&quot;admin&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="4-2-创建副本集认证的key文件"><a href="#4-2-创建副本集认证的key文件" class="headerlink" title="4.2 创建副本集认证的key文件"></a>4.2 创建副本集认证的key文件</h4><blockquote><p>所有副本集节点都必须要用同一份keyfile，一般是在一台机器上生成，然后拷贝到其他机器上，且必须有读的权限，否则将来会报错。<br>一定要保证密钥文件一致，文件位置随便。但是为了方便查找，建议每台机器都放到一个固定的位置，都放到和配置文件一起的目录中。</p></blockquote><ul><li>生成<code>mongo.keyfile</code>文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rand -base64 90 -out /home/server/mongodb/conf/mongo.keyfile</span><br></pre></td></tr></table></figure><ul><li>拷贝<code>mongo.keyfile</code>文件到另外2个节点相同目录下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ scp /home/server/mongodb/conf/mongo.keyfile root@192.168.30.213:/home/server/mongodb/conf/</span><br><span class="line">$ scp /home/server/mongodb/conf/mongo.keyfile root@192.168.30.214:/home/server/mongodb/conf/</span><br></pre></td></tr></table></figure><h4 id="4-3-修改MongoDB配置文件，开启认证"><a href="#4-3-修改MongoDB配置文件，开启认证" class="headerlink" title="4.3 修改MongoDB配置文件，开启认证"></a>4.3 修改MongoDB配置文件，开启认证</h4><ul><li>在配置文件中添加、修改如下配置。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">security:</span><br><span class="line">  keyFile: /home/server/mongodb/conf/mongo.keyfile</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure><ul><li>重启所有的mongo节点</li></ul><h4 id="4-4-验证副本集认证"><a href="#4-4-验证副本集认证" class="headerlink" title="4.4 验证副本集认证"></a>4.4 验证副本集认证</h4><p>使用用户名、免密、认证库登录MongoDB副本集主节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongo -u mongouser -p 123456 --host 192.168.30.207 --port 27017 -authenticationDatabase admin</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Elasticsearch 7.X 分片数量不足问题</title>
      <link href="posts/solve-shortage-of-es7.x-shards/"/>
      <url>posts/solve-shortage-of-es7.x-shards/</url>
      
        <content type="html"><![CDATA[<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>这是Logstash向ES请求创建新索引时，Logstash日志出现以下报错信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[2021-01-11T13:23:52,381][WARN ][logstash.outputs.elasticsearch][main][08029a8bd56dc10a64b84e502acbac75</span><br><span class="line">f20dc2c03ac3454af5ea5a31d7aade2c] Could not index event to Elasticsearch. &#123;:status=&gt;400, :action=&gt;[<span class="string">&quot;ind</span></span><br><span class="line"><span class="string">ex&quot;</span>, &#123;:_id=&gt;nil, :_index=&gt;<span class="string">&quot;catalina-prod-openapi-2021.01.11&quot;</span>, :routing=&gt;nil, :_type=&gt;<span class="string">&quot;_doc&quot;</span>&#125;, <span class="comment">#&lt;LogStas</span></span><br><span class="line">h::Event:0x3a2c6612&gt;], :response=&gt;&#123;<span class="string">&quot;index&quot;</span>=&gt;&#123;<span class="string">&quot;_index&quot;</span>=&gt;<span class="string">&quot;catalina-prod-2021.01.11&quot;</span>, <span class="string">&quot;_type&quot;</span></span><br><span class="line">=&gt;<span class="string">&quot;_doc&quot;</span>, <span class="string">&quot;_id&quot;</span>=&gt;nil, <span class="string">&quot;status&quot;</span>=&gt;400, <span class="string">&quot;error&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;validation_exception&quot;</span>, <span class="string">&quot;reason&quot;</span>=&gt;<span class="string">&quot;Validation Fa</span></span><br><span class="line"><span class="string">iled: 1: this action would add [2] total shards, but this cluster currently has [1000]/[1000] maximum s</span></span><br><span class="line"><span class="string">hards open;&quot;</span>&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>从日志可以找到报错信息，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Failed: 1: this action would add [2] total shards, but this cluster currently has [1000]/[1000] maximum</span><br><span class="line">shards open;</span><br></pre></td></tr></table></figure><blockquote><p><em>ES当前最大的分片数只有1000，并且已经占用满了，但是此时ES创建新索引时还需要2个分片。也就是说ES的分片数不够用了。</em></p></blockquote><p>&nbsp;</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>从Elasticsearch7.X版本开始，每个node默认只允许有1000个分片，所以上述报错是因为集群分片数不足引起的。</p><h4 id="修改ES的分片数量"><a href="#修改ES的分片数量" class="headerlink" title="修改ES的分片数量"></a>修改ES的分片数量</h4><p>1、通过配置文件<code>elasticsearch.yml</code>修改节点（集群）分片数量，需要重启服务。（永久生效）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.max_shards_per_node: 5000</span><br></pre></td></tr></table></figure><p>2、通过curl命令修改分片数量</p><blockquote><p>集群更新 API 有两种工作模式：</p><p>临时（Transient）</p><p>这些变更在集群重启之前一直会生效。一旦整个集群重启，这些配置就被清除。</p><p>永久（Persistent）</p><p>这些变更会永久存在直到被显式修改。即使全集群重启它们也会存活下来并覆盖掉静态配置文件里的选项。</p><p>临时或永久配置需要在 JSON 体里分别指定。</p></blockquote><ul><li>临时生效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -H <span class="string">&quot;Content-Type:application/json&quot;</span> http://localhost:9200/_cluster/settings -d <span class="string">&#x27;&#123; &quot;transient&quot;: &#123; &quot;cluster&quot;: &#123; &quot;max_shards_per_node&quot;: 5000 &#125; &#125; &#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>永久生效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -H <span class="string">&quot;Content-Type:application/json&quot;</span> http://localhost:9200/_cluster/settings -d <span class="string">&#x27;&#123; &quot;persistent&quot;: &#123; &quot;cluster&quot;: &#123; &quot;max_shards_per_node&quot;: 5000 &#125; &#125; &#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h4 id="查看分片数量"><a href="#查看分片数量" class="headerlink" title="查看分片数量"></a>查看分片数量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XGET http://localhost:9200/_cluster/settings?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;persistent&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;cluster&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;max_shards_per_node&quot;</span> : <span class="string">&quot;5000&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;transient&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;cluster&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;max_shards_per_node&quot;</span> : <span class="string">&quot;5000&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><p><strong>参考文档</strong></p><ul><li><a href="https://blog.csdn.net/knight_zhou/article/details/105707342">https://blog.csdn.net/knight_zhou/article/details/105707342</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose 部署 EFK</title>
      <link href="posts/docker-compose-deploys-efk/"/>
      <url>posts/docker-compose-deploys-efk/</url>
      
        <content type="html"><![CDATA[<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>系统版本：CentOS 7.6</p><p>服务器配置：2H 4G</p><p>软件版本（docker镜像）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch 6.6.0</span><br><span class="line">kibana 6.6.0</span><br><span class="line">filebeat 6.6.0</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker-CE"></a>安装 Docker-CE</h2><h3 id="添加-stable-版本的-docker-仓库"><a href="#添加-stable-版本的-docker-仓库" class="headerlink" title="添加 stable 版本的 docker 仓库"></a>添加 <code>stable</code> 版本的 docker 仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装-docker-ce"><a href="#安装-docker-ce" class="headerlink" title="安装 docker-ce"></a>安装 docker-ce</h3><h4 id="安装最新版的-docker"><a href="#安装最新版的-docker" class="headerlink" title="安装最新版的 docker"></a>安装最新版的 docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h4 id="安装指定版本-docker"><a href="#安装指定版本-docker" class="headerlink" title="安装指定版本 docker"></a>安装指定版本 docker</h4><ul><li>查询可安装的版本：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line"> * updates: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line"> * extras: mirrors.huaweicloud.com</span><br><span class="line">docker-ce.x86_64            3:19.03.4-3.el7                     docker-ce-stable</span><br><span class="line">......</span><br><span class="line">docker-ce.x86_64            3:18.09.9-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable</span><br><span class="line">......</span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure><ul><li>比如这里我们来安装 docker-ce-18.09.9 版本：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install docker-ce-18.09.9 docker-ce-cli-18.09.9 containerd.io -y</span><br></pre></td></tr></table></figure><p>安装完成，但是还没有启动，由于我这里的磁盘空间不大，所以需要更改下 Docker 的根目录，将默认的 <code>/var/lib/docker</code> 更改为 <code>/data/docker</code> 目录，添加如下配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /etc/docker</span><br><span class="line">$ vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span> : [</span><br><span class="line">    <span class="string">&quot;https://ot2k4d59.mirror.aliyuncs.com/&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;graph&quot;</span>: <span class="string">&quot;/data/docker&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>镜像加速器：</strong></p><p>使用加速器可以提升获取 Docker 官方镜像的速度，建议注册阿里云帐号，使用阿里云提供的镜像加速服务，地址：<a href="https://cr.console.aliyun.com/cn-beijing/instances/mirrors%E3%80%82">https://cr.console.aliyun.com/cn-beijing/instances/mirrors。</a></p></blockquote><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置为开机启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker  </span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line"><span class="comment"># 启动 docker</span></span><br><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="部署-EFK"><a href="#部署-EFK" class="headerlink" title="部署 EFK"></a>部署 EFK</h2><h4 id="编写docker-compose启动文件"><a href="#编写docker-compose启动文件" class="headerlink" title="编写docker-compose启动文件"></a>编写docker-compose启动文件</h4><ul><li>创建项目目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/project/efk </span><br></pre></td></tr></table></figure><ul><li>编写docker-compose</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  es660:</span><br><span class="line">    image: elasticsearch:6.6.0</span><br><span class="line">    container_name: elasticsearch</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">      - 9300:9300</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/dockerdata/es660/etc/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span><br><span class="line">      - /data/dockerdata/es660/plugins/x-pack-core:/usr/share/elasticsearch/modules/x-pack-core</span><br><span class="line">      - /data/dockerdata/es660/data/:/usr/share/elasticsearch/data</span><br><span class="line">      - /data/dockerdata/es660/backup:/data/backup</span><br><span class="line">      - /data/dockerdata/es660/logs:/usr/share/elasticsearch/logs</span><br><span class="line">    hostname: es</span><br><span class="line">    restart: always</span><br><span class="line">    network_mode: <span class="string">&quot;bridge&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai<span class="comment"># 更改容器时区为 CST（默认为UTC）</span></span><br><span class="line"></span><br><span class="line">  kibana660:</span><br><span class="line">    image: kibana:6.6.0</span><br><span class="line">    container_name: kibana</span><br><span class="line">    ports:</span><br><span class="line">      - 5601:5601</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/dockerdata/kibana660/etc/kibana.yml:/usr/share/kibana/config/kibana.yml</span><br><span class="line">      - /data/dockerdata/kibana660/plugins:/usr/share/kibana/plugins</span><br><span class="line">      - /data/dockerdata/kibana660/logs:/usr/share/kibana/logs</span><br><span class="line">    hostname: kibana</span><br><span class="line">    restart: always</span><br><span class="line">    network_mode: <span class="string">&quot;bridge&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai<span class="comment"># 更改容器时区为 CST（默认为UTC）</span></span><br><span class="line"></span><br><span class="line">  filebeat660:</span><br><span class="line">    image: elastic/filebeat:6.6.0</span><br><span class="line">    container_name: filebeat</span><br><span class="line">    ports: </span><br><span class="line">      - 5044:5044</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/dockerdata/filebeat660/etc/filebeat.yml:/usr/share/filebeat/filebeat.yml</span><br><span class="line">      - /data/dockerdata/filebeat660/data:/usr/share/filebeat/data</span><br><span class="line">      - /data/dockerdata/filebeat660/logs:/usr/share/filebeat/logs  </span><br><span class="line">      - /data/dockerdata/filebeat660/tmp:/usr/share/filebeat/tmp</span><br><span class="line">      - /data/logs/nginx:/data/logs/nginx<span class="comment"># 把nginx日志目录挂载到容器内部</span></span><br><span class="line">    hostname: filebeat</span><br><span class="line">    restart: always</span><br><span class="line">    network_mode: <span class="string">&quot;bridge&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai<span class="comment"># 更改容器时区为 CST（默认为UTC）</span></span><br></pre></td></tr></table></figure><h4 id="创建EFK相关目录"><a href="#创建EFK相关目录" class="headerlink" title="创建EFK相关目录"></a>创建EFK相关目录</h4><ul><li>创建 ES 所需目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/dockerdata/es660/&#123;etc,plugins,data,logs,backup&#125;</span><br></pre></td></tr></table></figure><ul><li>创建 Kibana 所需目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/dockerdata/kibana660/&#123;etc,plugins,logs&#125;</span><br></pre></td></tr></table></figure><ul><li>创建 Filebeat 所需目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/dockerdata/filebeat660/&#123;etc,data,logs,tmp&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>由于目录时挂载进去的，容器内部需要一些读写权限，要进行一些权限配置，否则容器不能正常启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment"># elasticsearch 目录</span></span><br><span class="line">&gt;chmod 777 /data/dockerdata/es660/&#123;data,logs,backup&#125;</span><br><span class="line">&gt;chmod 644 -R /data/dockerdata/es660/&#123;etc,plugins&#125;/*</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment"># kibana 目录</span></span><br><span class="line">&gt;chmod 777 /data/dockerdata/kibana660/&#123;plugins,logs&#125;</span><br><span class="line">&gt;chmod 644 -R /data/dockerdata/es660/etc/*</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment"># filebeat 目录</span></span><br><span class="line">&gt;chmod 777 /data/dockerdata/filebeat660/&#123;data,logs,tmp&#125;</span><br><span class="line">&gt;chmod 644 -R /data/dockerdata/filebeat660/etc/*</span><br></pre></td></tr></table></figure></blockquote><h4 id="配置EFK所需配置文件"><a href="#配置EFK所需配置文件" class="headerlink" title="配置EFK所需配置文件"></a>配置EFK所需配置文件</h4><ul><li><strong>Elasticsearch所需文件</strong></li></ul><p>配置文件<code>elasticsearch.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat&gt;&gt;/data/dockerdata/es660/etc/elasticsearch.yml&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">cluster.name: es</span></span><br><span class="line"><span class="string">node.name: es-01</span></span><br><span class="line"><span class="string">bootstrap.memory_lock: true</span></span><br><span class="line"><span class="string">network.host: 0.0.0.0</span></span><br><span class="line"><span class="string">http.port: 9200</span></span><br><span class="line"><span class="string">discovery.type: single-node     # 启动单节点类型</span></span><br><span class="line"><span class="string">xpack.security.enabled: false    # 关闭x-pack认证</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在本文，我针对ES开启了x-pack插件，所以需要替换原ES的x-pack-core目录文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://dld.wanhebin.com/package/elk/plugins/x-pack-6.6.0/x-pack-core.tar.gz</span><br><span class="line">$ tar xf x-pack-core.tar.gz -C /data/dockerdata/es660/plugins/</span><br></pre></td></tr></table></figure><ul><li><strong>Kibana所需文件</strong></li></ul><p>配置文件<code>kibana.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat&gt;&gt;/data/dockerdata/kibana660/etc/kibana.yml&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">server.port: 5601</span></span><br><span class="line"><span class="string">server.host: &quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="string">elasticsearch.hosts: [&quot;http://es660:9200&quot;] # 如果无法正常连接ES，请更换成宿主机docker0网卡的IP</span></span><br><span class="line"><span class="string">kibana.index: &quot;.kibana&quot;</span></span><br><span class="line"><span class="string">logging.dest: /usr/share/kibana/logs/kibana.log</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 连接ES认证配置</span></span><br><span class="line"><span class="string"># elasticsearch.username: &quot;kibana&quot;</span></span><br><span class="line"><span class="string"># elasticsearch.password: &quot;123456&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>Filebeat所需文件</strong></li></ul><p>配置文件<code>filebeat.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">$ cat&gt;&gt;/data/dockerdata/filebeat660/etc/filebeat.yml&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="string">- type: log</span></span><br><span class="line"><span class="string">  enabled: true</span></span><br><span class="line"><span class="string">  paths:</span></span><br><span class="line"><span class="string">    - /data/logs/nginx/nginx_access_json-1.log# json格式的nginx日志文件路径</span></span><br><span class="line"><span class="string">  json.keys_under_root: true</span></span><br><span class="line"><span class="string">  json.overwrite_keys: true</span></span><br><span class="line"><span class="string">  json.message_key: log</span></span><br><span class="line"><span class="string">  tags: [&quot;nginx-log1&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- type: log</span></span><br><span class="line"><span class="string">  enabled: true</span></span><br><span class="line"><span class="string">  paths:</span></span><br><span class="line"><span class="string">    - /data/logs/nginx/nginx_access_json-2.log# json格式的nginx日志文件路径</span></span><br><span class="line"><span class="string">  json.keys_under_root: true</span></span><br><span class="line"><span class="string">  json.overwrite_keys: true</span></span><br><span class="line"><span class="string">  json.message_key: log</span></span><br><span class="line"><span class="string">  tags: [&quot;nginx-log2&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">filebeat.config:</span></span><br><span class="line"><span class="string">  modules:</span></span><br><span class="line"><span class="string">    path: $&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class="line"><span class="string">    reload.enabled: false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">setup.ilm.enabled: false</span></span><br><span class="line"><span class="string">setup.template:</span></span><br><span class="line"><span class="string">  name: &quot;nginx&quot;</span></span><br><span class="line"><span class="string">  pattern: &quot;nginx-*&quot;</span></span><br><span class="line"><span class="string">setup.template.overwrite: true</span></span><br><span class="line"><span class="string">setup.template.enabled: false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">output.elasticsearch:</span></span><br><span class="line"><span class="string">  hosts: [&quot;es660:9200&quot;]# 如果无法正常连接ES，请更换成宿主机docker0网卡的IP</span></span><br><span class="line"><span class="string">  indices:</span></span><br><span class="line"><span class="string">    - index: &quot;nginx-access-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line"><span class="string">      when.contains:</span></span><br><span class="line"><span class="string">        tags: &quot;nginx-log1&quot;</span></span><br><span class="line"><span class="string">    - index: &quot;nginx-error-%&#123;+yyyy.MM.dd&#125;&quot;</span></span><br><span class="line"><span class="string">      when.contains:</span></span><br><span class="line"><span class="string">        tags: &quot;nginx-log2&quot;</span></span><br><span class="line"><span class="string">  # ES连接认证</span></span><br><span class="line"><span class="string">  # username: &#x27;elastic&#x27;  </span></span><br><span class="line"><span class="string">  # password: &#x27;changeme&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">setup.template.overwrite: false</span></span><br><span class="line"><span class="string">setup.template.json.enabled: true</span></span><br><span class="line"><span class="string">setup.template.enabled: false</span></span><br><span class="line"><span class="string">setup.ilm.enabled: false</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="破解-Elasticsearch-的x-pack插件"><a href="#破解-Elasticsearch-的x-pack插件" class="headerlink" title="破解 Elasticsearch 的x-pack插件"></a>破解 Elasticsearch 的x-pack插件</h2><p>在上面已经把x-pacK-core插件目录替换成了破解包，接下来只需要进行激活步鄹。</p><p>详细步鄹参考 <a href="https://www.wanhebin.com/devops/elk/elasticsearch/983.html">Elasticsearch 6.6.0 x-pack 破解</a> 进行x-pack激活。</p><ul><li><strong>启动es容器</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /data/project/efk</span><br><span class="line">$ docker-compose start es660</span><br></pre></td></tr></table></figure><ul><li><strong>导入liences</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://dld.wanhebin.com/package/elk/plugins/x-pack-6.6.0/license.json</span><br><span class="line">$ curl -XPUT -H <span class="string">&quot;Content-Type: application/json&quot;</span> <span class="string">&#x27;http://127.0.0.1:9200/_xpack/license&#x27;</span> -d @license.json</span><br></pre></td></tr></table></figure><ul><li><strong>查看 license 授权</strong></li></ul><p><img src="http://pic-cdn.wanhebin.com/2020/12/07/0147ef657804c.png" alt="efk-04.png"></p><p>&nbsp;</p><h2 id="EFK-开启-X-PACK-认证"><a href="#EFK-开启-X-PACK-认证" class="headerlink" title="EFK 开启 X-PACK 认证"></a>EFK 开启 X-PACK 认证</h2><h3 id="ES开启x-pack认证"><a href="#ES开启x-pack认证" class="headerlink" title="ES开启x-pack认证"></a>ES开启x-pack认证</h3><ul><li><strong>修改配置文件<code>/data/dockerdata/es660/etc/elasticsearch.yml</code></strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -ir <span class="string">&#x27;s@xpack.security.enabled: false@xpack.security.enabled: true@g&#x27;</span> /data/dockerdata/es660/etc/elasticsearch.yml</span><br></pre></td></tr></table></figure><ul><li><strong>重启es容器</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /data/project/efk</span><br><span class="line">$ docker-compose restart es660</span><br></pre></td></tr></table></figure><ul><li><strong>进入容器，设置ES密码</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入es容器内部</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it elasticsearch bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在容器内，进入es目录，生成密码</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/share/elasticsearch</span><br><span class="line">$ ./bin/elasticsearch-setup-passwords auto  </span><br></pre></td></tr></table></figure><h3 id="Kibana-开启认证"><a href="#Kibana-开启认证" class="headerlink" title="Kibana 开启认证"></a>Kibana 开启认证</h3><p>开启用户认证，让kibana可以正常访问es。</p><ul><li><strong>修改<code>kibana.yml</code>配置文件</strong></li></ul><p>在之前写kibana配置文件时，就已经把认证配置加上了，现在取消注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed -ir <span class="string">&#x27;s@# elasticsearch.username: &quot;kibana&quot;@elasticsearch.username: &quot;kibana&quot;@g&#x27;</span> /data/dockerdata/kibana660/etc/kibana.yml</span><br><span class="line"></span><br><span class="line">$ sed -ir <span class="string">&#x27;s@# elasticsearch.password: &quot;123456&quot;@elasticsearch.password: &quot;123456&quot;@g&#x27;</span> /data/dockerdata/kibana660/etc/kibana.yml</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>这里的用户密码，填写刚才es里生成的密码</p></blockquote><ul><li><strong>启动kibana容器</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /data/project/efk</span><br><span class="line">$ docker-compose restart kibana660</span><br></pre></td></tr></table></figure><h3 id="Filebeat-开启认证"><a href="#Filebeat-开启认证" class="headerlink" title="Filebeat 开启认证"></a>Filebeat 开启认证</h3><p>开启用户认证，让filebeat可以正常访问es，使其可以向es传输数据。</p><ul><li><strong>修改<code>kibana.yml</code>配置文件</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed -ir <span class="string">&#x27;s@# username: &#x27;</span>elastic<span class="string">&#x27;@username: &#x27;</span>elastic<span class="string">&#x27;@g&#x27;</span> /data/dockerdata/filebeat660/etc/filebeat.yml</span><br><span class="line"></span><br><span class="line">$ sed -ir <span class="string">&#x27;s@# password: &#x27;</span>changeme<span class="string">&#x27;@password: &#x27;</span>changeme<span class="string">&#x27;@g&#x27;</span> /data/dockerdata/filebeat660/etc/filebeat.yml</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>这里的用户密码，填写刚才es里生成的密码</p></blockquote><ul><li><strong>启动filebeat容器</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /data/project/efk</span><br><span class="line">$ docker-compose restart filebeat660</span><br></pre></td></tr></table></figure><h3 id="查看EFK容器状态"><a href="#查看EFK容器状态" class="headerlink" title="查看EFK容器状态"></a>查看EFK容器状态</h3><p>所有容器的 STATUS 都为 UP 说明容器正常启动运行。</p><p><img src="http://pic-cdn.wanhebin.com/2020/12/07/2fb0742a742c4.png" alt="efk-01.png"></p><p>如果有容器不处于 UP 状态，请检查相关容器日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -f 容器名</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="登录-Kibana-界面"><a href="#登录-Kibana-界面" class="headerlink" title="登录 Kibana 界面"></a>登录 Kibana 界面</h2><p>使用<code>elastic</code>账户进行登录，地址：<a href="http://ip:5601/">http://IP:5601</a></p><p><img src="http://pic-cdn.wanhebin.com/2020/12/07/9b699f90773ed.png" alt="efk-02.png"><img src="http://pic-cdn.wanhebin.com/2020/12/07/d59c9726ffa60.png" alt="efk-03.png"></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 6.6.0 X-PACK 破解</title>
      <link href="posts/elasticsearch-6.6.0-x-pack-crack/"/>
      <url>posts/elasticsearch-6.6.0-x-pack-crack/</url>
      
        <content type="html"><![CDATA[<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p><strong>软件包版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-6.6.0.rpm</span><br><span class="line">kibana-6.6.0-x86_64.rpm</span><br><span class="line">logstash-6.6.0.rpm</span><br></pre></td></tr></table></figure><p><strong>在做下列操作前，建议先停止Elasticsearch、Kibana</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop elasticsearch kibana</span><br></pre></td></tr></table></figure><p>如果是相同版本，可直接使用已破解好的相关 x-pack-6.6.0 文件：<a href="http://dld.wanhebin.com/package/elk/plugins/x-pack-6.6.0.zip">下载地址</a></p><p>&nbsp;</p><h3 id="反编译-x-pack-core-6-6-0-jar"><a href="#反编译-x-pack-core-6-6-0-jar" class="headerlink" title="反编译 x-pack-core-6.6.0.jar"></a>反编译 x-pack-core-6.6.0.jar</h3><p>下载Luyten：<a href="https://github.com/deathmarine/Luyten/release">https://github.com/deathmarine/Luyten/release</a></p><p>从ES服务器上把<code>x-pack-core-6.6.0.jar</code> 下载到PC，打开Luyten软件，并把<code>x-pack-core-6.6.0.jar</code>包拖入。</p><blockquote><p>rpm包安装的elasticsearch插件路径：<code>/usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar</code></p></blockquote><p>找到 <code>org.elasticsearch.license.LicenseVerifier</code>、<code>org.elasticsearch.xpack.core.XPackBuild</code>这两个文件。</p><p><img src="https://pic-cdn.wanhebin.com/2020/11/18/f0292119e3f0d.png" alt="x-pack-01.png"></p><p><img src="https://pic-cdn.wanhebin.com/2020/11/18/5b90efa381229.png" alt="x-pack-02.png"></p><p>选择文件后，使用 Luyten 的 Save As 提取出文件。</p><p>&nbsp;</p><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><h4 id="1、修改LicenseVerifier-java"><a href="#1、修改LicenseVerifier-java" class="headerlink" title="1、修改LicenseVerifier.java"></a>1、修改<code>LicenseVerifier.java</code></h4><blockquote><p>LicenseVerifier 中有两个静态方法，这就是验证授权文件是否有效的方法，我们把它修改为全部返回true。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.elasticsearch.license;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.bytes.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.util.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.core.internal.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LicenseVerifier</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verifyLicense</span><span class="params">(<span class="keyword">final</span> License license, <span class="keyword">final</span> <span class="keyword">byte</span>[] publicKeyData)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verifyLicense</span><span class="params">(<span class="keyword">final</span> License license)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、修改XPackBuild-java"><a href="#2、修改XPackBuild-java" class="headerlink" title="2、修改XPackBuild.java"></a>2、修改<code>XPackBuild.java</code></h4><blockquote><p>XPackBuild 中最后一个静态代码块中 try的部分全部删除，这部分会验证jar包是否被修改。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.elasticsearch.xpack.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XPackBuild</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> XPackBuild CURRENT;</span><br><span class="line">    <span class="keyword">private</span> String shortHash;</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressForbidden(reason = &quot;looks up path of xpack.jar directly&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Path <span class="title">getElasticsearchCodebase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> URL url = XPackBuild.class.getProtectionDomain().getCodeSource().getLocation();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> PathUtils.get(url.toURI());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (URISyntaxException bogus) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(bogus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    XPackBuild(<span class="keyword">final</span> String shortHash, <span class="keyword">final</span> String date) &#123;</span><br><span class="line">        <span class="keyword">this</span>.shortHash = shortHash;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shortHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.shortHash;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Path path = getElasticsearchCodebase();</span><br><span class="line">        String shortHash = <span class="keyword">null</span>;</span><br><span class="line">        String date = <span class="keyword">null</span>;</span><br><span class="line">        Label_0109: &#123;</span><br><span class="line">            shortHash = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">            date = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CURRENT = <span class="keyword">new</span> XPackBuild(shortHash, date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="编译修改后的java文件"><a href="#编译修改后的java文件" class="headerlink" title="编译修改后的java文件"></a>编译修改后的java文件</h3><p>先将修改后的文件上传到ES服务器上，再进行编译。</p><ul><li>编译生成新的 class 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javac -cp <span class="string">&quot;/usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar:/usr/share/elasticsearch/lib/*&quot;</span> LicenseVerifier.java </span><br><span class="line"></span><br><span class="line">javac -cp <span class="string">&quot;/usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar:/usr/share/elasticsearch/lib/*&quot;</span> XPackBuild.java </span><br></pre></td></tr></table></figure><ul><li>覆盖原class文件</li></ul><p>复制并解压 x-pack-core-6.6.0.jar 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/x-pack-core-6.6.0</span><br><span class="line">cp /usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar /opt/</span><br><span class="line">unzip xf x-pack-core-6.6.0.jar -d x-pack-core-6.6.0/</span><br><span class="line"><span class="built_in">cd</span> /opt/x-pack-core-6.6.0/</span><br></pre></td></tr></table></figure><p>把<code>LicenseVerifier.class</code>、<code>XPackBuild.class</code>覆盖原文件</p><blockquote><p>LicenseVerifier.class 路径： <code>org/elasticsearch/license/LicenseVerifier.class</code></p><p>XPackBuild.class 路径： <code>org/elasticsearch/xpack/core/XPackBuild.class</code></p></blockquote><p>&nbsp;</p><h3 id="重新打包并替换-x-pack-core-6-6-0-jar"><a href="#重新打包并替换-x-pack-core-6-6-0-jar" class="headerlink" title="重新打包并替换 x-pack-core-6.6.0.jar"></a>重新打包并替换 x-pack-core-6.6.0.jar</h3><ul><li>打包<code>x-pack-core-6.6.0</code>为新的 x-pack-core-6.6.0.jar</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/x-pack-core-6.6.0/</span><br><span class="line">jar cvf /root/x-pack-core-6.6.0.jar *</span><br></pre></td></tr></table></figure><ul><li>备份原来的 x-pack-core-6.6.0.jar，并将新的 x-pack-core-6.6.0.jar 覆盖原文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line">\cp /opt/x-pack-core-6.6.0/x-pack-core-6.6.0.jar /usr/share/elasticsearch/modules/x-pack-core/x-pack-core-6.6.0.jar</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="授权文件导入"><a href="#授权文件导入" class="headerlink" title="授权文件导入"></a>授权文件导入</h3><h4 id="1、禁用-x-pack-security"><a href="#1、禁用-x-pack-security" class="headerlink" title="1、禁用 x-pack security"></a>1、禁用 <code>x-pack security</code></h4><p>先把禁用<code>x-pack security</code>，否则不能正常导入 license 文件 </p><blockquote><p><code>vim /etc/elasticsearch/elasticsearch.yml</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>重启elasticsearch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart elasticsearch.service</span><br></pre></td></tr></table></figure><h4 id="2、修改授权文件"><a href="#2、修改授权文件" class="headerlink" title="2、修改授权文件"></a>2、修改授权文件</h4><blockquote><p>去官网申请basic授权文件：<a href="https://license.elastic.co/registration">https://license.elastic.co/registration</a></p><p>根据邮箱里的链接下载授权文件，更改名为 license.json</p></blockquote><p>修改 license.json 信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;uid&quot;</span>:<span class="string">&quot;654c015f-2dba-4412-b6dc-38939b36b2de&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;platinum&quot;</span>,#修改为白金授权</span><br><span class="line">        <span class="attr">&quot;issue_date_in_millis&quot;</span>:<span class="number">1605571200000</span>,</span><br><span class="line">        <span class="attr">&quot;expiry_date_in_millis&quot;</span>:<span class="number">4070793600000</span>,#2098年过期</span><br><span class="line">        <span class="attr">&quot;max_nodes&quot;</span>:<span class="number">999</span>,#集群最大节点数</span><br><span class="line">        <span class="attr">&quot;issued_to&quot;</span>:<span class="string">&quot;HEBIN (China)&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;issuer&quot;</span>:<span class="string">&quot;Web Form&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;signature&quot;</span>:<span class="string">&quot;AAAA........zDD1U&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;start_date_in_millis&quot;</span>:<span class="number">1605571200000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、导入-license"><a href="#3、导入-license" class="headerlink" title="3、导入 license"></a>3、导入 license</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -H <span class="string">&quot;Content-Type: application/json&quot;</span> <span class="string">&#x27;http://127.0.0.1:9200/_xpack/license&#x27;</span> -d @license.json</span><br></pre></td></tr></table></figure><ul><li>查看 license 授权</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET http://127.0.0.1:9200/_license</span><br></pre></td></tr></table></figure><p><img src="https://pic-cdn.wanhebin.com/2020/11/18/dee1d2e2453d7.png" alt="x-pack-03.png"></p><p>&nbsp;</p><h3 id="ES开启x-pack认证"><a href="#ES开启x-pack认证" class="headerlink" title="ES开启x-pack认证"></a>ES开启x-pack认证</h3><ul><li>修改配置文件<code>/etc/elasticsearch/elasticsearch.yml</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.enabled: <span class="literal">true</span></span><br><span class="line">xpack.security.transport.ssl.enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>重启elasticsearch</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart elasticsearch.service</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="设置ES密码"><a href="#设置ES密码" class="headerlink" title="设置ES密码"></a>设置ES密码</h3><ul><li><strong>生成自定义密码</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure><ul><li><strong>生成随机密码</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="Kibana开启x-pack认证"><a href="#Kibana开启x-pack认证" class="headerlink" title="Kibana开启x-pack认证"></a>Kibana开启x-pack认证</h3><ul><li>修改配置文件<code>vim /etc/kibana/kibana.yml</code></li></ul><p>密码填写上一步生成的elastic用户密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.username: <span class="string">&quot;elastic&quot;</span></span><br><span class="line">elasticsearch.password: <span class="string">&quot;changeme&quot;</span></span><br></pre></td></tr></table></figure><ul><li>重启kibana</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart kibana.service</span><br></pre></td></tr></table></figure><ul><li>访问kibana页面，验证x-pack</li></ul><p><img src="https://pic-cdn.wanhebin.com/2020/11/18/20c79a8ed2504.png" alt="x-pack-04.png"></p><p>&nbsp;</p><h3 id="Logstash开启x-pack认证"><a href="#Logstash开启x-pack认证" class="headerlink" title="Logstash开启x-pack认证"></a>Logstash开启x-pack认证</h3><ul><li>在<code>logstash.yml</code>中配置验证</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xpack.monitoring.enabled: <span class="literal">true</span></span><br><span class="line">xpack.monitoring.elasticsearch.username: logstash_system</span><br><span class="line">xpack.monitoring.elasticsearch.password: xxxxxxx<span class="comment">#填写对应用户密码</span></span><br></pre></td></tr></table></figure><ul><li>在<code>/etc/logstash/conf.d/test.conf</code>配置文件的 output 模块中配置验证验证</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">hosts =&gt; [<span class="string">&quot;127.0.0.1:9200&quot;</span>]</span><br><span class="line">index =&gt; <span class="string">&quot;system-syslog-toes-%&#123;+YYYY.MM&#125;&quot;</span></span><br><span class="line">user =&gt; <span class="string">&quot;logstash_system&quot;</span><span class="comment">#填写用户名</span></span><br><span class="line">password =&gt; <span class="string">&quot;xxxxx&quot;</span><span class="comment">#填写对应用户密码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启logstash</li></ul>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 半同步复制</title>
      <link href="posts/mysql-semisynchronous-replication/"/>
      <url>posts/mysql-semisynchronous-replication/</url>
      
        <content type="html"><![CDATA[<h3 id="一、半同步复制"><a href="#一、半同步复制" class="headerlink" title="一、半同步复制"></a>一、半同步复制</h3><h4 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h4><p>在半同步复制出现之前，虽然异步复制可以满足主从实例之间的数据同步，同时row 格式的binlog也能够大幅度避免主从实例的数据不一致的情况，但是如果碰到主库崩溃，写业务故障切换到从库，将从库提升为主库时，原来的主库上可能有一部分数据还没来得及被从库接收，而事实上这部分丢失的数据可能在主库上已经正常提交完成了。为解决这个问题，在MySQL 5.5版本中引入了半同步复制，半同步复制的关键改进就是当客户端在 主库上写入一个事务时，需要等待从库接收到主库的binlog，且主库接收到ACK确认之后，客户端才能收到事务成功提交的消息，如图</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/89a87f6517711.png" alt="mysql_semi-syn_rep-1.png"></p><p>这里有一个小细节需要注意：早期的半同步复制有一个缺陷，在正常的半同步复制流程中，当客户端对主库发起事务提交之后，主库发送binlog给从库，从库接收到binlog并返回ACK，然后主库返回事务提交成功的消息给发起提交的客户端。这里对于发起事务提交的客户端看起来没有任何问题，但实际上在早期的半同步复制中，主库在等待ACK 的InnoDB存储引擎内部已经提交事务，只是阻塞了返回给发起事务提交的客户端消息而已。此时如果有其他会话对该事务修改的数据进行查询，将会查询到最新数据，类似于下图</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/77514da9974d9.png" alt="mysql_semi-syn_rep-2.png"></p><p>该缺陷可能导致非发起数据提交的客户端在碰到主库故障转移时发生幻读，类似下图。User 1发起一个INSERT操作 写入一行数据，正在等待写入成功返回，此时User 2就可以在主库上查询到User 1插入的 数据，当主库发生故障，写业务切换到从库，而从库又没有收到User1写入的数据时，那 么此时对于User 1来说，会收到事务写入失败的信息，但对于User 2来说，之前在主库上能查询到的数据，切换到从库之后却发现查询不到了，就好像发生了幻读一样。</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/1d2aec7e9df9d.png" alt="mysql_semi-syn_rep-3.png"></p><h4 id="2-开启半同步复制"><a href="#2-开启半同步复制" class="headerlink" title="2.开启半同步复制"></a>2.开启半同步复制</h4><p><strong>主库配置：</strong></p><p>需要提前安装好semisync_master.so</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在主库上启用半同步复制插件</span></span><br><span class="line">rpl_semi_sync_master_enabled = 1</span><br><span class="line"><span class="comment">#等待从库发送 ACK 接收确认包的时间，如果时间超过1，则主库自动切换为异步复制。</span></span><br><span class="line">rpl_semi_sync_master_timeout = 1000</span><br></pre></td></tr></table></figure><p><strong>从库配置：</strong></p><p>需要提前安装好semisync_slave.so</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在从库上启用半同步复制插件</span></span><br><span class="line">rpl_semi_sync_slave_enabled = 1</span><br></pre></td></tr></table></figure><h4 id="3-半同步复制部署"><a href="#3-半同步复制部署" class="headerlink" title="3.半同步复制部署"></a>3.半同步复制部署</h4><p>半同步复制是基于异步复制的基础上，所以在开启半同步复制前，需要先部署好异步复制。</p><p>这异步复制的搭建详见：<a href="https://blog.wanhebin.com/posts/mysql-asynchronous-replication/">《MySQL 异步复制》</a></p><p>这里直接从已部署好异步复制的服务器上做半同步复制。</p><hr><p><strong>主库操作：</strong></p><ul><li>检查是否有动态支持</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global variables like <span class="string">&#x27;have_dynamic_loading&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>安装semisync_master.so插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSTALL PLUGIN rpl_semi_sync_master SONAME <span class="string">&#x27;semisync_master.so&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>开启半同步复制</p><ul><li>临时生效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET GLOBAL rpl_semi_sync_master_enabled = 1;</span><br><span class="line">mysql&gt; SET GLOBAL rpl_semi_sync_master_timeout = 1000;</span><br></pre></td></tr></table></figure><ul><li>永久生效（把配置卸载配置文件中，重启生效）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">rpl_semi_sync_master_enabled = 1</span><br><span class="line">rpl_semi_sync_master_timeout = 1000</span><br></pre></td></tr></table></figure></li><li><p>检查半同步复制是否开启</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&quot;%semi%&quot;</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>从库操作：</strong></p><ul><li>安装semisync_slave.so插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="string">&#x27;semisync_slave.so&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>开启半同步复制</p><ul><li>临时生效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET GLOBAL rpl_semi_sync_slave_enabled = 1;</span><br><span class="line"><span class="comment">#重启io线程使半同步复制生效</span></span><br><span class="line">mysql&gt; stop slave io_thread;</span><br><span class="line">mysql&gt; start slave io_thread;</span><br></pre></td></tr></table></figure><p><em>注意：如果I / O线程已经在运行，并且您没有重新启动它，则从服务器将继续使用异步复制。</em></p><ul><li>永久生效（把配置卸载配置文件中，重启生效）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">rpl_semi_sync_slave_enabled = 1</span><br></pre></td></tr></table></figure></li><li><p>检查半同步复制是否开启</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&quot;%semi%&quot;</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>检查半同步状态</strong></p><p>在主库上执行<code>show global status like &#39;rpl_semi%&#39;;</code>语句查看半同步的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like <span class="string">&#x27;%semi%&#x27;</span>;</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Variable_name                              | Value |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Rpl_semi_sync_master_clients               | 1     |</span><br><span class="line">| Rpl_semi_sync_master_net_avg_wait_time     | 371   |</span><br><span class="line">| Rpl_semi_sync_master_net_wait_time         | 38649 |</span><br><span class="line">| Rpl_semi_sync_master_net_waits             | 104   |</span><br><span class="line">| Rpl_semi_sync_master_no_times              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_tx                 | 0     |</span><br><span class="line">| Rpl_semi_sync_master_status                | ON    |</span><br><span class="line">| Rpl_semi_sync_master_timefunc_failures     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_avg_wait_time      | 414   |</span><br><span class="line">| Rpl_semi_sync_master_tx_wait_time          | 43138 |</span><br><span class="line">| Rpl_semi_sync_master_tx_waits              | 104   |</span><br><span class="line">| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_sessions         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_yes_tx                | 104   |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="二、增强半同步复制"><a href="#二、增强半同步复制" class="headerlink" title="二、增强半同步复制"></a>二、增强半同步复制</h3><h4 id="1-原理-1"><a href="#1-原理-1" class="headerlink" title="1.原理"></a>1.原理</h4><p>从MySQL 5.7开始，Oracle MySQL 官方对半同步复制进行了增强，从字面“增强半同步复制”来看，增强半同步复制本质上就是对早期的半同步复制的缺陷进行一些修补增 强，而其原理与半同步复制并无差别。那么，增强半同步复制在早期的半同步复制的基础 上做了什么修改呢？</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/ba0223dae9ab9.png" alt="mysql_semi-syn_rep-4.png"></p><p>从图中方框标记的地方可以看到，Engine Commit逻辑下沉到了最后，也就是 说，在增强半同步复制下，一个事务在存储引擎内部提交之前，必须要先收到从库的 ACK确认，否则不进行事务最后的提交。这样一来，非发起事务提交的客户端在查询数 据时，所看到的数据就能够和发起事务提交的客户端保持一致，从而解决了在主库故障转 移之后可能出现的幻读问题。</p><h4 id="2-开启增强半同步复制"><a href="#2-开启增强半同步复制" class="headerlink" title="2.开启增强半同步复制"></a>2.开启增强半同步复制</h4><p><strong>主库配置：</strong></p><p>需要提前安装好semisync_master.so</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在主库上启用半同步复制插件</span></span><br><span class="line">rpl_semi_sync_master_enabled = 1</span><br><span class="line"><span class="comment">#在 rpl_semi_sync_master_timeout 超时周期内，如果连接主库的从库数量降到 0 值，主库仍然继续等待从库的接收确认包</span></span><br><span class="line">rpl_semi_sync_master_wait_no_slave = ON</span><br><span class="line"><span class="comment">#主库需要接收到多少个从库的 ACK 确认之后，主库的事务才进行提交。</span></span><br><span class="line">rpl_semi_sync_master_wait_for_slave_count = 1</span><br><span class="line"><span class="comment">#默认值是AFTER_SYNC。主库将每个事务写入binlog中，并将binlog sync 到磁盘。在 sync binlog 之后，主库等待从库该事务的 ack 确认。在收到任意一个从库的确认后，主人将在存储引擎层提交事务，并将事务提交结果返回给客户端</span></span><br><span class="line">rpl_semi_sync_master_wait_point = AFTER_SYNC</span><br></pre></td></tr></table></figure><p><strong>从库配置：</strong></p><p>与早期的半同步复制相比，从库无新增参数。需要提前安装好semisync_slave.so。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在从库上启用半同步复制插件</span></span><br><span class="line">rpl_semi_sync_slave_enabled = 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZABBIX 4.4安装部署</title>
      <link href="posts/zabbix-installation-and-deployment/"/>
      <url>posts/zabbix-installation-and-deployment/</url>
      
        <content type="html"><![CDATA[<h3 id="安装zabbix"><a href="#安装zabbix" class="headerlink" title="安装zabbix"></a>安装zabbix</h3><ul><li><strong>配置Zabbix的yum源仓库</strong></li></ul><p>安装一个Zabbix官方源仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p>改用官方源为阿里云镜像源：</p><p>由于官方源是国外的镜像仓库，速度非常慢，改用阿里云的镜像仓库会非常快。只需在官方源的repo文件中修改URL即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s@http://repo.zabbix.com@https://mirrors.aliyun.com/zabbix@g&#x27; /etc/yum.repos.d/zabbix.repo</span><br></pre></td></tr></table></figure><ul><li><strong>安装zabbix</strong></li></ul><p>安装Zabbix 服务端，web前端，客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br></pre></td></tr></table></figure><ul><li><strong>安装Zabbix前端软件包。</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zabbix-web-mysql zabbix-nginx-conf</span><br></pre></td></tr></table></figure><h3 id="安装配置数据库"><a href="#安装配置数据库" class="headerlink" title="安装配置数据库"></a>安装配置数据库</h3><p>数据库这里使用mysql和mariadb都可以，此处以mariadb为例。</p><ul><li>安装mariadb</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mariadb-server mariadb</span><br></pre></td></tr></table></figure><ul><li>启动mariadb</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure><ul><li>配置数据库</li></ul><p>创建数据库，数据库用户，并授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; create user zabbix@<span class="string">&#x27;127.0.0.1&#x27;</span> identified by <span class="string">&#x27;zabbix&#x27;</span>;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>导入zabbix的初始数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -pzabbix zabbix</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li>配置zabbix服务端<code>/etc/zabbix/zabbix_server.conf</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]<span class="comment"># vim /etc/zabbix/zabbix_server.conf</span></span><br><span class="line">DBHost=127.0.0.1</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=zabbix</span><br></pre></td></tr></table></figure><ul><li>编辑文件/etc/php-fpm.d/zabbix.conf，取消注释并设置正确的时区。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">把     ; php_value[date.timezone] = Europe/Riga</span><br><span class="line">修改为  php_value[date.timezone] = Asia/Shanghai</span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent nginx php-fpm</span><br><span class="line">systemctl <span class="built_in">enable</span> zabbix-server zabbix-agent nginx php-fpm</span><br></pre></td></tr></table></figure><ul><li>检查端口</li></ul><p>zabbix服务端端口为10051，客户端端口为10050</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]<span class="comment"># netstat -lnt | grep -E &#x27;10050|10051&#x27;</span></span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN     </span><br><span class="line">tcp6       0      0 :::10050                :::*                    LISTEN     </span><br><span class="line">tcp6       0      0 :::10051                :::*                    LISTEN  </span><br></pre></td></tr></table></figure><h3 id="配置Zabbix前端"><a href="#配置Zabbix前端" class="headerlink" title="配置Zabbix前端"></a>配置Zabbix前端</h3><p>前端Web界面地址：<a href="http://10.0.0.210/">http://10.0.0.210</a></p><ul><li><strong>安装界面配置</strong></li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/0827747ace8ab.png" alt="zabbix_install-1.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/dd2b212b2eb17.png" alt="zabbix_install-2.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/f64d51eb86296.png" alt="zabbix_install-3.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/9a7ec649a975a.png" alt="zabbix_install-4.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/38f8de7c0f22f.png" alt="zabbix_install-5.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/ba5eaa4459125.png" alt="zabbix_install-6.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/cdb9134b36f72.png" alt="zabbix_install-7.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/bacb67b035e86.png" alt="zabbix_install-8.png"></p><ul><li><strong>如果不习惯英文界面，可以修改为中文界面</strong></li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/ed3c41c2ebb58.png" alt="zabbix_install-9.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/8465d70999d5c.png" alt="zabbix_install-10.png"></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/e7b35fdf44cb5.png" alt="zabbix_install-11.png"></p><p>到这里，Zabbix4.4就安装完成了。</p><h3 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h3><p>在zabbix设置中文显示后，监控图形的一些中文会显示乱码，这是由于linux系统无法识别造成的。</p><p>可以拷贝一份中文字体到zabbix服务的字符集目录下。</p><ul><li>在window 10系统<code>C:\Windows\Fonts</code>下随便选一个中文字体上传到zabbix-server的<code>/usr/share/zabbix/assets/fonts/</code>目录下（比如这里选用微软雅黑）</li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/3e51a22d4feba.png" alt="zabbix_install-12.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#备份原文件</span></span><br><span class="line">mv /usr/share/zabbix/assets/fonts/graphfont.ttf&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名中文字字符集文件</span></span><br><span class="line">mv msyh.ttc graphfont.ttf</span><br></pre></td></tr></table></figure><ul><li>刷新zabbix页面，对比修改前后效果</li></ul><p><strong>修改前</strong></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/bf3ce503ca864.png" alt="zabbix_install-13.png"></p><p><strong>修改后</strong></p><p><img src="https://pic-cdn.wanhebin.com/2021/05/17/5b2585f67a36d.png" alt="zabbix_install-14.png"></p>]]></content>
      
      
      <categories>
          
          <category> ZABBIX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZABBIX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Cluster 介绍与实战</title>
      <link href="posts/redis-cluster-introduction-and-actual-combat/"/>
      <url>posts/redis-cluster-introduction-and-actual-combat/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Redis-Cluster-分布式分片集群"><a href="#一、Redis-Cluster-分布式分片集群" class="headerlink" title="一、Redis Cluster 分布式分片集群"></a>一、Redis Cluster 分布式分片集群</h2><h3 id="Redis-Cluster简介"><a href="#Redis-Cluster简介" class="headerlink" title="Redis Cluster简介"></a>Redis Cluster简介</h3><ul><li><p>Redis集群是一个可以在多个Redis节点之间进行数据共享的设施（installation）。</p></li><li><p>Redis集群不支持那些需要同时处理多个键的Redis命令，因为执行这些命令需要在多个Redis节点之间移动数据，并且在高负载的情况下，这些命令将降低Redis集群的性能，并导致不可预测的行为。</p></li><li><p>Redis集群通过分区（partition）来提供一定程度的可用性（availability）：即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。</p></li><li><p>Redis集群有将数据自动切分（split）到多个节点的能力。</p></li></ul><h3 id="Redis-Cluster中槽-slot-的概念"><a href="#Redis-Cluster中槽-slot-的概念" class="headerlink" title="Redis Cluster中槽(slot)的概念"></a>Redis Cluster中槽(slot)的概念</h3><ul><li><p>Redis Cluster中一共有16384个槽位，他们的编号为0、1、2、3……16382、16383，这些槽是虚拟的。</p></li><li><p>这些槽位会平均分配给Redis Cluster中的每个master节点，当有某个key被映射到某个master负责的槽，那么这个master负责为这个key提供服务。</p></li><li><p>当需要在redis集群中写入一个key -value的时候，会使用HASH_SLOT=CRC16(key) mod 16384之后的值，决定将key写入值哪一个槽位从而决定写入哪一个Redis节点上，从而有效解决单机瓶颈。</p></li><li><p>在Redis Cluster中，只有master才拥有槽的所有权，如果是某个master的slave，这个slave只负责槽的使用，但是没有所有权。</p></li></ul><h3 id="Redis-Cluster的特点"><a href="#Redis-Cluster的特点" class="headerlink" title="Redis Cluster的特点"></a>Redis Cluster的特点</h3><ul><li>解决了redis资源利用率的问题</li><li>所有Redis节点使用(PING机制)互联</li><li>在多分片节点中，将16384个槽位，均匀分布到多个分片节点中</li><li>存数据时，将key做crc16（key），然后和16384进行取模，得出槽位值（0-16383之间）</li><li>根据计算得出的槽位值，找到相对应的分片节点的主节点，存储到相应槽位上</li><li>如果客户端当时连接的节点不是将来要存储的分片节点，分片集群会将客户端连接切换至真正存储节点进行数据存储</li><li>在搭建集群时，会为每一个分片的主节点，对应一个从节点，实现slaveof功能，同时当主节点down，实现类似于sentinel的自动failover的功能。</li></ul><h3 id="Redis-Cluster运行机制"><a href="#Redis-Cluster运行机制" class="headerlink" title="Redis Cluster运行机制"></a>Redis Cluster运行机制</h3><ul><li>所有的redis节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。</li><li>节点的fail是通过集群中超过半数的master节点检测失效时才生效。</li><li>客户端与redis节点直连，不需要中间proxy层。客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。</li><li>redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster 负责维护node&lt;-&gt;slot&lt;-&gt;key</li></ul><h3 id="Redis-Cluster故障转移"><a href="#Redis-Cluster故障转移" class="headerlink" title="Redis Cluster故障转移"></a>Redis Cluster故障转移</h3><ul><li>在集群里面，节点会对其他节点进行下线检测。</li><li>当一个主节点下线时，集群里面的其他主节点负责对下线主节点进行故障移。</li><li>换句话说，集群的节点集成了下线检测和故障转移等类似 Sentinel 的功能。</li><li>因为 Sentinel 是一个独立运行的监控程序，而集群的下线检测和故障转移等功能是集成在节点里面的，它们的运行模式非常地不同，所以尽管这两者的功能很相似，但集群的实现没有重用 Sentinel 的代码。</li></ul><p>&nbsp;</p><h2 id="二、Redis-Cluster-分布式集群搭建"><a href="#二、Redis-Cluster-分布式集群搭建" class="headerlink" title="二、Redis Cluster 分布式集群搭建"></a>二、Redis Cluster 分布式集群搭建</h2><h3 id="1-部署Redis-Cluster"><a href="#1-部署Redis-Cluster" class="headerlink" title="1.部署Redis Cluster"></a>1.部署Redis Cluster</h3><h4 id="环境规划"><a href="#环境规划" class="headerlink" title="环境规划"></a>环境规划</h4><table><thead><tr><th align="center">节点</th><th align="center">主机名</th><th align="center">IP</th><th align="center">端口</th></tr></thead><tbody><tr><td align="center">node1</td><td align="center">redis-01</td><td align="center">172.16.1.56</td><td align="center">6379, 6380</td></tr><tr><td align="center">node2</td><td align="center">redis-02</td><td align="center">172.16.1.57</td><td align="center">6379, 6380</td></tr><tr><td align="center">node3</td><td align="center">redis-03</td><td align="center">172.16.1.58</td><td align="center">6379, 6380</td></tr></tbody></table><h4 id="创建Redis工作目录"><a href="#创建Redis工作目录" class="headerlink" title="创建Redis工作目录"></a>创建Redis工作目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># mkdir -p /server/redis/&#123;6379,6380&#125;</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># mkdir -p /server/redis/&#123;6379,6380&#125;</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># mkdir -p /server/redis/&#123;6379,6380&#125;</span></span><br></pre></td></tr></table></figure><h4 id="配置每个Redis节点"><a href="#配置每个Redis节点" class="headerlink" title="配置每个Redis节点"></a>配置每个Redis节点</h4><ul><li>redis-01的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#6379实例的配置文件</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># vim /service/redis/6379/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.56 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6379/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6379/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6379&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">#6380实例的配置文件</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># vim /service/redis/6380/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.56 127.0.0.1</span><br><span class="line">port 6380</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6380/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6380/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6380&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br></pre></td></tr></table></figure><ul><li>redis-02的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#6379实例的配置文件</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># vim /service/redis/6379/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.57 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6379/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6379/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6379&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">#6380实例的配置文件</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># vim /service/redis/6380/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.57 127.0.0.1</span><br><span class="line">port 6380</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6380/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6380/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6380&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br></pre></td></tr></table></figure><ul><li>redis-03的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#6379实例的配置文件</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># vim /service/redis/6379/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.58 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6379/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6379/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6379&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">#6380实例的配置文件</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># vim /service/redis/6380/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.58 127.0.0.1</span><br><span class="line">port 6380</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6380/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6380/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6380&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br></pre></td></tr></table></figure><h4 id="启动每个节点的所有Redis实例"><a href="#启动每个节点的所有Redis实例" class="headerlink" title="启动每个节点的所有Redis实例"></a>启动每个节点的所有Redis实例</h4><ul><li>启动redis服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-server /server/redis/6379/redis.conf</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># redis-server /server/redis/6379/redis.conf</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># redis-server /server/redis/6379/redis.conf</span></span><br><span class="line"></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-server /server/redis/6380/redis.conf</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># redis-server /server/redis/6380/redis.conf</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># redis-server /server/redis/6380/redis.conf</span></span><br></pre></td></tr></table></figure><ul><li>查看端口，检查redis是否启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 6379]<span class="comment"># netstat -tln | grep -Ew &quot;6379|6380&quot;</span></span><br><span class="line">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 172.16.1.56:6379        0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 127.0.0.1:6380          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 172.16.1.56:6380        0.0.0.0:*               LISTEN </span><br></pre></td></tr></table></figure><h4 id="将所有节点加入集群"><a href="#将所有节点加入集群" class="headerlink" title="将所有节点加入集群"></a>将所有节点加入集群</h4><p>一共有node1、node2、node3这三个节点，其中每个节点有2个实例（6379、6380）。</p><ul><li>关联节点前，先查看每个redis节点信息</li></ul><p>此时所有机器集群中都只有自己一个节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">172.16.1.56:6379&gt; cluster nodes</span><br><span class="line">98d2d1e2f97607d52585ea041db4b0e90ce06769 :6379 myself,master - 0 0 0 connected</span><br></pre></td></tr></table></figure><ul><li>把所有节点加入集群（可以在任何一个redis实例中操作）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.56 6380</span><br><span class="line">OK</span><br><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.57 6379</span><br><span class="line">OK</span><br><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.57 6380</span><br><span class="line">OK</span><br><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.58 6379</span><br><span class="line">OK</span><br><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.58 6380</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>关联节点后，查看集群</li></ul><p>所有节点都成功加入了集群中，且每个节点都是master</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/352e0b2bae706.png" alt="redis_cluster-2.png"></p><h4 id="给集群中的节点做主从"><a href="#给集群中的节点做主从" class="headerlink" title="给集群中的节点做主从"></a>给集群中的节点做主从</h4><p><strong>主从规划：</strong></p><p>node1节点的6380实例作为node2节点的6379实例的从库。</p><p>node2节点的6380实例作为node3节点的6379实例的从库。</p><p>node3节点的6380实例作为node1节点的6379实例的从库。</p><p>这样任何一个节点宕机了，也能保证整个Redis Cluster 处于正常状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主节点：172.16.1.56:6379、172.16.1.57:6379、172.16.1.58:6379</span><br><span class="line">从节点：172.16.1.56:6380、172.16.1.57:6380、172.16.1.58:6380</span><br></pre></td></tr></table></figure><ul><li>给每个主节点分配从节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在redis-01上操作</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6380 -h 172.16.1.56</span></span><br><span class="line">172.16.1.56:6380&gt; cluster replicate 6af845e7ff405845605a418f976184f343764d17</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#在redis-02上操作</span></span><br><span class="line">[root@redis-02 ~]<span class="comment"># redis-cli -p 6380 -h 172.16.1.57</span></span><br><span class="line">172.16.1.57:6380&gt; cluster replicate ae875d8a949e7ad62a3f5374db9de546afb6520d</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#在redis-03上操作</span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># redis-cli -p 6380 -h 172.16.1.58</span></span><br><span class="line">172.16.1.58:6380&gt; cluster replicate 98d2d1e2f97607d52585ea041db4b0e90ce06769</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><em>注意：*</em><code>cluster replicate</code> 命令后的ID是器主库的ID号*<em>。</em></p><ul><li>主从分配成功后，查看集群</li></ul><p>集群中存在master和slave，说明主从分配完成。</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/7399754d75b38.png" alt="redis_cluster-3.png"></p><h4 id="给集群分配槽位"><a href="#给集群分配槽位" class="headerlink" title="给集群分配槽位"></a>给集群分配槽位</h4><p><strong>槽位规划：</strong></p><table><thead><tr><th>主机名</th><th>实例</th><th>槽位</th></tr></thead><tbody><tr><td>redis-01</td><td>172.16.1.56:6379</td><td>0 ~ 5460</td></tr><tr><td>redis-02</td><td>172.16.1.57:6379</td><td>5461 ~ 10921</td></tr><tr><td>redis-03</td><td>172.16.1.58:6379</td><td>10922 ~ 16383</td></tr></tbody></table><ul><li>执行命令，批量分配槽位</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 -h 172.16.1.56 cluster addslots &#123;0..5460&#125;</span></span><br><span class="line">OK</span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 -h 172.16.1.57 cluster addslots &#123;5461..10921&#125;</span></span><br><span class="line">OK</span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 -h 172.16.1.58 cluster addslots &#123;10922..16383&#125;</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><em>注意：槽位只分配给集群中的主节点</em></p><ul><li>查看槽位的分配信息</li></ul><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/e11be4826c59b.png" alt="redis_cluster-4.png"></p><ul><li>查看集群的状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">172.16.1.56:6379&gt; cluster info </span><br><span class="line">cluster_state:ok<span class="comment">#集群状态为 OK</span></span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:5</span><br><span class="line">cluster_my_epoch:3</span><br><span class="line">cluster_stats_messages_sent:22785</span><br><span class="line">cluster_stats_messages_received:22785</span><br></pre></td></tr></table></figure><p>到这里，Redis Cluster 分布式集群搭建完成。</p><h3 id="2-插入数据测试"><a href="#2-插入数据测试" class="headerlink" title="2.插入数据测试"></a>2.插入数据测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#插入一条数据，报错</span></span><br><span class="line">172.16.1.56:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">(error) MOVED 12706 172.16.1.58:6379<span class="comment">#报错：该key只能插入数据到12706槽位</span></span><br><span class="line"><span class="comment">#换一个值就可以插入</span></span><br><span class="line">172.16.1.56:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到槽位所在节点插入数据</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.58 -p 6379</span></span><br><span class="line">172.16.1.58:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用ASK协议连接，插入数据</span></span><br><span class="line">-c    启用群集模式（遵循-ASK和-MOVED重定向）</span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.56 -p 6379 -c</span></span><br><span class="line">172.16.1.56:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">-&gt; Redirected to slot [12706] located at 172.16.1.58:6379</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#大量数据插入测试</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># for i in &#123;1..10000&#125;;do redis-cli -p 6379 -h 172.16.1.56 -c set k_$&#123;i&#125; v_$&#123;i&#125;;done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看数据是否平均</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.56 -p 6379</span></span><br><span class="line">172.16.1.56:6379&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 3344</span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.57 -p 6379</span></span><br><span class="line">172.16.1.57:6379&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 3314</span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.58 -p 6379</span></span><br><span class="line">172.16.1.58:6379&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 3344</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="三、Redis-Cluster-集群管理操作（核心）"><a href="#三、Redis-Cluster-集群管理操作（核心）" class="headerlink" title="三、Redis Cluster 集群管理操作（核心）"></a>三、Redis Cluster 集群管理操作（核心）</h2><h3 id="1-安装集群管理插件"><a href="#1-安装集群管理插件" class="headerlink" title="1.安装集群管理插件"></a>1.安装集群管理插件</h3><h4 id="安装ruby插件"><a href="#安装ruby插件" class="headerlink" title="安装ruby插件"></a>安装ruby插件</h4><ul><li>安装ruby支持</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># yum install ruby rubygems -y</span></span><br></pre></td></tr></table></figure><ul><li>更换gem源</li></ul><p>查看当前的gem源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># gem source -l</span></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">http://rubygems.org/</span><br></pre></td></tr></table></figure><p>添加阿里云的gem源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># gem sources -a http://mirrors.aliyun.com/rubygems/</span></span><br><span class="line">http://mirrors.aliyun.com/rubygems/ added to <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>删除国外gem源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># gem sources  --remove https://rubygems.org/ </span></span><br><span class="line">https://rubygems.org/ removed from sources</span><br></pre></td></tr></table></figure><p>再次查看gem源，已经替换成阿里的了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># gem source -l</span></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">http://mirrors.aliyun.com/rubygems/</span><br></pre></td></tr></table></figure><ul><li>使用gem安装redis的ruby插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># gem install redis -v 3.3.3</span></span><br><span class="line">Fetching: redis-3.3.3.gem (100%)</span><br><span class="line">Successfully installed redis-3.3.3</span><br><span class="line">Parsing documentation <span class="keyword">for</span> redis-3.3.3</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> redis-3.3.3</span><br><span class="line">1 gem installed</span><br></pre></td></tr></table></figure><h4 id="ruby插件使用说明"><a href="#ruby插件使用说明" class="headerlink" title="ruby插件使用说明"></a>ruby插件使用说明</h4><p>redis的ruby插件安装好后，redis就可以使用<code>redis-trib.rb</code>命令了。</p><p><strong>命令参数说明：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb help</span></span><br><span class="line">create       <span class="comment">#创建集群</span></span><br><span class="line">check        <span class="comment">#检查集群状态</span></span><br><span class="line">info         <span class="comment">#集群信息</span></span><br><span class="line">fix          <span class="comment">#修复集群</span></span><br><span class="line">reshard      <span class="comment">#迁移槽位</span></span><br><span class="line">rebalance    <span class="comment">#平衡槽位数量</span></span><br><span class="line">add-node <span class="comment">#添加节点</span></span><br><span class="line">del-node     <span class="comment">#删除节点</span></span><br><span class="line">set-timeout  <span class="comment">#设置超时时间</span></span><br><span class="line">1call        <span class="comment">#集群中机器批量执行命令</span></span><br><span class="line">1import      <span class="comment">#导入redis数据</span></span><br></pre></td></tr></table></figure><h3 id="2-添加新节点到Redis-Cluster"><a href="#2-添加新节点到Redis-Cluster" class="headerlink" title="2.添加新节点到Redis Cluster"></a>2.添加新节点到Redis Cluster</h3><p>在另外一台机新机器上，准备两个实例。（生产环境）</p><p>这里我就不新加服务器了，直接在redis-03上再添加2个实例（ <code>172.16.1.58:6381</code> 、<code>172.16.1.58:6382</code> ）。</p><h4 id="创建实例工作目录"><a href="#创建实例工作目录" class="headerlink" title="创建实例工作目录"></a>创建实例工作目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-03 ~]<span class="comment"># mkdir -p /service/redis/63&#123;81,82&#125;</span></span><br></pre></td></tr></table></figure><h4 id="配置两个实例"><a href="#配置两个实例" class="headerlink" title="配置两个实例"></a>配置两个实例</h4><ul><li>实例6381的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-03 ~]<span class="comment"># vim /service/redis/6381/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.58 127.0.0.1</span><br><span class="line">port 6381</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6381/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6381/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6381&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br></pre></td></tr></table></figure><ul><li>实例6382的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-03 ~]<span class="comment"># vim /service/redis/6382/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.58 127.0.0.1</span><br><span class="line">port 6382</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">&quot;/service/redis/6382/redis.pid&quot;</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;/service/redis/6382/redis.log&quot;</span></span><br><span class="line">protected-mode no</span><br><span class="line">dir <span class="string">&quot;/service/redis/6382&quot;</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br></pre></td></tr></table></figure><h4 id="启动实例"><a href="#启动实例" class="headerlink" title="启动实例"></a>启动实例</h4><ul><li>启动6381和6382这2个实例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-03 ~]<span class="comment"># redis-server /service/redis/6381/redis.conf </span></span><br><span class="line">[root@redis-03 ~]<span class="comment"># redis-server /service/redis/6382/redis.conf</span></span><br></pre></td></tr></table></figure><ul><li>查看端口，检查是否启动成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-03 ~]<span class="comment"># netstat -tln | grep -Ew &quot;6381|6382&quot;</span></span><br><span class="line">tcp        0      0 127.0.0.1:6381          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 172.16.1.58:6381        0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 127.0.0.1:6382          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp        0      0 172.16.1.58:6382        0.0.0.0:*               LISTEN </span><br></pre></td></tr></table></figure><h4 id="将新节点加入到集群中"><a href="#将新节点加入到集群中" class="headerlink" title="将新节点加入到集群中"></a>将新节点加入到集群中</h4><ul><li>添加实例到集群中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.58 6381</span><br><span class="line">OK</span><br><span class="line">172.16.1.56:6379&gt; cluster meet 172.16.1.58 6382</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>查看集群</li></ul><p>6381和6382这两个实例已经加入到集群中。</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/6686e18e31e9b.png" alt="redis_cluster-5.png"></p><h4 id="给新添加的节点分配主从"><a href="#给新添加的节点分配主从" class="headerlink" title="给新添加的节点分配主从"></a>给新添加的节点分配主从</h4><p>由于原来的集群主从节点已经分配好了，现在新加入2个实例，所以这里需要稍微改动下集群中的主从规划</p><p>改动信息为：<code>172.16.1.58:6380</code> 为 <code>172.16.1.58:6381</code> 的从库，<code>172.16.1.58:6382</code> 为 <code>172.16.1.56:6379</code> 的从库。</p><ul><li>给172.16.1.58:6380指定新的主节点为172.16.1.58:6381</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.58 -p 6380</span></span><br><span class="line">172.16.1.58:6380&gt; cluster replicate fe38fef7425262fd0a98ab494d31312f4d755fc5</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>给172.16.1.58:6382指定主节点为172.16.1.56:6379</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -h 172.16.1.58 -p 6382</span></span><br><span class="line">172.16.1.58:6382&gt; cluster replicate 98d2d1e2f97607d52585ea041db4b0e90ce06769</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>主从配置好后，查看集群</li></ul><p>6381和6382已经处于主从状态了</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/7424100319883.png" alt="redis_cluster-6.png"></p><h4 id="重新给集群分配槽位"><a href="#重新给集群分配槽位" class="headerlink" title="重新给集群分配槽位"></a>重新给集群分配槽位</h4><p>新节点加入集群后，发现 <code>172.16.1.58:6381</code> 节点并没有槽位，所以这里需要给它分配槽位。</p><ul><li>重新分片</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb reshard 172.16.1.58:6381</span></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 172.16.1.58:6381)</span><br><span class="line">M: fe38fef7425262fd0a98ab494d31312f4d755fc5 172.16.1.58:6381</span><br><span class="line">   slots: (0 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 98d2d1e2f97607d52585ea041db4b0e90ce06769 172.16.1.56:6379</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: ae875d8a949e7ad62a3f5374db9de546afb6520d 172.16.1.58:6379</span><br><span class="line">   slots:10922-16383 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: b77db6765e079f5b50cbd0c168cc4d3062208b15 172.16.1.57:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ae875d8a949e7ad62a3f5374db9de546afb6520d</span><br><span class="line">S: a0e86878dc86ce6ff49aa27fa82b246adf938fd5 172.16.1.58:6382</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 98d2d1e2f97607d52585ea041db4b0e90ce06769</span><br><span class="line">S: b91bd15633fc2b1d6d00c4d4ec405c3a9c6b5863 172.16.1.58:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates fe38fef7425262fd0a98ab494d31312f4d755fc5</span><br><span class="line">S: 208c6db915517ea7424acfca94f382eb7cf254d8 172.16.1.56:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6af845e7ff405845605a418f976184f343764d17</span><br><span class="line">M: 6af845e7ff405845605a418f976184f343764d17 172.16.1.57:6379</span><br><span class="line">   slots:5461-10921 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"><span class="comment">#你想要转移多少slot(槽位)到新节点</span></span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 4096</span><br><span class="line"><span class="comment">#哪个节点接收这些槽位？ID</span></span><br><span class="line">What is the receiving node ID? fe38fef7425262fd0a98ab494d31312f4d755fc5</span><br><span class="line">Please enter all the <span class="built_in">source</span> node IDs.</span><br><span class="line">  Type <span class="string">&#x27;all&#x27;</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</span><br><span class="line">  Type <span class="string">&#x27;done&#x27;</span> once you entered all the <span class="built_in">source</span> nodes IDs.</span><br><span class="line"><span class="comment">#哪个节点接收这些槽位？ID</span></span><br><span class="line">Source node <span class="comment">#1:all</span></span><br><span class="line"><span class="comment">#是否确认分片计划?</span></span><br><span class="line">Do you want to proceed with the proposed reshard plan (yes/no)?yes</span><br></pre></td></tr></table></figure><ul><li>分片完成后，检查下槽位</li></ul><p>使用<code>redis-trib.rb</code>命令查看槽位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb info 172.16.1.58:6381</span></span><br><span class="line">172.16.1.58:6381 (fe38fef7...) -&gt; 2517 keys | 4096 slots | 1 slaves.</span><br><span class="line">172.16.1.56:6379 (98d2d1e2...) -&gt; 2498 keys | 4096 slots | 1 slaves.</span><br><span class="line">172.16.1.58:6379 (ae875d8a...) -&gt; 2502 keys | 4096 slots | 1 slaves.</span><br><span class="line">172.16.1.57:6379 (6af845e7...) -&gt; 2485 keys | 4096 slots | 1 slaves.</span><br><span class="line">[OK] 10002 keys <span class="keyword">in</span> 4 masters.</span><br><span class="line">0.61 keys per slot on average.</span><br></pre></td></tr></table></figure><p>也可以通过查看集群方式查看槽位</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/ec4ae457f27ef.png" alt="redis_cluster-7.png"></p><h3 id="3-删除Redis-Cluster中的节点"><a href="#3-删除Redis-Cluster中的节点" class="headerlink" title="3.删除Redis Cluster中的节点"></a>3.删除Redis Cluster中的节点</h3><p>删除集群中的节点，需要移除它的槽位（如果是主节）。并重新给集群分配槽位</p><h4 id="重新分片"><a href="#重新分片" class="headerlink" title="重新分片"></a>重新分片</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb reshard 172.16.1.58:6381</span></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 172.16.1.58:6381)</span><br><span class="line">M: fe38fef7425262fd0a98ab494d31312f4d755fc5 172.16.1.58:6381</span><br><span class="line">   slots:0-1364,5461-6825,10922-12287 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 98d2d1e2f97607d52585ea041db4b0e90ce06769 172.16.1.56:6379</span><br><span class="line">   slots:1365-5460 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: ae875d8a949e7ad62a3f5374db9de546afb6520d 172.16.1.58:6379</span><br><span class="line">   slots:12288-16383 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: b77db6765e079f5b50cbd0c168cc4d3062208b15 172.16.1.57:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ae875d8a949e7ad62a3f5374db9de546afb6520d</span><br><span class="line">S: a0e86878dc86ce6ff49aa27fa82b246adf938fd5 172.16.1.58:6382</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 98d2d1e2f97607d52585ea041db4b0e90ce06769</span><br><span class="line">S: b91bd15633fc2b1d6d00c4d4ec405c3a9c6b5863 172.16.1.58:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates fe38fef7425262fd0a98ab494d31312f4d755fc5</span><br><span class="line">S: 208c6db915517ea7424acfca94f382eb7cf254d8 172.16.1.56:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6af845e7ff405845605a418f976184f343764d17</span><br><span class="line">M: 6af845e7ff405845605a418f976184f343764d17 172.16.1.57:6379</span><br><span class="line">   slots:6826-10921 (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"><span class="comment">#移动多少槽位</span></span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 4096</span><br><span class="line"><span class="comment">#接收槽位的节点ID   (这里随便选择一个除6382之外的master就可以)</span></span><br><span class="line">What is the receiving node ID? 98d2d1e2f97607d52585ea041db4b0e90ce06769</span><br><span class="line">Please enter all the <span class="built_in">source</span> node IDs.</span><br><span class="line">  Type <span class="string">&#x27;all&#x27;</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</span><br><span class="line">  Type <span class="string">&#x27;done&#x27;</span> once you entered all the <span class="built_in">source</span> nodes IDs.</span><br><span class="line"><span class="comment">#源节点的ID      (这里选择172.16.1.58:6381的ID)</span></span><br><span class="line">Source node <span class="comment">#1:fe38fef7425262fd0a98ab494d31312f4d755fc5</span></span><br><span class="line"><span class="comment">#结束</span></span><br><span class="line">Source node <span class="comment">#2:done</span></span><br><span class="line"><span class="comment">#是否确认分片计划</span></span><br><span class="line">Do you want to proceed with the proposed reshard plan (yes/no)? yes</span><br></pre></td></tr></table></figure><h4 id="平衡槽位"><a href="#平衡槽位" class="headerlink" title="平衡槽位"></a>平衡槽位</h4><ul><li>平衡前，先查看槽位信息</li></ul><p>发现 <code>172.16.1.58:6381</code> 节点没有槽位</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/2580ca91fe688.png" alt="redis_cluster-8.png"></p><p>查看其他节点的槽位大小，<code>172.16.1.56:6379</code>  最大有8192个槽位，其他两个节点都是4096个槽位。</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/2faad217861ab.png" alt="redis_cluster-9.png"></p><ul><li>使用<code>redis-trib.rb rebalance</code>命令给这3个节点平均分配槽位</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb rebalance 172.16.1.56:6379</span></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 172.16.1.56:6379)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">&gt;&gt;&gt; Rebalancing across 3 nodes. Total weight = 3</span><br><span class="line">Moving 1366 slots from 172.16.1.56:6379 to 172.16.1.58:6379</span><br><span class="line"><span class="comment">############################################################################.......</span></span><br><span class="line">Moving 1365 slots from 172.16.1.56:6379 to 172.16.1.57:6379</span><br><span class="line"><span class="comment">############################################################################.......</span></span><br></pre></td></tr></table></figure><ul><li>平衡槽位后，在查看槽位大小</li></ul><p>发现这3个主节点的槽位大小基本相等了。</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/24/4c90d06218337.png" alt="redis_cluster-10.png"></p><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>先查看6381（主节点）和6382（从节点）节点的ID信息，在进行删除。</p><ul><li>查看节点状态，获取ID号</li></ul><p>主节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 cluster nodes | grep master</span></span><br><span class="line">fe38fef7425262fd0a98ab494d31312f4d755fc5 172.16.1.58:6381 master - 0 1594383787509 11 connected</span><br><span class="line">ae875d8a949e7ad62a3f5374db9de546afb6520d 172.16.1.58:6379 master - 0 1594383788516 13 connected 0-1365 12288-16383</span><br><span class="line">6af845e7ff405845605a418f976184f343764d17 172.16.1.57:6379 master - 0 1594383788516 14 connected 1366-2730 6826-10921</span><br><span class="line">98d2d1e2f97607d52585ea041db4b0e90ce06769 172.16.1.56:6379 myself,master - 0 0 12 connected 2731-6825 10922-12287</span><br></pre></td></tr></table></figure><p>从节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 cluster nodes | grep slave</span></span><br><span class="line">a0e86878dc86ce6ff49aa27fa82b246adf938fd5 172.16.1.58:6382 slave 98d2d1e2f97607d52585ea041db4b0e90ce06769 0 1594383794053 12 connected</span><br><span class="line">b91bd15633fc2b1d6d00c4d4ec405c3a9c6b5863 172.16.1.58:6380 slave 98d2d1e2f97607d52585ea041db4b0e90ce06769 0 1594383792036 12 connected</span><br><span class="line">208c6db915517ea7424acfca94f382eb7cf254d8 172.16.1.56:6380 slave 6af845e7ff405845605a418f976184f343764d17 0 1594383792539 14 connected</span><br><span class="line">b77db6765e079f5b50cbd0c168cc4d3062208b15 172.16.1.57:6380 slave ae875d8a949e7ad62a3f5374db9de546afb6520d 0 1594383794053 13 connected</span><br></pre></td></tr></table></figure><ul><li>删除172.16.1.58:6381和172.16.1.58:6382两个节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除主节点</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb del-node 172.16.1.58:6381 fe38fef7425262fd0a98ab494d31312f4d755fc5</span></span><br><span class="line">&gt;&gt;&gt; Removing node fe38fef7425262fd0a98ab494d31312f4d755fc5 from cluster 172.16.1.58:6381</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; SHUTDOWN the node.</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除从节点</span></span><br><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb del-node 172.16.1.58:6382 a0e86878dc86ce6ff49aa27fa82b246adf938fd5</span></span><br><span class="line">&gt;&gt;&gt; Removing node a0e86878dc86ce6ff49aa27fa82b246adf938fd5 from cluster 172.16.1.58:6382</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; SHUTDOWN the node.</span><br></pre></td></tr></table></figure><ul><li>查看集群，确认节点是否删除</li></ul><p>发现172.16.1.58:6381和172.16.1.58:6382两个节点已经不存在于集群中了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-cli -p 6379 cluster nodes</span></span><br><span class="line">ae875d8a949e7ad62a3f5374db9de546afb6520d 172.16.1.58:6379 master - 0 1594384104291 13 connected 0-1365 12288-16383</span><br><span class="line">6af845e7ff405845605a418f976184f343764d17 172.16.1.57:6379 master - 0 1594384103285 14 connected 1366-2730 6826-10921</span><br><span class="line">b91bd15633fc2b1d6d00c4d4ec405c3a9c6b5863 172.16.1.58:6380 slave 98d2d1e2f97607d52585ea041db4b0e90ce06769 0 1594384103788 12 connected</span><br><span class="line">208c6db915517ea7424acfca94f382eb7cf254d8 172.16.1.56:6380 slave 6af845e7ff405845605a418f976184f343764d17 0 1594384102780 14 connected</span><br><span class="line">b77db6765e079f5b50cbd0c168cc4d3062208b15 172.16.1.57:6380 slave ae875d8a949e7ad62a3f5374db9de546afb6520d 0 1594384102277 13 connected</span><br><span class="line">98d2d1e2f97607d52585ea041db4b0e90ce06769 172.16.1.56:6379 myself,master - 0 0 12 connected 2731-6825 10922-12287</span><br></pre></td></tr></table></figure><h3 id="4-修复槽位分配故障"><a href="#4-修复槽位分配故障" class="headerlink" title="4.修复槽位分配故障"></a>4.修复槽位分配故障</h3><p>再给槽位进行重新分片时，由于意外导致分片中断，这样很可能造成槽位分配失败，集群出现故障。</p><h4 id="模拟故障"><a href="#模拟故障" class="headerlink" title="模拟故障"></a>模拟故障</h4><ul><li>执行从新分片操作时，在输入yes后，Ctrl + c 强制终止</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb reshard 172.16.1.51:6379</span></span><br></pre></td></tr></table></figure><ul><li>然后使用<code>redis-trib-rb check</code>检查集群</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb check 172.16.1.51:6379</span></span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">[WARNING] Node 172.16.1.56:6379 has slots <span class="keyword">in</span> importing state (52).</span><br><span class="line">[WARNING] Node 172.16.1.58:6379 has slots <span class="keyword">in</span> migrating state (52).</span><br><span class="line">[WARNING] The following slots are open: 52</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br></pre></td></tr></table></figure><p>检查后，发现52槽位出现问题。</p><h4 id="修复故障"><a href="#修复故障" class="headerlink" title="修复故障"></a>修复故障</h4><ul><li>使用<code>redis-trib.rb fix</code>命令修复槽位</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-01 ~]<span class="comment"># redis-trib.rb fix 172.16.1.56:6379</span></span><br></pre></td></tr></table></figure><ul><li>再次检查集群，发现故障已经被修复</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 异步复制</title>
      <link href="posts/mysql-asynchronous-replication/"/>
      <url>posts/mysql-asynchronous-replication/</url>
      
        <content type="html"><![CDATA[<h3 id="一、异步复制原理"><a href="#一、异步复制原理" class="headerlink" title="一、异步复制原理"></a>一、异步复制原理</h3><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/6c8061a72a50f.jpg" alt="mysql-async-repl-arch.jpg"></p><ul><li><p>主库有一个线程：binlog dump线程。</p></li><li><p>从库有两个线程：IO线程、SQL线程。</p></li></ul><hr><h4 id="1-异步复制原理"><a href="#1-异步复制原理" class="headerlink" title="1.异步复制原理"></a>1.异步复制原理</h4><ul><li><p>用户对数据的修改进行提交，然后Master（主库）把所有数据库的变更写进binlog中，主库线程binlog dump把binlog内容推送给Slave（从库）。</p><blockquote><p><strong>注意</strong>：</p><p><em>启动复制通道后，第一次是从库告诉主库要从哪个位置点或者gtid位执行，然后主库启动一个dump线程，向从库推数据。</em></p></blockquote></li><li><p>从库I/O线程读取主库上的binlog信息，并把binlog写到本地中继日志 （relay log）中。</p></li><li><p>从库SQL线程读取并解析ralay log内容，按照主库中的提交顺序进行事务回放，写 入本地数据文件中，这样就实现了数据在主从实例之间的同步。</p></li></ul><blockquote><p><strong>注意</strong>：</p><p>主库在写入binlog并落盘之后，通知dump线程有新的 binlog 产生，并发送到从库中。然后主库并不理会从库是否接收到binlog，而是自顾自地照常进行事务的提交，如下图。</p></blockquote><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/7d39390f084f6.png" alt="mysql_async_rep.png"></p><hr><h4 id="2-异步复制过程"><a href="#2-异步复制过程" class="headerlink" title="2.异步复制过程"></a>2.异步复制过程</h4><ul><li>从库通过执行change master to 语句连接主库，提供了连接的用户一切条件（user 、password、port、ip），并且让从库知道，二进制日志的起点位置（file名 position 号）； 然后start slave启动从库线程。</li><li>从库的IO线程和主库的dump线程建立连接。</li><li>从库根据change master to 语句提供的file名和position号，IO线程向主库发起binlog的请求。</li><li>主库dump线程根据从库的请求，将本地binlog以events的方式推送给从库IO线程。</li><li>从库IO线程接收binlog events，并存放到本地relay-log中，传送过来的信息，会记录到master.info中</li><li>从库SQL线程应用relay-log，并且把应用过的记录到relay-log.info中，默认情况下，已经应用过的relay 会自动被清理purge</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master.info：用于保存从库的I/O线程连接主库的连接状态、账号、IP地址、端口、密码，以及I/O线程当前读取主库binlog的文件和位置 信息（称为I/O线程信息日志）。</span><br><span class="line"></span><br><span class="line">relay-log.info：当从库的I/O线程从主库获取 到最新的binlog事件信息后会先写入从库本地的relay <span class="built_in">log</span>中，然后SQL线程再去读取relay <span class="built_in">log</span>解析并重放。relay-log.info就是用于记录最新的 relay <span class="built_in">log</span>的文件和位置，以及SQL线程当前重放的事件对应的主库binlog的文件和位置信息 的（SQL线程位置被称为SQL线程信息日志）。</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="二、异步复制搭建"><a href="#二、异步复制搭建" class="headerlink" title="二、异步复制搭建"></a>二、异步复制搭建</h3><h4 id="1-主库配置"><a href="#1-主库配置" class="headerlink" title="1.主库配置"></a>1.主库配置</h4><p>1.1 修改主库配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip_name_resolve = ON</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">basedir = /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">datadir = /usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line">log_bin = mysql-bin<span class="comment">#开启binlog</span></span><br><span class="line">server_id = 1<span class="comment">#该参数在同一个复制架构中需要保持唯一</span></span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">socket = /tmp/mysql.sock</span><br></pre></td></tr></table></figure><p>1.2 在主库授权一个用户，用与从库连接主库‘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to rep@<span class="string">&#x27;172.16.1.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><p>1.3 查看主库的binlog信息，从库连接主库时需要用到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000002 |      326 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="2-从库配置"><a href="#2-从库配置" class="headerlink" title="2.从库配置"></a>2.从库配置</h4><p>2.1 修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip_name_resolve = ON</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">basedir = /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">datadir = /usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line">server_id = 2<span class="comment">#该参数在同一个复制架构中需要保持唯一</span></span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">socket = /tmp/mysql.sock</span><br></pre></td></tr></table></figure><p>2.2 从主库的备份同步主库数据（为了保证主库、从库数据一致，可省略）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 &lt; master.sql</span></span><br></pre></td></tr></table></figure><p>2.3 登录从库，执行change master to 语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; change master to </span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000002&#x27;</span>,</span><br><span class="line">master_log_pos=326;</span><br></pre></td></tr></table></figure><p>2.4 启动从库线程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><p>2.4 查看从库IO线程和SQL线程是否正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 -e &quot;show slave status\G&quot; | grep -Ew &quot;Slave_(IO|SQL)_Running&quot;</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="三、主从故障处理"><a href="#三、主从故障处理" class="headerlink" title="三、主从故障处理"></a>三、主从故障处理</h3><h4 id="1-IO线程故障"><a href="#1-IO线程故障" class="headerlink" title="1.IO线程故障"></a>1.IO线程故障</h4><ul><li>IO线程为Connecting状态  </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 -e &quot;show slave status\G&quot; | grep -Ew &quot;Slave_IO_Running&quot;</span></span><br><span class="line">             Slave_IO_Running: Connecting</span><br></pre></td></tr></table></figure><ul><li>IO线程为No状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 -e &quot;show slave status\G&quot; | grep -Ew &quot;Slave_IO_Running&quot;</span></span><br><span class="line">             Slave_IO_Running: No</span><br></pre></td></tr></table></figure><p><strong>出现这2种状态的故障一般有以下几种原因：</strong></p><p>1.从库与主库的网络不通</p><p>2.主库的mysql服务没有启动</p><p>3.从库在执行change master to语句时，配置有问题</p><p>4.从库在连接主库的数据库时，IP被反向解析成了主机名</p><p>5.开启了防火墙，并未对mysql服务、端口放行</p><h4 id="2-SQL线程故障"><a href="#2-SQL线程故障" class="headerlink" title="2.SQL线程故障"></a>2.SQL线程故障</h4><ul><li>SQL线程为No状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 -e &quot;show slave status\G&quot; | grep -Ew &quot;Slave_SQL_Running&quot;</span></span><br><span class="line">            Slave_SQL_Running: No</span><br></pre></td></tr></table></figure><p><strong>SQL线程出现故障的原因一般都是主库和从库数据不一致：</strong></p><p>1.主库有数据，从库没有<br>2.从库有数据，主库没有<br>3.主库与从库数据库结构不一致</p><p><strong>SQL线程故障解决方法：</strong></p><p><strong>方法一</strong>：让从库跳过下一个event记录</p><p>1.停止从库SQL线程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; stop slave sql_thread;</span><br></pre></td></tr></table></figure><p>2.跳过下一个event记录（错误的event）</p><p>若有N个错的的events，可以跳过N个events</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global sql_slave_skip_counter=1;</span><br></pre></td></tr></table></figure><p>3.启动SQL线程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave sql_thread;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：跳过错误代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">slave_skip_errors=1107,1032,1062</span><br></pre></td></tr></table></figure><p><strong>方法三</strong>：重新同步主库数据、重做从库（同步数据前，从库环境要纯净）</p><p>&nbsp;</p><h3 id="四、延时从库"><a href="#四、延时从库" class="headerlink" title="四、延时从库"></a>四、延时从库</h3><h4 id="1-对已经为从库的数据库做延时从库"><a href="#1-对已经为从库的数据库做延时从库" class="headerlink" title="1.对已经为从库的数据库做延时从库"></a>1.对已经为从库的数据库做延时从库</h4><ul><li>停止从库的IO、SQL线程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; stop slave;</span><br></pre></td></tr></table></figure><ul><li>执行change master to 语句，配置延迟从库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to master_delay=3600;</span><br></pre></td></tr></table></figure><ul><li>启动从库线程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><ul><li>查看从库的状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">                    SQL_Delay: 3600<span class="comment">#延时从库延时的时间</span></span><br><span class="line">          SQL_Remaining_Delay: NULL <span class="comment">#执行语句倒计时，如果主库没有操作，为NULL</span></span><br></pre></td></tr></table></figure><h4 id="2-对新数据配置延迟从库"><a href="#2-对新数据配置延迟从库" class="headerlink" title="2.对新数据配置延迟从库"></a>2.对新数据配置延迟从库</h4><ul><li>修改配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">server_id=3</span><br></pre></td></tr></table></figure><ul><li>从主库的备份同步主库数据（为了保证主库、从库数据一致，可省略）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mysql -uroot -p123 &lt; master.sql</span></span><br></pre></td></tr></table></figure><ul><li>在从库执行change master to 语句，配置延迟从库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; change master to </span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000002&#x27;</span>,</span><br><span class="line">master_log_pos=326,</span><br><span class="line">master_delay=3600;</span><br></pre></td></tr></table></figure><ul><li>启动从库线程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><ul><li>查看从库的状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">                    SQL_Delay: 3600<span class="comment">#延时从库延时的时间</span></span><br><span class="line">          SQL_Remaining_Delay: NULL <span class="comment">#执行语句倒计时，如果主库没有操作，为NULL</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="五、过滤复制"><a href="#五、过滤复制" class="headerlink" title="五、过滤复制"></a>五、过滤复制</h3><p>过滤复制其实就是在从库或者主库，配置白名单、黑名单，只针对某些库、表进行复制。</p><h4 id="1-过滤复制的方式"><a href="#1-过滤复制的方式" class="headerlink" title="1.过滤复制的方式"></a>1.过滤复制的方式</h4><ul><li><strong>白名单：只执行白名单中列出的库或者表的binlog</strong></li></ul><p>配置方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只同步test1库</span></span><br><span class="line">replicate_do_db=test1</span><br><span class="line"><span class="comment">#只同步test1库下面的tb1表</span></span><br><span class="line">replicate_do_table=test1.tb1</span><br><span class="line"><span class="comment">#同步test1库下面的t开头的所有表（支持通配符）</span></span><br><span class="line">replicate_wild_do_table=test.t*</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果需要同步多个库，则可以用逗号隔开，如：test1,test2,test3</span></span><br><span class="line"><span class="comment">#也可以写多条配置。</span></span><br></pre></td></tr></table></figure><ul><li><strong>黑名单：不执行黑名单中列出的库或者表的binlog</strong></li></ul><p>配置方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不同步test2库</span></span><br><span class="line">replicate_ignore_db=test2</span><br><span class="line"><span class="comment">#不同步test2库下面的tb2表</span></span><br><span class="line">replicate_ignore_table=test2.tb2</span><br><span class="line"><span class="comment">#不同步test2库下面的t开头的所有表（支持通配符）</span></span><br><span class="line">replicate_wild_ignore_table=test2.t*</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果需要指定多个库，则可以用逗号隔开，如：test1,test2,test3</span></span><br><span class="line"><span class="comment">#也可以写多条配置。</span></span><br></pre></td></tr></table></figure><h4 id="2-在主库配置过滤复制"><a href="#2-在主库配置过滤复制" class="headerlink" title="2.在主库配置过滤复制"></a>2.在主库配置过滤复制</h4><p>在主库配置过滤复制后，从库的IO线程只会读取主库的白名单内或黑名单外的库或表的binlog（即：主库的dump线程只会推送白名单内或黑名单外的表库的binlog给从库）。</p><ul><li>给主库配置白名单</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">replicate_do_db=yxlm</span><br></pre></td></tr></table></figure><p>保存并重启数据库</p><ul><li>查看主库状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000007 |      120 | yxlm         |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>在Binlog_Do_DB看到只同步yxlm库.</p><p>在数据中新建一些库、表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table yxlm.hsmg(id int);</span><br><span class="line">mysql&gt; create database db_test1;</span><br><span class="line">mysql&gt; create database db_test2;</span><br></pre></td></tr></table></figure><ul><li>去从库查看数据库信息</li></ul><p>看到在主库执行的三条语句当中，只有第一条同步了过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">| yxlm               |</span><br><span class="line">+--------------------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use yxlm</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_yxlm |</span><br><span class="line">+----------------+</span><br><span class="line">| hsmg           |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>查看从库中继日志：</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/39963800c6c0e.png" alt="mysql_master_slave-1.png">从中继日志中，确实发现只记录了<code>create table yxlm.hsmg(id int)</code>语句。</p><h4 id="3-在从库配置过滤复制"><a href="#3-在从库配置过滤复制" class="headerlink" title="3.在从库配置过滤复制"></a>3.在从库配置过滤复制</h4><p>在从库配置过滤复制后，从库的IO线程会读取主库的白名单内或黑名单外的所有库或表的binlog，但是从库的SQL线程只执行白名单内或黑名单外的所有库或表的binlog。</p><ul><li>在主库创建几个新库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database jdqs;</span><br><span class="line">mysql&gt; create database lol;</span><br></pre></td></tr></table></figure><ul><li>给从库配置白名单</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">replicate_do_db=jdqs,lol</span><br></pre></td></tr></table></figure><p>查看从库的主从状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: jdqs,lol</span><br></pre></td></tr></table></figure><ul><li>再次在主库创建一些库和表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table jdqs.yafu(id int);</span><br><span class="line">mysql&gt; create table lol.cjzd(id int);</span><br><span class="line">mysql&gt; create database new_test1;</span><br><span class="line">mysql&gt; create database new_test2;</span><br></pre></td></tr></table></figure><p>查看从库数据库信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| jdqs               |</span><br><span class="line">| lol                |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use lol</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+---------------+</span><br><span class="line">| Tables_in_lol |</span><br><span class="line">+---------------+</span><br><span class="line">| hsmg          |</span><br><span class="line">+---------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use jdqs</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_jdqs |</span><br><span class="line">+----------------+</span><br><span class="line">| yafu           |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>从结果来看，new_test1库和new_test2库并没有创建。</p><p>在查看下从库的binlog日志：</p><p><img src="https://pic-cdn.wanhebin.com/2021/05/23/8b74647e5b35a.png" alt="mysql_master_slave-2.png"></p><p>发现在主库执行的4条SQL，从库中继日志中都记录了下来。</p><p>但因为在从库设置了白名单，所以SQL线程只重写了前2行SQL命令。</p><h4 id="4-过滤复制总结"><a href="#4-过滤复制总结" class="headerlink" title="4.过滤复制总结"></a>4.过滤复制总结</h4><ul><li><strong>在主库配置时：</strong></li></ul><p>1.配置白名单：主库只将白名单配置的库相关语句记录到binlog<br>2.配置黑名单：主库只不记录黑名单配置的库相关语句到binlog</p><ul><li><strong>在从库配置时：</strong></li></ul><p>1.配置白名单：IO线程将主库数据拿到relay-log，但是SQL线程只执行白名单设置的库相关语句<br>2.配置黑名单：IO线程将主库数据拿到relay-log，但是SQL线程不执行黑名单设置的库相关语句</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 高可用架构之 MHA</title>
      <link href="posts/mysql-high-availability-architecture-mha/"/>
      <url>posts/mysql-high-availability-architecture-mha/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MHA高可用介绍"><a href="#一、MHA高可用介绍" class="headerlink" title="一、MHA高可用介绍"></a>一、MHA高可用介绍</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>​        MHA（Master HA）是一款开源的MySQL的高可用程序，它为MySQL主从复制架构提供了automating master failover 功能。MHA在监控到master节点故障时，会提升其中拥有最新数据的slave节点成为新的master节点，在此期间，MHA会通过与其它从节点获取额外信息来避免一致性方面的问题。MHA还提供了master节点的在线切换功能，即按需切换master/slave节点。</p><p>​        MHA 是由日本人 yoshinorim（原就职于DeNA现就职于FaceBook）开发的比较成熟的 MySQL 高可用方案。MHA 能够在30秒内实现故障切换，并能在故障切换中，最大可能的保证数据一致性。目前淘宝也正在开发相似产品 TMHA， 目前已支持一主一从。</p><h3 id="2-MHA工作原理"><a href="#2-MHA工作原理" class="headerlink" title="2.MHA工作原理"></a>2.MHA工作原理</h3><p>​        当Master出现故障时，通过对比slave之间I/O线程读取master binlog的位置，选取最接近的slave做为 latest slave。 其它slave通过与latest slave对比生成差异中继日志。在latest slave上应用从master保存的binlog，同时将latest slave提升为master。最后在其它slave上应用相应的差异中继日志并开始从新的master开始复制。<br>在MHA实现Master故障切换过程中，MHA Node会试图访问故障的master（通过SSH），如果可以访问（不是硬件故障，比如InnoDB数据文件损坏等），会保存二进制文件，以最大程度保 证数据不丢失。MHA和半同步复制一起使用会大大降低数据丢失的危险。</p><p><img src="https://pic-cdn.wanhebin.com/2021/04/25/7d5a1a7258ce1.jpg" alt="mysql_mha_principle.jpg"></p><p>MHA工作原理总结为以下几条：<br>（1） 从宕机崩溃的 master 保存二进制日志事件（binlog events）；<br>（2） 识别含有最新更新的 slave ；<br>（3） 应用差异的中继日志(relay log) 到其他 slave ；<br>（4） 应用从 master 保存的二进制日志事件(binlog events)；<br>（5） 提升一个 slave 为新 master ；<br>（6） 使用其他的 slave 连接新的 master 进行复制。</p><p>&nbsp;</p><h2 id="二、MHA高可用架构"><a href="#二、MHA高可用架构" class="headerlink" title="二、MHA高可用架构"></a>二、MHA高可用架构</h2><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><ul><li>MHA是C/S架构</li><li>整个MHA集群中所有服务器都要安装node节点</li><li>manager可以装在集群或者集群外任意一台机器上</li><li>manager尽量不要与master装在一台服务器上</li><li>一个MHA的manager可以管理多套集群，只要配置多个配置文件启动即可</li><li>MHA可以在主从运行中添加</li><li>MHA通过ssh管理node节点，一点要在集群中做免密登录</li><li>manager监控主库的node节点，查看是否存活，指挥从库的node节点会在切换主库是发送一些指令</li></ul><h3 id="2-MHA优点总结"><a href="#2-MHA优点总结" class="headerlink" title="2.MHA优点总结"></a>2.MHA优点总结</h3><ol><li><p>Masterfailover and slave promotion can be done very quickly.</p><p>自动故障转移快。</p></li><li><p>Mastercrash does not result in data inconsistency.</p><p>主库崩溃不存在数据一致性问题。</p></li><li><p>Noneed to modify current MySQL settings (MHA works with regular MySQL).</p><p>不需要对当前mysql环境做重大修改。</p></li><li><p>Noneed to increase lots of servers.</p><p>不需要添加额外的服务器(仅一台manager就可管理上百个replication)。</p></li><li><p>Noperformance penalty.</p><p>性能优秀，可工作在半同步复制和异步复制，当监控mysql状态时，仅需要每隔N秒向master发送ping包(默认3秒)，所以对性能无影响。你可以理解为MHA的性能和简单的主从复制框架性能一样。</p></li><li><p>Works with any storage engine.</p><p>只要replication支持的存储引擎，MHA 都支持，不会局限于InnoDB。</p></li></ol><p>&nbsp;</p><h2 id="三、MHA工具介绍"><a href="#三、MHA工具介绍" class="headerlink" title="三、MHA工具介绍"></a>三、MHA工具介绍</h2><p>MHA高可用架构是由manager、node这2款工具实现的。</p><h3 id="1-manager相关工具"><a href="#1-manager相关工具" class="headerlink" title="1.manager相关工具"></a>1.manager相关工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># tar xf mha4mysql-manager-0.56.tar.gz</span></span><br><span class="line">[root@db01 ~]<span class="comment"># ll mha4mysql-manager-0.56/bin/</span></span><br><span class="line"><span class="comment">#检查主从复制</span></span><br><span class="line">masterha_check_repl</span><br><span class="line"><span class="comment">#检查ssh，检查能否免密登录</span></span><br><span class="line">masterha_check_ssh</span><br><span class="line"><span class="comment">#检查MHA状态</span></span><br><span class="line">masterha_check_status</span><br><span class="line"><span class="comment">#配置主机信息(MHA切换过程中，删除到配置文件中故障的主库)</span></span><br><span class="line">masterha_conf_host</span><br><span class="line">    [server2]</span><br><span class="line">    hostname=172.16.1.52</span><br><span class="line">    port=3306</span><br><span class="line">    [server3]</span><br><span class="line">    hostname=172.16.1.53</span><br><span class="line">    port=3306</span><br><span class="line"><span class="comment">#manager启动程序</span></span><br><span class="line">masterha_manager</span><br><span class="line"><span class="comment">#监控主库是否存活</span></span><br><span class="line">masterha_master_monitor</span><br><span class="line"><span class="comment">#切换主库</span></span><br><span class="line">masterha_master_switch</span><br><span class="line"><span class="comment">#建立连接</span></span><br><span class="line">masterha_secondary_check</span><br><span class="line"><span class="comment">#停止的工具</span></span><br><span class="line">masterha_stop</span><br><span class="line"></span><br><span class="line">-----------------我们使用的工具--------------------</span><br><span class="line">masterha_check_repl</span><br><span class="line">masterha_check_ssh</span><br><span class="line">masterha_manager</span><br><span class="line">masterha_stop</span><br></pre></td></tr></table></figure><h3 id="2-node相关工具"><a href="#2-node相关工具" class="headerlink" title="2.node相关工具"></a>2.node相关工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># tar xf mha4mysql-node-0.56.tar.gz</span></span><br><span class="line">[root@db01 ~]<span class="comment"># ll mha4mysql-node-0.56/bin/</span></span><br><span class="line"><span class="comment">#对比中继日志</span></span><br><span class="line">apply_diff_relay_logs</span><br><span class="line"><span class="comment">#防止binlog回滚</span></span><br><span class="line">filter_mysqlbinlog</span><br><span class="line"><span class="comment">#删除relay-log#关闭自动删除relay-log的功能</span></span><br><span class="line">purge_relay_logs</span><br><span class="line"><span class="comment">#保存binlog日志</span></span><br><span class="line">save_binary_logs</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="四、MHA高可用架构搭建"><a href="#四、MHA高可用架构搭建" class="headerlink" title="四、MHA高可用架构搭建"></a>四、MHA高可用架构搭建</h2><p>在搭建MHA高可用前，需要搭建好MySQL的主从复制，可以是普通的异步复制、半同步复制、基于GTID的主从复制。本文以基于GTID主从复制为例，搭建MHA高可用架构。</p><h3 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1.准备环境"></a>1.准备环境</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>角色</th></tr></thead><tbody><tr><td>db01</td><td>172.16.1.51</td><td>master</td></tr><tr><td>db02</td><td>172.16.1.52</td><td>slave1、candidate_master</td></tr><tr><td>db03</td><td>172.16.1.53</td><td>slave2、manager</td></tr></tbody></table><h3 id="2-修改数据库配置文件"><a href="#2-修改数据库配置文件" class="headerlink" title="2.修改数据库配置文件"></a>2.修改数据库配置文件</h3><p>这些配置包含了GTID模式主从复制、MHA的必要配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主库db01配置文件</span></span><br><span class="line">[root@db01 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip_name_resolve=ON</span><br><span class="line">server_id=1</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">relay_log=relay-log</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">log_slave_updates=ON </span><br><span class="line">relay_log_purge=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#从库db02配置文件</span></span><br><span class="line">[root@db02 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip_name_resolve=ON</span><br><span class="line">server_id=2</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">relay_log=relay-log</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">log_slave_updates=ON</span><br><span class="line">relay_log_purge=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#从库db03配置文件</span></span><br><span class="line">[root@db03 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">skip_name_resolve=ON</span><br><span class="line">server_id=3</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">relay_log=relay-log</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">log_slave_updates=ON</span><br><span class="line">relay_log_purge=0</span><br></pre></td></tr></table></figure><blockquote><p><strong>log_slave_updates=ON和relay_log_purge=0</strong></p></blockquote><ul><li><p>log_slave_updates=ON，让从库也记录binlog日志</p></li><li><p>relay_log_purge=0，关闭中继日志自动删除</p></li></ul><h3 id="3-配置基于GTID的主从复制"><a href="#3-配置基于GTID的主从复制" class="headerlink" title="3.配置基于GTID的主从复制"></a>3.配置基于GTID的主从复制</h3><p>配置GTID的主从复制，需要开启GTID模式，主要要加入<code>gtid_mode=ON</code>、<code>enforce_gtid_consistency=ON</code>和<code> log_slave_updates=ON</code>这三行配置。</p><p>关于GTID的详细介绍可以参考这篇文章<a href="https://www.wanhebin.com/database/mysql/734.html">https://www.wanhebin.com/database/mysql/734.html</a></p><h4 id="3-1-主库操作"><a href="#3-1-主库操作" class="headerlink" title="3.1 主库操作"></a>3.1 主库操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to rep@<span class="string">&#x27;172.16.1.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="3-2-从库操作"><a href="#3-2-从库操作" class="headerlink" title="3.2 从库操作"></a>3.2 从库操作</h4><ul><li>执行change master to 语句</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to </span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_auto_position=1;</span><br></pre></td></tr></table></figure><ul><li>启动从库线程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><h3 id="4-部署MHA"><a href="#4-部署MHA" class="headerlink" title="4.部署MHA"></a>4.部署MHA</h3><p>在部署MHA之前，需要先满足以下条件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 从库是否开启了binlog</span><br><span class="line">- 从库是否配置了binlog保存（log-slave-updates）</span><br><span class="line">- 复制架构中server_id要唯一</span><br><span class="line">- 主库与从库数据的一致性</span><br><span class="line">- 所有节点都要创建主从用户</span><br><span class="line">- 配置relay-log不自动删除（relay_log_purge=0）</span><br></pre></td></tr></table></figure><h4 id="4-1-安装依赖环境"><a href="#4-1-安装依赖环境" class="headerlink" title="4.1 安装依赖环境"></a>4.1 安装依赖环境</h4><ul><li>node节点安装依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install perl-DBD-MySQL -y</span><br></pre></td></tr></table></figure><ul><li>manager节点安装依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y perl-Config-Tiny epel-release perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes</span><br></pre></td></tr></table></figure><h4 id="4-2-下载安装MHA的node和manager软件工具"><a href="#4-2-下载安装MHA的node和manager软件工具" class="headerlink" title="4.2 下载安装MHA的node和manager软件工具"></a>4.2 下载安装MHA的node和manager软件工具</h4><p>MHA 的软件包可以去 <a href="https://github.com/yoshinorim/mha4mysql-manager/wiki/Downloads">Github</a> 下载。</p><ul><li>在整个复制架构中的所有服务器安装mha4mysql-node工具</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall -y mha4mysql-node-0.56-0.el6.noarch.rpm  </span><br></pre></td></tr></table></figure><ul><li>在manager节点安装mha4mysql-manager工具</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall -y mha4mysql-manager-0.56-0.el6.noarch.rpm </span><br></pre></td></tr></table></figure><h4 id="4-3-在主库上创建一个MHA的管理用户"><a href="#4-3-在主库上创建一个MHA的管理用户" class="headerlink" title="4.3 在主库上创建一个MHA的管理用户"></a>4.3 在主库上创建一个MHA的管理用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to mhaadmin@<span class="string">&#x27;172.16.1.%&#x27;</span> identified by <span class="string">&#x27;mhapass&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="4-4-配置三台机器的ssh免密互信（三台都要操作）"><a href="#4-4-配置三台机器的ssh免密互信（三台都要操作）" class="headerlink" title="4.4 配置三台机器的ssh免密互信（三台都要操作）"></a>4.4 配置三台机器的ssh免密互信（三台都要操作）</h4><p>方法一：执行命令实现ssh互信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.16.1.51</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.16.1.52</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.16.1.53</span><br></pre></td></tr></table></figure><p>方法二：使用免密脚本ssh-key.sh实现ssh互信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#下载安装sshpass命令</span></span><br><span class="line">yum install -y sshpass &amp;&gt; /dev/null</span><br><span class="line"><span class="comment">#生成ssh-key秘钥</span></span><br><span class="line">ssh-keygen -t rsa -f /root/.ssh/id_rsa -P <span class="string">&quot;&quot;</span> -q &amp;&amp;\</span><br><span class="line"><span class="comment">#免密推送秘钥给其他几台服务器(db01,db02,db03)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;51..53&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">sshpass -p1  ssh-copy-id -i /root/.ssh/id_rsa.pub -o StrictHostKeyChecking=no root@172.16.1.<span class="variable">$&#123;i&#125;</span> &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="4-5-配置MHA配置文件"><a href="#4-5-配置MHA配置文件" class="headerlink" title="4.5 配置MHA配置文件"></a>4.5 配置MHA配置文件</h4><ul><li>创建mha相关目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /service/mha/&#123;app1,scripts&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># vim /etc/mha/app1.cnf</span></span><br><span class="line">[server default]</span><br><span class="line"><span class="comment">#设置manager的日志</span></span><br><span class="line">manager_log=/service/mha/app1/manager.log</span><br><span class="line"><span class="comment">#设置manager的工作目录</span></span><br><span class="line">manager_workdir=/service/mha/app1</span><br><span class="line"><span class="comment">#设置master 保存binlog的位置</span></span><br><span class="line">master_binlog_dir=/usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line"><span class="comment">#设置自动failover时候的切换脚本</span></span><br><span class="line">master_ip_failover_script=/service/mha/scripts/master_ip_failover</span><br><span class="line"><span class="comment">#设置手动切换时候的切换脚本</span></span><br><span class="line">master_ip_online_change_script=/service/mha/scripts/master_ip_online_change</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置mha管理用户名</span></span><br><span class="line">user=mhaadmin</span><br><span class="line"><span class="comment">#设置mha管理用户密码</span></span><br><span class="line">password=mhapass</span><br><span class="line"><span class="comment">#设置复制环境中的复制用户名</span></span><br><span class="line">repl_user=rep</span><br><span class="line">repl_password=123</span><br><span class="line"><span class="comment">#设置免密登录用户</span></span><br><span class="line">ssh_user=root</span><br><span class="line"><span class="comment">#发送ping包的时间间隔</span></span><br><span class="line">ping_interval=2</span><br><span class="line"></span><br><span class="line">[server1]</span><br><span class="line">hostname=172.16.1.51</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">[server2]</span><br><span class="line">hostname=172.16.1.52</span><br><span class="line">port=3306</span><br><span class="line"><span class="comment">#设置为候选master，如果设置该参数以后，发生主从切换以后将会将此从库提升为主库</span></span><br><span class="line">candidate_master=1</span><br><span class="line"><span class="comment">#默认情况下如果一个slave落后master 100M的relay logs的话，MHA将不会选择该slave作为一个新的master，因为对于这个slave的恢复需要花费很长时间，通过设置check_repl_delay=0,MHA触发切换在选择一个新的master的时候将会忽略复制延时，这个参数对于设置了candidate_master=1的主机非常有用，因为这个候选主在切换的过程中一定是新的master</span></span><br><span class="line">check_repl_delay=0</span><br><span class="line"></span><br><span class="line">[server3]</span><br><span class="line">hostname=172.16.1.53</span><br><span class="line">port=3306</span><br></pre></td></tr></table></figure><h4 id="4-6-配置VIP漂移脚本（manager节点）"><a href="#4-6-配置VIP漂移脚本（manager节点）" class="headerlink" title="4.6 配置VIP漂移脚本（manager节点）"></a>4.6 配置VIP漂移脚本（manager节点）</h4><ul><li>自动failover脚本  <code>/service/mha/scripts/master_ip_failover</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env perl</span></span><br><span class="line"></span><br><span class="line">use strict;</span><br><span class="line">use warnings FATAL =&gt; <span class="string">&#x27;all&#x27;</span>;</span><br><span class="line"></span><br><span class="line">use Getopt::Long;</span><br><span class="line"></span><br><span class="line">my (</span><br><span class="line">    <span class="variable">$command</span>,          <span class="variable">$ssh_user</span>,        <span class="variable">$orig_master_host</span>, <span class="variable">$orig_master_ip</span>,</span><br><span class="line">    <span class="variable">$orig_master_port</span>, <span class="variable">$new_master_host</span>, <span class="variable">$new_master_ip</span>,    <span class="variable">$new_master_port</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">my <span class="variable">$vip</span> = <span class="string">&#x27;172.16.1.59/24&#x27;</span>;</span><br><span class="line">my <span class="variable">$key</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">my <span class="variable">$ssh_start_vip</span> = <span class="string">&quot;/sbin/ifconfig eth1:<span class="variable">$key</span> <span class="variable">$vip</span>&quot;</span>;</span><br><span class="line">my <span class="variable">$ssh_stop_vip</span> = <span class="string">&quot;/sbin/ifconfig eth1:<span class="variable">$key</span> down&quot;</span>;</span><br><span class="line"></span><br><span class="line">GetOptions(</span><br><span class="line">    <span class="string">&#x27;command=s&#x27;</span>          =&gt; \<span class="variable">$command</span>,</span><br><span class="line">    <span class="string">&#x27;ssh_user=s&#x27;</span>         =&gt; \<span class="variable">$ssh_user</span>,</span><br><span class="line">    <span class="string">&#x27;orig_master_host=s&#x27;</span> =&gt; \<span class="variable">$orig_master_host</span>,</span><br><span class="line">    <span class="string">&#x27;orig_master_ip=s&#x27;</span>   =&gt; \<span class="variable">$orig_master_ip</span>,</span><br><span class="line">    <span class="string">&#x27;orig_master_port=i&#x27;</span> =&gt; \<span class="variable">$orig_master_port</span>,</span><br><span class="line">    <span class="string">&#x27;new_master_host=s&#x27;</span>  =&gt; \<span class="variable">$new_master_host</span>,</span><br><span class="line">    <span class="string">&#x27;new_master_ip=s&#x27;</span>    =&gt; \<span class="variable">$new_master_ip</span>,</span><br><span class="line">    <span class="string">&#x27;new_master_port=i&#x27;</span>  =&gt; \<span class="variable">$new_master_port</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> &amp;main();</span><br><span class="line"></span><br><span class="line">sub main &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;\n\nIN SCRIPT TEST====<span class="variable">$ssh_stop_vip</span>==<span class="variable">$ssh_start_vip</span>===\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$command</span> eq <span class="string">&quot;stop&quot;</span> || <span class="variable">$command</span> eq <span class="string">&quot;stopssh&quot;</span> ) &#123;</span><br><span class="line"></span><br><span class="line">        my <span class="variable">$exit_code</span> = 1;</span><br><span class="line">        <span class="built_in">eval</span> &#123;</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Disabling the VIP on old master: <span class="variable">$orig_master_host</span> \n&quot;</span>;</span><br><span class="line">            &amp;stop_vip();</span><br><span class="line">            <span class="variable">$exit_code</span> = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$@</span>) &#123;</span><br><span class="line">            warn <span class="string">&quot;Got Error: <span class="variable">$@</span>\n&quot;</span>;</span><br><span class="line">            <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    elsif ( <span class="variable">$command</span> eq <span class="string">&quot;start&quot;</span> ) &#123;</span><br><span class="line"></span><br><span class="line">        my <span class="variable">$exit_code</span> = 10;</span><br><span class="line">        <span class="built_in">eval</span> &#123;</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Enabling the VIP - <span class="variable">$vip</span> on the new master - <span class="variable">$new_master_host</span> \n&quot;</span>;</span><br><span class="line">            &amp;start_vip();</span><br><span class="line">            <span class="variable">$exit_code</span> = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$@</span>) &#123;</span><br><span class="line">            warn <span class="variable">$@</span>;</span><br><span class="line">            <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span> <span class="variable">$exit_code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    elsif ( <span class="variable">$command</span> eq <span class="string">&quot;status&quot;</span> ) &#123;</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Checking the Status of the script.. OK \n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        &amp;usage();</span><br><span class="line">        <span class="built_in">exit</span> 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub <span class="function"><span class="title">start_vip</span></span>() &#123;</span><br><span class="line">    `ssh <span class="variable">$ssh_user</span>\@<span class="variable">$new_master_host</span> \&quot; <span class="variable">$ssh_start_vip</span> \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line">sub <span class="function"><span class="title">stop_vip</span></span>() &#123;</span><br><span class="line">     <span class="built_in">return</span> 0  unless  (<span class="variable">$ssh_user</span>);</span><br><span class="line">    `ssh <span class="variable">$ssh_user</span>\@<span class="variable">$orig_master_host</span> \&quot; <span class="variable">$ssh_stop_vip</span> \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub usage &#123;</span><br><span class="line">    <span class="built_in">print</span></span><br><span class="line">    <span class="string">&quot;Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>手动 failover脚本<code>/service/mha/scripts/master_ip_online_change</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> /root/.bash_profile</span><br><span class="line">vip=`<span class="built_in">echo</span> <span class="string">&#x27;172.16.1.59/24&#x27;</span>`  <span class="comment">#设置VIP</span></span><br><span class="line">key=`<span class="built_in">echo</span> <span class="string">&#x27;1&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span>=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> | awk -F = <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">orig_master_host=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$2</span>&quot;</span> | awk -F = <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">new_master_host=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$7</span>&quot;</span> | awk -F = <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">orig_master_ssh_user=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;12&#125;</span>&quot;</span> | awk -F = <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">new_master_ssh_user=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;13&#125;</span>&quot;</span> | awk -F = <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#要求服务的网卡识别名一样，都为eth1(这里是)</span></span><br><span class="line">stop_vip=`<span class="built_in">echo</span> <span class="string">&quot;ssh root@<span class="variable">$orig_master_host</span> /usr/sbin/ifconfig eth1:<span class="variable">$key</span> down&quot;</span>`</span><br><span class="line">start_vip=`<span class="built_in">echo</span> <span class="string">&quot;ssh root@<span class="variable">$new_master_host</span> /usr/sbin/ifconfig eth1:<span class="variable">$key</span> <span class="variable">$vip</span>&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$command</span> = <span class="string">&#x27;stop&#x27;</span> ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n\n\n****************************\n&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> -e <span class="string">&quot;Disabled thi VIP - <span class="variable">$vip</span> on old master: <span class="variable">$orig_master_host</span> \n&quot;</span></span><br><span class="line">   <span class="variable">$stop_vip</span></span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">     <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Disabled the VIP successfully&quot;</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Disabled the VIP failed&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;***************************\n\n\n&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$command</span> = <span class="string">&#x27;start&#x27;</span> -o <span class="variable">$command</span> = <span class="string">&#x27;status&#x27;</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n\n\n*************************\n&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;Enabling the VIP - <span class="variable">$vip</span> on new master: <span class="variable">$new_master_host</span> \n&quot;</span></span><br><span class="line">    <span class="variable">$start_vip</span></span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Enabled the VIP successfully&quot;</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Enabled the VIP failed&quot;</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   <span class="built_in">echo</span> -e <span class="string">&quot;***************************\n\n\n&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>给脚本添加执行权限</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /service/mha/scripts/master_ip_failover </span><br><span class="line">chmod +x /service/mha/scripts/master_ip_online_change</span><br></pre></td></tr></table></figure><h4 id="4-7-启动前验证MHA"><a href="#4-7-启动前验证MHA" class="headerlink" title="4.7 启动前验证MHA"></a>4.7 启动前验证MHA</h4><ul><li>通过 masterha_check_ssh 验证 ssh 信任登录是否成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># masterha_check_ssh --conf=/service/mha/app1.cnf</span></span><br><span class="line">Wed Apr 16 23:17:58 2020 -  All SSH connection tests passed successfully.<span class="comment">#表示所有都成功</span></span><br></pre></td></tr></table></figure><ul><li>通过 masterha_check_repl 验证 mysql 主从复制是否成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># masterha_check_repl --conf=/service/mha/app1.cnf</span></span><br><span class="line">MySQL Replication Health is OK.<span class="comment">#表示所有都成功</span></span><br></pre></td></tr></table></figure><h4 id="4-8-启动MHA"><a href="#4-8-启动MHA" class="headerlink" title="4.8 启动MHA"></a>4.8 启动MHA</h4><ul><li>第一次启动，先在master上手动绑定vip，以后会自动切换</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># /usr/sbin/ifconfig eth1:1 172.16.1.59/24</span></span><br></pre></td></tr></table></figure><ul><li>启动命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># nohup masterha_manager --conf=/service/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /service/mha/manager.log 2&gt;&amp;1 &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#选项说明</span></span><br><span class="line">--remove_dead_master_conf<span class="comment">#移除配置文件中已宕机的主机信息</span></span><br><span class="line">--ignore_last_failover<span class="comment">#忽略上一次切换</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><p>MHA监控脚本切换一次就会退出，需要再次启动</p></blockquote><ul><li>关闭命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterha_stop --conf=/etc/masterha/app1.cnf</span><br></pre></td></tr></table></figure><p><em>拓展：MySQL安全机制</em></p><p><em>1.完成一次切换，会生成一个锁文件</em></p><p><em>2.下一次切换前，会检查锁文件</em></p><p><em>3.如果锁文件存在，则8小时以内不允许再次切换</em></p><h4 id="4-9-检查MHA的状态"><a href="#4-9-检查MHA的状态" class="headerlink" title="4.9 检查MHA的状态"></a>4.9 检查MHA的状态</h4><ul><li>检查MHA的启动状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># tailf /var/log/mha/app1/manager.log</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">#如果最后一行是如下，表明启动成功</span></span><br><span class="line">Ping(SELECT) succeeded, waiting until MySQL doesn’t respond..</span><br></pre></td></tr></table></figure><ul><li>检查集群状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># masterha_check_status --conf=/etc/mha/app1.cnf</span></span><br><span class="line">mha (pid:7598) is running(0:PING_OK), master:172.16.1.51</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：上面的信息中“mha (pid:7598) is running(0:PING_OK)”表示MHA服务运行OK，否则， 则会显示为类似“mha is stopped(1:NOT_RUNNING).”</span></span><br></pre></td></tr></table></figure><h4 id="4-10-切换测试"><a href="#4-10-切换测试" class="headerlink" title="4.10 切换测试"></a>4.10 切换测试</h4><p>测试当master节点宕机后，一个slave被提升为新的master节点，且VIP也漂移到了这台新的master节点。</p><ul><li>手动关闭master节点的mysql服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># systemctl stop mysqld</span></span><br></pre></td></tr></table></figure><ul><li>查看从库状态，确定master节点是否切换成功</li></ul><p>在从库db03上查看slave状态，db03从库是指向db02这台服务器的（即db03为db02的slave节点），则证明MHA的切换测试成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">                  Master_Host: 172.16.1.52</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><ul><li>检查VIP是否漂移到了新的master节点</li></ul><p>在db02上观察到，VIP<code>172.16.1.59</code> 已经漂移到了db02（新的master）上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># ip address show eth1</span></span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:a3:<span class="built_in">cd</span>:4a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.1.51/24 brd 172.16.1.255 scope global noprefixroute eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.16.1.59/24 brd 172.16.1.255 scope global secondary eth1:1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fea3:cd4a/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h3 id="5-将故障的master节点重新加入集群"><a href="#5-将故障的master节点重新加入集群" class="headerlink" title="5.将故障的master节点重新加入集群"></a>5.将故障的master节点重新加入集群</h3><p>通常情况下自动切换以后,原master可能已经废弃掉,待原master主机修复后,如果数据完整的情况下,可能想把原来master重新作为新主库的slave,这时我们可以借助当时自动切换时刻的MHA志来完成对原master的修复。</p><ul><li>修改manager配置文件（只针对自动切换的，在线切换不会删除配置）</li></ul><p>在/service/mha/app1.cnf中添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[server1]</span><br><span class="line">hostname=172.16.1.51</span><br><span class="line">port=3306</span><br><span class="line">candidate_master=1</span><br><span class="line">check_repl_delay=0</span><br></pre></td></tr></table></figure><ul><li>修复旧的master，然后配置成为新master的slave节点</li></ul><p>这里需要注意一点，如果是基于GTID的主从复制框架，可自动定位到binlog位置点，可以不查看日志寻找位置点信息。若是其他的主从复制架构，则需要通过日志来查看binglog位置点。</p><p>查看manager切换时产生的日志信息，找到CHANGE MASTER TO语句相关信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># less /service/mha/app1/manager.log</span></span><br><span class="line">Wed Jul  1 16:27:51 2020 - [info]  All other slaves should start replication from here. Statement should be: CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;172.16.1.52&#x27;</span>, MASTER_PORT=3306, MASTER_AUTO_POSITION=1, MASTER_USER=<span class="string">&#x27;rep&#x27;</span>, MASTER_PASSWORD=<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于本文使用的是GTID的主从复制架构，所以这里并没显示出binglog位置点，若是使用的其他复制架构，这里则可以显示出binglog位置点信息</span></span><br></pre></td></tr></table></figure><ul><li>在旧master上执行change master to 语句</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to </span><br><span class="line">master_host=<span class="string">&#x27;172.16.1.52&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_auto_position=1;</span><br></pre></td></tr></table></figure><ul><li>启动旧master的线程，并查看从库状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line">mysql&gt; show slave status\G</span><br></pre></td></tr></table></figure><p>到这里，旧master就可以同步新master的数据了。此时旧的master已经重新加入集群，变成mha集群中的一个slave角色了。</p><ul><li>在manager节点上重新启动manager监控进程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup masterha_manager --conf=/service/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /service/mha/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><blockquote><p><strong>master节点故障设置成slave节点脚本<code>mha_master_recover_to_slave.sh</code></strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#设置mysql服务变量</span></span><br><span class="line">mysqlserver=`ps -ef | grep [m]ysql | wc -l`</span><br><span class="line"><span class="comment">#判断mysql服务是否存在，启动或重启</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$mysqlserver</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    systemctl start mysqld</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    pkill mysqld</span><br><span class="line">    systemctl start mysqld</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#mysql启动需要时间</span></span><br><span class="line">sleep 3</span><br><span class="line"><span class="comment">#获取change master to语句,并修改rep的密码为123</span></span><br><span class="line">change=`ssh 172.16.1.53 <span class="string">&quot;grep -i &#x27;change master to&#x27; /service/mha/app1/manager.log | tail -1 | sed -r &#x27;s#(.*)(CHANGE.*)#\2#g&#x27; | sed &#x27;s#xxx#123#g&#x27;&quot;</span>`</span><br><span class="line"><span class="comment">#恢复的数据执行change语句</span></span><br><span class="line">mysql -e <span class="string">&quot;<span class="variable">$change</span>;start slave&quot;</span></span><br><span class="line"><span class="comment">#修改manager的配置文件</span></span><br><span class="line"><span class="keyword">if</span> [ -z  ]</span><br><span class="line">ssh 172.16.1.53 <span class="string">&quot;cat&gt;&gt;/service/mha/app1.cnf&lt;&lt;EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[server1]</span></span><br><span class="line"><span class="string">hostname=172.16.1.51</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string">EOF&quot;</span></span><br><span class="line"><span class="comment">#远程启动mha</span></span><br><span class="line">ssh 172.16.1.53 <span class="string">&quot;nohup masterha_manager --conf=/service/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /service/mha/manager.log 2&gt;&amp;1 &amp;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6-MHA主库切换机制"><a href="#6-MHA主库切换机制" class="headerlink" title="6.MHA主库切换机制"></a>6.MHA主库切换机制</h3><ul><li>读取manager配置文件，查看是否有优先级设置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#优先提升为主库</span></span><br><span class="line">candidate_master=1</span><br><span class="line"><span class="comment">#关闭检查恢复延迟</span></span><br><span class="line">check_repl_delay=0</span><br></pre></td></tr></table></figure><ul><li><p>数据量不同时，从库中relay log最新的优先级高</p></li><li><p>如果没有配置优先级，并且数据量相同，主机标签小的优先级高</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[server1] &gt; [server2] &gt; [server3]</span><br><span class="line">[a] &gt; [b] &gt; [c]</span><br><span class="line">[1] &gt; [2] &gt; [3]</span><br></pre></td></tr></table></figure><h3 id="7-配置MHA让manager获取binglog信息"><a href="#7-配置MHA让manager获取binglog信息" class="headerlink" title="7.配置MHA让manager获取binglog信息"></a>7.配置MHA让manager获取binglog信息</h3><p>当MHA高可用架构中master故障时，MHA把从库提升为主库，从库和主库之间可能会存在数据差异，manager通过获取主库的binlog给从库同步数据。</p><p>但这里面有个问题，若主库只是MySQL服务停止了，manager可以去主库获取binglog；但如果主库服务器出现故障无法通过网络连接时，manager就无法拿到binglog给从库同步存在差异的数据了。</p><p>这里给出一个解决方案：配置MHA，在manager开启一个进程，实时的把主库产生binglog获取到manager端，后续切换master时，就在manager端拿取binlog同步数据。</p><h4 id="7-1-配置manager的配置文件（实时获取）"><a href="#7-1-配置manager的配置文件（实时获取）" class="headerlink" title="7.1 配置manager的配置文件（实时获取）"></a>7.1 配置manager的配置文件（实时获取）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># cat&gt;&gt;/service/mha/app1.cnf&lt;&lt;EOF</span></span><br><span class="line"></span><br><span class="line">[binlog1]</span><br><span class="line">no_master=1</span><br><span class="line">hostname=172.16.1.53</span><br><span class="line">master_binlog_dir=/data/mysql/binlog</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="7-2-创建binlog存放目录"><a href="#7-2-创建binlog存放目录" class="headerlink" title="7.2 创建binlog存放目录"></a>7.2 创建binlog存放目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># mkdir -p /data/mysql/binlog</span></span><br></pre></td></tr></table></figure><h4 id="7-3-启动binlog实时获取进程"><a href="#7-3-启动binlog实时获取进程" class="headerlink" title="7.3 启动binlog实时获取进程"></a>7.3 启动binlog实时获取进程</h4><p>进入到 /data/mysql/binlog 目录下启动进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># cd /data/mysql/binlog</span></span><br><span class="line">[root@db03 ~]<span class="comment"># mysqlbinlog -R --host=172.16.1.51 --user=mhaadmin --password=mhapass --raw --stop-never mysql-bin.000001 &amp;</span></span><br></pre></td></tr></table></figure><p>命令选项说明：</p><ul><li>-R ：–read-from-remote-server：备份远端服务器的binlog</li><li>–host：指定远端主机</li><li>–user：指定用户</li><li>–password：指定密码</li><li>–raw：将binlog以二进制方式存储</li><li>–stop-never：从指定的binlog开始，以后生成的所有binlog都会同步</li></ul><h4 id="7-4-重新启动manager监控进程"><a href="#7-4-重新启动manager监控进程" class="headerlink" title="7.4 重新启动manager监控进程"></a>7.4 重新启动manager监控进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup masterha_manager --conf=/service/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /service/mha/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> MHA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 备份与恢复</title>
      <link href="posts/mysql-backup-and-restore/"/>
      <url>posts/mysql-backup-and-restore/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库备份的类型"><a href="#一、数据库备份的类型" class="headerlink" title="一、数据库备份的类型"></a>一、数据库备份的类型</h2><p>按照服务器的运行状态，可分为：冷备、热备、温备。</p><ul><li><p><strong>冷备</strong>：数据库处于停机状态下进行备份。</p></li><li><p><strong>热备</strong>：数据库处于运行状态下备份，在热备期间，数据库的读写操作均可正常进行。</p><p>​            在mysql中，MyISAM存储引擎不支持热备，InnoDB存储引擎支持热备。</p></li><li><p><strong>温备</strong>：数据库处于运行状态下备份，但是在温备期间数据库只能进行读操作，不能进行写操作</p></li></ul><hr><p>按照备份后的内容量，可分为：全备、增备、差异备份。</p><ul><li><strong>全量备份</strong>：对所有数据进行一个完全的备份。</li><li><strong>增备备份</strong>：对上一次”备份”以后变化的数据的备份。</li><li><strong>差异备份</strong>：对上一次”全量备份”以后变化的数据的备份。</li></ul><hr><p>按照备份的方式，可分为：逻辑备份、物理备份。</p><ul><li><p><strong>逻辑备份</strong>：将数据从数据库中导出，并将导出的数据进行存档备份。</p></li><li><p><strong>物理备份</strong>：直接备份数据库所对应的数据文件。物理备份相对逻辑备份来说，性能更强。</p></li></ul><p>&nbsp;</p><h2 id="二、数据库备份方式"><a href="#二、数据库备份方式" class="headerlink" title="二、数据库备份方式"></a>二、数据库备份方式</h2><p>在数据库备份当中，一般会采用逻辑备份、物理备份这两种方式对数据库进行备份。</p><h3 id="2-1-逻辑备份"><a href="#2-1-逻辑备份" class="headerlink" title="2.1 逻辑备份"></a>2.1 逻辑备份</h3><p>基于SQL语句进行备份。</p><p>常见得逻辑备份方式：</p><ul><li><p>以binlog方式进行备份</p></li><li><p>使用mysqldump备份工具备份</p></li><li><p>replication（数据库主从）</p></li><li><p>select  into outfile （使用SQL语句导出数据到文件）</p></li></ul><h3 id="2-2-物理备份"><a href="#2-2-物理备份" class="headerlink" title="2.2 物理备份"></a>2.2 物理备份</h3><p>基于数据文件的备份。</p><p>常见物理备份方式：</p><ul><li>使用xtrabackup备份工具备份</li></ul><p>&nbsp;</p><h2 id="三、MySQL主流备份工具之mysqldump"><a href="#三、MySQL主流备份工具之mysqldump" class="headerlink" title="三、MySQL主流备份工具之mysqldump"></a>三、MySQL主流备份工具之mysqldump</h2><p>mysqldump是MySQL自带的免费备份工具，是一种<strong>逻辑备份</strong>工具。</p><p>在MySQL 5.7中新增了一个mysqldump的改进版备份工具mysqlpump，它支持基于表级别的并行备份。</p><h3 id="3-1-备份方法"><a href="#3-1-备份方法" class="headerlink" title="3.1 备份方法"></a>3.1 备份方法</h3><ul><li>备份单表或者一组指定的库表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump [options] db_name [tbl_name ...]</span><br></pre></td></tr></table></figure><ul><li>备份一组或者一个数据库下的所有表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump [options] --databases db_name ...</span><br></pre></td></tr></table></figure><ul><li>备份整个数据库实例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump [options] --all-databases</span><br></pre></td></tr></table></figure><h3 id="3-2-mysqldump常用命令行选项"><a href="#3-2-mysqldump常用命令行选项" class="headerlink" title="3.2 mysqldump常用命令行选项"></a>3.2 mysqldump常用命令行选项</h3><ul><li>-A，–all-databases：备份所有数据库下的所有表。</li><li>-B，–databases：备份指定数据库下的所有表。</li><li>–master-data[=value]：则在备份文件中会生成一 条CHANGE MASTER TO语句（包含binlog pos，binlog file）<ul><li>value=2：备份文件中生成的CHANGE MASTER TO语句将被注释</li><li>value=1：该语句不会被注释</li><li>value=0：不记录CHANGE MASTER TO语句</li></ul></li><li>-F，–flush-logs：在开始备份之前刷新MySQL二进制日志文件。</li><li>-E,–events：在备份数据中包含数据库的事件。</li><li>–triggers：在备份文件中包含每个备份表的触发器。</li><li>–single-transaction：在备份数据之前开启一个事务快照，然后在事务快照内进行备份。<ul><li>结合–master-data实现<strong>热备</strong></li></ul></li><li>-d，–no-data：不备份表数据，只备份表结构。</li><li>-t，–no-create-info：只备份数据，不备份表结构。</li><li>-R，–routines：备份数据中存储过程和函数。</li></ul><h3 id="3-3-mysqldump备份注意"><a href="#3-3-mysqldump备份注意" class="headerlink" title="3.3 mysqldump备份注意"></a>3.3 mysqldump备份注意</h3><ul><li>mysqldump在备份和恢复时都需要MySQL实例启动为前提</li><li>一般数据量级100G以内，大约15-30分钟可以恢复（TB、PB、EB就需要考虑别的方式）</li><li>mysqldump是以覆盖的形式恢复数据的</li></ul><h3 id="3-4-实战：模拟完全备份和恢复"><a href="#3-4-实战：模拟完全备份和恢复" class="headerlink" title="3.4 实战：模拟完全备份和恢复"></a>3.4 实战：模拟完全备份和恢复</h3><p>在备份源数据库中插入一些数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+-------+</span><br><span class="line">| id | name  |</span><br><span class="line">+----+-------+</span><br><span class="line">|  1 | tset1 |</span><br><span class="line">|  2 | test2 |</span><br><span class="line">|  3 | test3 |</span><br><span class="line">|  4 | test4 |</span><br><span class="line">|  5 | test5 |</span><br><span class="line">|  6 | test6 |</span><br><span class="line">+----+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into <span class="built_in">test</span>(name) values(<span class="string">&quot;tset7&quot;</span>),(<span class="string">&quot;test8&quot;</span>),(<span class="string">&quot;test9&quot;</span>),(<span class="string">&quot;test10&quot;</span>);</span><br><span class="line">Query OK, 4 rows affected (0.01 sec)</span><br><span class="line">Records: 4  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | name   |</span><br><span class="line">+----+--------+</span><br><span class="line">......</span><br><span class="line">|  7 | test7  |</span><br><span class="line">|  8 | test8  |</span><br><span class="line">|  9 | test9  |</span><br><span class="line">| 10 | test10 |</span><br><span class="line">+----+--------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>在远程备份服务器中使用mysqldump远程备份数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 ~]<span class="comment"># mkdir /data/backup/mysql/mysqldump -p</span></span><br><span class="line">[root@db02 ~]<span class="comment"># cd /data/backup/mysql/mysqldump/</span></span><br><span class="line">[root@db02 mysqldump]<span class="comment"># mysqldump -h 172.16.1.51 -uroot -p123 --single-transaction \</span></span><br><span class="line">--master-data=2 --triggers --events -R -A &gt; backup_`data +%F_%H_%M_%S`.sql</span><br><span class="line">[root@db02 mysqldump]<span class="comment"># ls -lh</span></span><br><span class="line">total 347M</span><br><span class="line">-rw-r--r-- 1 root root 347M Jun 19 23:37 backup_2020-06-19_23_37_03.sql</span><br></pre></td></tr></table></figure><p>查看备份文件中的binlog pos位置、binlog文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db02 mysqldump]<span class="comment"># head -100 backup_2020-06-19_23_37_03.sql | grep -i CHANGE</span></span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000004&#x27;</span>, MASTER_LOG_POS=911;</span><br></pre></td></tr></table></figure><p>把备份文件导入恢复服务器的数据库实例中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 mysqldump]<span class="comment"># mysql -uroot -p123 -e &quot;reset master;&quot;</span></span><br><span class="line">[root@db01 mysqldump]<span class="comment"># mysql -uroot -p123 &lt; backup_2020-06-19_23_37_03.sql</span></span><br></pre></td></tr></table></figure><p>登录恢复服务器中的数据库，校验数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | name   |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | tset1  |</span><br><span class="line">|  2 | test2  |</span><br><span class="line">|  3 | test3  |</span><br><span class="line">|  4 | test4  |</span><br><span class="line">|  5 | test5  |</span><br><span class="line">|  6 | test6  |</span><br><span class="line">|  7 | tset7  |</span><br><span class="line">|  8 | test8  |</span><br><span class="line">|  9 | test9  |</span><br><span class="line">| 10 | test10 |</span><br><span class="line">+----+--------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="四、MySQL主流备份工具之XtraBackup"><a href="#四、MySQL主流备份工具之XtraBackup" class="headerlink" title="四、MySQL主流备份工具之XtraBackup"></a>四、MySQL主流备份工具之XtraBackup</h2><p>XtraBackup是一款开源的热备份软件（<strong>物理备份</strong>），它可以非阻塞地对InnoDB和XtraDB数据库进行备份。</p><p>XtraBackup的出现，解决了mysqldump在备份数据量大的数据库时，备份和恢复的时间高开销的问题。</p><h3 id="4-1-XtraBackup的都优点"><a href="#4-1-XtraBackup的都优点" class="headerlink" title="4.1 XtraBackup的都优点"></a>4.1 XtraBackup的都优点</h3><ul><li>快速可靠地完成备份。</li><li>在备份期间不间断地处理事务。 </li><li>节省磁盘空间和网络带宽。 </li><li>自动备份验证。 </li><li>更快地恢复，以保障业务有更长的在线时间。</li></ul><h3 id="4-2-备份方式（物理备份）"><a href="#4-2-备份方式（物理备份）" class="headerlink" title="4.2 备份方式（物理备份）"></a>4.2 备份方式（物理备份）</h3><ul><li>对于非innodb表（比如myisam）是直接锁表，cp数据文件，属于一种温备。</li><li>对于innodb的表（支持事务），不锁表，cp数据页最终以数据文件方式保存下来，并且把redo和undo一并备走，属于热备方式。</li><li>备份时读取配置文件/etc/my.cnf</li></ul><h3 id="4-3-下载安装XtraBackup软件"><a href="#4-3-下载安装XtraBackup软件" class="headerlink" title="4.3 下载安装XtraBackup软件"></a>4.3 下载安装XtraBackup软件</h3><ul><li>安装依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL</span><br></pre></td></tr></table></figure><ul><li>安装XtraBackup</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y httpss://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.4/binary/redhat/6/x86_64/percona-xtrabackup-24-2.4.4-1.el6.x86_64.rpm </span><br></pre></td></tr></table></figure><h3 id="4-4-innobackupex命令常用选项"><a href="#4-4-innobackupex命令常用选项" class="headerlink" title="4.4 innobackupex命令常用选项"></a>4.4 innobackupex命令常用选项</h3><ul><li>–user=USER：备份服务器数据库用户名</li><li>–password=PASSWORD：备份服务器数据库密码</li><li>–host=HOST：备份服务器的IP</li><li>–port=PORT：备份服务器的端口号</li><li>–no-timestamp：不在指定备份目录下创建以时间戳命名的目录</li><li>–defaults-file：指定默认的my.cnf配置文件</li><li>–apply-log：在指定备份目录下执行应用xtrabackup_logfile文件中的事务日志操作，同时根据配置文件中的innodb_log_file_size系统参数生成新的事务日志</li><li>–redo-only：针对未提交的事务不执行回滚操作，结合–apply-log一起使用</li><li> –copy-back：会从指定目录中读取数据文件，并复制到目标数据库的数据目录中</li><li> –incremental：告诉xtrabackup创建一个增量备份，而不是一个完整的备份</li><li> –incremental-basedir=DIRECTORY：与–incremental一同使用，指定完全备份或上一次增量备份的路径</li><li> –incremental-dir=DIRECTORY：项用于在应用redo日志时指定一个增量备份目录</li></ul><h3 id="4-5-实战：模拟完全备份与恢复"><a href="#4-5-实战：模拟完全备份与恢复" class="headerlink" title="4.5 实战：模拟完全备份与恢复"></a>4.5 实战：模拟完全备份与恢复</h3><p>使用innobackupex命令完全备份数据库文件，并将备份文件放在<code>/data/backup/mysql/test_backup</code>目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># mkdir -p /data/backup/mysql/test_backup</span></span><br><span class="line">[root@db01 ~]<span class="comment"># innobackupex --defaults-file=/etc/my.cnf  --user=root --password=123 \</span></span><br><span class="line">--no-timestamp /data/backup/mysql/test_backup/</span><br><span class="line">......</span><br><span class="line">200621 21:18:48 completed OK!     <span class="comment">#看到类似的输出信息，则表示备份成功！</span></span><br></pre></td></tr></table></figure><p>对备份目录执行–apply-log操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># innobackupex --user=root --password=123 --apply-log /data/backup/mysql/test_backup/</span></span><br><span class="line">......</span><br><span class="line">200621 21:22:06 completed OK!     <span class="comment">#看到类似的输出信息，则表示--apply-log操作执行成功！</span></span><br></pre></td></tr></table></figure><p>现在模拟数据库数据丢失情况。即先停止数据库，清空数据目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># /etc/init.d/mysqld stop</span></span><br><span class="line">[root@db01 ~]<span class="comment"># rm -rf /usr/local/mysql/data/*</span></span><br></pre></td></tr></table></figure><p>恢复数据，对备份目录执行–copy-back操作，把备份文件复制到之前清空的数据目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># innobackupex --defaults-file=/etc/my.cnf --copy-back /data/backup/mysql/test_backup/</span></span><br><span class="line">......</span><br><span class="line">200621 21:51:42 completed OK!     <span class="comment">#看到类似的输出信息，表示--copy-back操作执行成功！  </span></span><br></pre></td></tr></table></figure><p>修改数据目录的属主、属组，启动数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># chown -R mysql:mysql /usr/local/mysql/data</span></span><br><span class="line">[root@db01 ~]<span class="comment"># /etc/init.d/mysqld start</span></span><br></pre></td></tr></table></figure><p>登录数据库，校验数据是否正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># mysql -uroot -p123 -e &quot;show databases;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-实战：模拟增量备份与恢复"><a href="#4-6-实战：模拟增量备份与恢复" class="headerlink" title="4.6 实战：模拟增量备份与恢复"></a>4.6 实战：模拟增量备份与恢复</h3><p><strong>增量备份特性</strong>：</p><ul><li>基于上一次备份进行增量</li><li>增量备份无法单独恢复，必须基于全备进行恢复</li><li>所有增量必须要按顺序合并到全备当中</li></ul><h4 id="4-6-1-完全备份和增量备份"><a href="#4-6-1-完全备份和增量备份" class="headerlink" title="4.6.1 完全备份和增量备份"></a>4.6.1 完全备份和增量备份</h4><p>使用innobackupex命令给数据库进行一次<strong>完全备份</strong>，备份目录到<code>backup-$(date +%F)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># innobackupex --user=root --password=123 --no-timestamp /data/backup/mysql/backup-$(date +%F)</span></span><br><span class="line">......</span><br><span class="line">200622 18:38:04 completed OK!</span><br></pre></td></tr></table></figure><p>完全备份成功后，进入数据库新建库、表并插入一些数据（制造增量数据）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database test1;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use test1;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table tb1(id int);</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into tb1(id) values(1),(2),(3);</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tb1;</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>进行<strong>第一次增备备份</strong>。第一次增量备份的basedir是完全备份，因为在第一 次增量备份之前的最近一次备份只有完全备份。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># innobackupex --user=root --password=123 --no-timestamp --incremental-basedir=/data/backup/mysql/backup-2020-06-22/ --incremental /data/backup/mysql/incremental_one</span></span><br><span class="line">......</span><br><span class="line">200622 18:54:29 completed OK!</span><br></pre></td></tr></table></figure><p>继续制造测试数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table tb2(id int,name varchar(10));</span><br><span class="line">Query OK, 0 rows affected (0.37 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into tb2(id,name) values(1,<span class="string">&#x27;name1&#x27;</span>),(2,<span class="string">&#x27;name2&#x27;</span>),(3,<span class="string">&#x27;name3&#x27;</span>);</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tb2;</span><br><span class="line">+------+-------+</span><br><span class="line">| id   | name  |</span><br><span class="line">+------+-------+</span><br><span class="line">|    1 | name1 |</span><br><span class="line">|    2 | name2 |</span><br><span class="line">|    3 | name3 |</span><br><span class="line">+------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>进行<strong>第二次增量备份</strong>。第二次增量备份就不需要再基于完全备份了，因为最近一次备份是第一次增量备份，这里第二次增量备份的<code>basedir</code>是基于第一次增量备份的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># innobackupex --user=root --password=123 --no-timestamp --incremental-basedir=/data/backup/mysql/incremental_one/ --incremental /data/backup/mysql/incremental_two</span></span><br><span class="line">......</span><br><span class="line">200622 19:06:28 completed OK!</span><br></pre></td></tr></table></figure><h4 id="4-6-2-增量备份恢复"><a href="#4-6-2-增量备份恢复" class="headerlink" title="4.6.2 增量备份恢复"></a>4.6.2 增量备份恢复</h4><p>在恢复数据前，先停止数据库并清空相关数据目录（建议先备份在情况）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># /etc/init.d/mysqld stop</span></span><br><span class="line">[root@db01 ~]<span class="comment"># rm -rf /usr/local/mysql/data/*</span></span><br></pre></td></tr></table></figure><p>进入完全备份目录，执行–apply-log操作需要带上–redo-only选项，只应用完成redo日志，不对未提交的事务执行回滚操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># cd /data/backup/mysql/backup-2020-06-22</span></span><br><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># innobackupex --apply-log --redo-only ./</span></span><br><span class="line">......</span><br><span class="line">200622 19:54:00 completed OK!</span><br></pre></td></tr></table></figure><p>在完全备份的基础上执行第一次增量备份–apply-log操作（带上–redo-only）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># innobackupex --apply-log --redo-only /data/backup/mysql/backup-2020-06-22/ --incremental-dir=/data/backup/mysql/incremental_one/</span></span><br><span class="line">......</span><br><span class="line">200622 19:58:29 completed OK!</span><br></pre></td></tr></table></figure><p>在执行–apply-log操作的第一次增量备份的完全备份目录中，再对第二次增量备份执行–apply-log操作，因为这是最后一次增量备份，所以不需要加–redo-only选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># innobackupex --apply-log /data/backup/mysql/backup-2020-06-22/ --incremental-dir=/data/backup/mysql/incremental_two/</span></span><br><span class="line">......</span><br><span class="line">200622 20:02:57 completed OK!</span><br></pre></td></tr></table></figure><p>最后，在对完全备份目录执行一次–apply-log操作，生成redo log文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># innobackupex --apply-log --redo-only /data/backup/mysql/backup-2020-06-22/</span></span><br><span class="line">......</span><br><span class="line">200622 20:38:34 completed OK!</span><br><span class="line"></span><br><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># ll -h</span></span><br><span class="line">total 243M</span><br><span class="line">-rw-r----- 1 root root  430 Jun 22 20:33 backup-my.cnf</span><br><span class="line">drwxr-x--- 2 root root   70 Jun 22 20:37 binlog</span><br><span class="line">drwxr-x--- 2 root root 4.0K Jun 22 20:37 db_test1</span><br><span class="line">drwxr-x--- 2 root root   20 Jun 22 20:37 db_test3</span><br><span class="line">-rw-r----- 1 root root  76M Jun 22 20:38 ibdata1</span><br><span class="line">-rw-r----- 1 root root  50M Jun 22 20:33 ibdata2</span><br><span class="line">-rw-r----- 1 root root  48M Jun 22 20:38 ib_logfile0</span><br><span class="line">-rw-r----- 1 root root  48M Jun 22 20:38 ib_logfile1</span><br><span class="line">-rw-r----- 1 root root  12M Jun 22 20:37 ibtmp1</span><br><span class="line">drwxr-x--- 2 root root 4.0K Jun 22 20:37 mysql</span><br><span class="line">drwxr-x--- 2 root root 4.0K Jun 22 20:37 performance_schema</span><br><span class="line">drwxr-x--- 2 root root   60 Jun 22 20:37 <span class="built_in">test</span></span><br><span class="line">drwxr-x--- 2 root root   80 Jun 22 20:37 test1</span><br><span class="line">drwxr-x--- 2 root root  176 Jun 22 20:37 world</span><br><span class="line">-rw-r----- 1 root root   27 Jun 22 20:37 xtrabackup_binlog_info</span><br><span class="line">-rw-r--r-- 1 root root   27 Jun 22 20:38 xtrabackup_binlog_pos_innodb</span><br><span class="line">-rw-r----- 1 root root  117 Jun 22 20:38 xtrabackup_checkpoints</span><br><span class="line">-rw-r----- 1 root root  595 Jun 22 20:37 xtrabackup_info</span><br><span class="line">-rw-r----- 1 root root 8.0M Jun 22 20:35 xtrabackup_logfile</span><br></pre></td></tr></table></figure><p>将完全备份目录下的数据文件复制到相关目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 backup-2020-06-22]<span class="comment"># innobackupex --copy-back ./</span></span><br><span class="line">......</span><br><span class="line">200622 20:40:22 completed OK!</span><br></pre></td></tr></table></figure><p>修改数据目录属主并启动MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># chown -R mysql.mysql /usr/local/mysql/data/</span></span><br><span class="line">[root@db01 ~]<span class="comment"># /etc/init.d/mysqld start</span></span><br></pre></td></tr></table></figure><p>登录数据库，效验数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># mysql -uroot -p123 -e &quot;use test1;select * from tb1,tb2;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQ </tag>
            
            <tag> XtraBackup </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
